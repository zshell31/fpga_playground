// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : ulx3s.v
// Device     : LFE5U-45F-6BG381C
// LiteX sha1 : 04f6b17d
// Date       : 2022-05-19 09:17:58
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module ulx3s (
	input  wire clk25,
	input  wire rst,
	output wire sdram_clock,
	output wire wifi_gpio0,
	output reg  serial_tx,
	input  wire serial_rx,
	output wire [12:0] sdram_a,
	input  wire [15:0] sdram_dq,
	output wire sdram_we_n,
	output wire sdram_ras_n,
	output wire sdram_cas_n,
	output wire sdram_cs_n,
	output wire sdram_cke,
	output wire [1:0] sdram_ba,
	output wire [1:0] sdram_dm,
	output wire gpdi_clk_p,
	output wire gpdi_data0_p,
	output wire gpdi_data1_p,
	output wire gpdi_data2_p,
	output reg  user_led0,
	output reg  user_led1,
	output reg  user_led2,
	output reg  user_led3,
	output reg  user_led4,
	output reg  user_led5,
	output reg  user_led6,
	output reg  user_led7,
	output wire sdcard_clk,
	input  wire sdcard_cmd,
	input  wire [3:0] sdcard_data
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  main_rst = 1'd0;
wire sys_clk;
wire sys_rst;
wire sys_ps_clk;
wire sys_ps_rst;
wire main_pll_reset;
wire main_pll_locked;
reg  main_pll_stdby = 1'd0;
wire main_ecp5pll0_clkin;
wire main_ecp5pll0_clkout0;
wire main_ecp5pll0_clkout1;
wire main_video_pll_reset;
wire main_video_pll_locked;
reg  main_video_pll_stdby = 1'd0;
wire main_ecp5pll1_clkin;
wire hdmi_clk;
wire hdmi_rst;
wire hdmi5x_clk;
wire hdmi5x_rst;
wire main_ecp5pll1_clkout0;
wire main_ecp5pll1_clkout1;
reg  main_soclinux_soc_rst = 1'd0;
wire main_soclinux_cpu_rst;
reg  [1:0] main_soclinux_reset_storage = 2'd0;
reg  main_soclinux_reset_re = 1'd0;
reg  [31:0] main_soclinux_scratch_storage = 32'd305419896;
reg  main_soclinux_scratch_re = 1'd0;
wire [31:0] main_soclinux_bus_errors_status;
wire main_soclinux_bus_errors_we;
reg  main_soclinux_bus_errors_re = 1'd0;
wire main_soclinux_bus_error;
reg  [31:0] main_soclinux_bus_errors = 32'd0;
wire main_soclinux_reset;
reg  main_soclinux_jtag_clk = 1'd0;
reg  main_soclinux_jtag_enable = 1'd0;
reg  main_soclinux_jtag_capture = 1'd0;
reg  main_soclinux_jtag_shift = 1'd0;
reg  main_soclinux_jtag_update = 1'd0;
reg  main_soclinux_jtag_reset = 1'd0;
wire main_soclinux_jtag_tdo;
reg  main_soclinux_jtag_tdi = 1'd0;
reg  [31:0] main_soclinux_interrupt = 32'd0;
wire [29:0] main_soclinux_pbus_adr;
wire [31:0] main_soclinux_pbus_dat_w;
wire [31:0] main_soclinux_pbus_dat_r;
wire [3:0] main_soclinux_pbus_sel;
wire main_soclinux_pbus_cyc;
wire main_soclinux_pbus_stb;
wire main_soclinux_pbus_ack;
wire main_soclinux_pbus_we;
wire [2:0] main_soclinux_pbus_cti;
wire [1:0] main_soclinux_pbus_bte;
wire main_soclinux_pbus_err;
wire [29:0] main_soclinux_plicbus_adr;
wire [31:0] main_soclinux_plicbus_dat_w;
wire [31:0] main_soclinux_plicbus_dat_r;
wire [3:0] main_soclinux_plicbus_sel;
wire main_soclinux_plicbus_cyc;
wire main_soclinux_plicbus_stb;
wire main_soclinux_plicbus_ack;
wire main_soclinux_plicbus_we;
wire [2:0] main_soclinux_plicbus_cti;
wire [1:0] main_soclinux_plicbus_bte;
reg  main_soclinux_plicbus_err = 1'd0;
wire [29:0] main_soclinux_clintbus_adr;
wire [31:0] main_soclinux_clintbus_dat_w;
wire [31:0] main_soclinux_clintbus_dat_r;
wire [3:0] main_soclinux_clintbus_sel;
wire main_soclinux_clintbus_cyc;
wire main_soclinux_clintbus_stb;
wire main_soclinux_clintbus_ack;
wire main_soclinux_clintbus_we;
wire [2:0] main_soclinux_clintbus_cti;
wire [1:0] main_soclinux_clintbus_bte;
reg  main_soclinux_clintbus_err = 1'd0;
wire [29:0] main_soclinux_soclinux_ram_bus_adr;
wire [31:0] main_soclinux_soclinux_ram_bus_dat_w;
wire [31:0] main_soclinux_soclinux_ram_bus_dat_r;
wire [3:0] main_soclinux_soclinux_ram_bus_sel;
wire main_soclinux_soclinux_ram_bus_cyc;
wire main_soclinux_soclinux_ram_bus_stb;
reg  main_soclinux_soclinux_ram_bus_ack = 1'd0;
wire main_soclinux_soclinux_ram_bus_we;
wire [2:0] main_soclinux_soclinux_ram_bus_cti;
wire [1:0] main_soclinux_soclinux_ram_bus_bte;
reg  main_soclinux_soclinux_ram_bus_err = 1'd0;
reg  main_soclinux_soclinux_adr_burst = 1'd0;
wire [13:0] main_soclinux_soclinux_adr;
wire [31:0] main_soclinux_soclinux_dat_r;
wire [29:0] main_soclinux_ram_bus_ram_bus_adr;
wire [31:0] main_soclinux_ram_bus_ram_bus_dat_w;
wire [31:0] main_soclinux_ram_bus_ram_bus_dat_r;
wire [3:0] main_soclinux_ram_bus_ram_bus_sel;
wire main_soclinux_ram_bus_ram_bus_cyc;
wire main_soclinux_ram_bus_ram_bus_stb;
reg  main_soclinux_ram_bus_ram_bus_ack = 1'd0;
wire main_soclinux_ram_bus_ram_bus_we;
wire [2:0] main_soclinux_ram_bus_ram_bus_cti;
wire [1:0] main_soclinux_ram_bus_ram_bus_bte;
reg  main_soclinux_ram_bus_ram_bus_err = 1'd0;
reg  main_soclinux_ram_adr_burst = 1'd0;
wire [10:0] main_soclinux_ram_adr;
wire [31:0] main_soclinux_ram_dat_r;
reg  [3:0] main_soclinux_ram_we = 4'd0;
wire [31:0] main_soclinux_ram_dat_w;
wire main_soclinux_tx_sink_valid;
reg  main_soclinux_tx_sink_ready = 1'd0;
wire main_soclinux_tx_sink_first;
wire main_soclinux_tx_sink_last;
wire [7:0] main_soclinux_tx_sink_payload_data;
reg  [7:0] main_soclinux_tx_data = 8'd0;
reg  [3:0] main_soclinux_tx_count = 4'd0;
reg  main_soclinux_tx_enable = 1'd0;
reg  main_soclinux_tx_tick = 1'd0;
reg  [31:0] main_soclinux_tx_phase = 32'd0;
reg  main_soclinux_rx_source_valid = 1'd0;
wire main_soclinux_rx_source_ready;
reg  main_soclinux_rx_source_first = 1'd0;
reg  main_soclinux_rx_source_last = 1'd0;
reg  [7:0] main_soclinux_rx_source_payload_data = 8'd0;
reg  [7:0] main_soclinux_rx_data = 8'd0;
reg  [3:0] main_soclinux_rx_count = 4'd0;
reg  main_soclinux_rx_enable = 1'd0;
reg  main_soclinux_rx_tick = 1'd0;
reg  [31:0] main_soclinux_rx_phase = 32'd0;
wire main_soclinux_rx_rx;
reg  main_soclinux_rx_rx_d = 1'd0;
reg  main_soclinux_uart_rxtx_re = 1'd0;
wire [7:0] main_soclinux_uart_rxtx_r;
reg  main_soclinux_uart_rxtx_we = 1'd0;
wire [7:0] main_soclinux_uart_rxtx_w;
wire main_soclinux_uart_txfull_status;
wire main_soclinux_uart_txfull_we;
reg  main_soclinux_uart_txfull_re = 1'd0;
wire main_soclinux_uart_rxempty_status;
wire main_soclinux_uart_rxempty_we;
reg  main_soclinux_uart_rxempty_re = 1'd0;
wire main_soclinux_uart_irq;
wire main_soclinux_uart_tx_status;
reg  main_soclinux_uart_tx_pending = 1'd0;
wire main_soclinux_uart_tx_trigger;
reg  main_soclinux_uart_tx_clear = 1'd0;
reg  main_soclinux_uart_tx_trigger_d = 1'd0;
wire main_soclinux_uart_rx_status;
reg  main_soclinux_uart_rx_pending = 1'd0;
wire main_soclinux_uart_rx_trigger;
reg  main_soclinux_uart_rx_clear = 1'd0;
reg  main_soclinux_uart_rx_trigger_d = 1'd0;
wire main_soclinux_uart_tx0;
wire main_soclinux_uart_rx0;
reg  [1:0] main_soclinux_uart_status_status = 2'd0;
wire main_soclinux_uart_status_we;
reg  main_soclinux_uart_status_re = 1'd0;
wire main_soclinux_uart_tx1;
wire main_soclinux_uart_rx1;
reg  [1:0] main_soclinux_uart_pending_status = 2'd0;
wire main_soclinux_uart_pending_we;
reg  main_soclinux_uart_pending_re = 1'd0;
reg  [1:0] main_soclinux_uart_pending_r = 2'd0;
wire main_soclinux_uart_tx2;
wire main_soclinux_uart_rx2;
reg  [1:0] main_soclinux_uart_enable_storage = 2'd0;
reg  main_soclinux_uart_enable_re = 1'd0;
wire main_soclinux_uart_txempty_status;
wire main_soclinux_uart_txempty_we;
reg  main_soclinux_uart_txempty_re = 1'd0;
wire main_soclinux_uart_rxfull_status;
wire main_soclinux_uart_rxfull_we;
reg  main_soclinux_uart_rxfull_re = 1'd0;
wire main_soclinux_uart_uart_sink_valid;
wire main_soclinux_uart_uart_sink_ready;
wire main_soclinux_uart_uart_sink_first;
wire main_soclinux_uart_uart_sink_last;
wire [7:0] main_soclinux_uart_uart_sink_payload_data;
wire main_soclinux_uart_uart_source_valid;
wire main_soclinux_uart_uart_source_ready;
wire main_soclinux_uart_uart_source_first;
wire main_soclinux_uart_uart_source_last;
wire [7:0] main_soclinux_uart_uart_source_payload_data;
wire main_soclinux_uart_tx_fifo_sink_valid;
wire main_soclinux_uart_tx_fifo_sink_ready;
reg  main_soclinux_uart_tx_fifo_sink_first = 1'd0;
reg  main_soclinux_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] main_soclinux_uart_tx_fifo_sink_payload_data;
wire main_soclinux_uart_tx_fifo_source_valid;
wire main_soclinux_uart_tx_fifo_source_ready;
wire main_soclinux_uart_tx_fifo_source_first;
wire main_soclinux_uart_tx_fifo_source_last;
wire [7:0] main_soclinux_uart_tx_fifo_source_payload_data;
wire main_soclinux_uart_tx_fifo_re;
reg  main_soclinux_uart_tx_fifo_readable = 1'd0;
wire main_soclinux_uart_tx_fifo_syncfifo_we;
wire main_soclinux_uart_tx_fifo_syncfifo_writable;
wire main_soclinux_uart_tx_fifo_syncfifo_re;
wire main_soclinux_uart_tx_fifo_syncfifo_readable;
wire [9:0] main_soclinux_uart_tx_fifo_syncfifo_din;
wire [9:0] main_soclinux_uart_tx_fifo_syncfifo_dout;
reg  [4:0] main_soclinux_uart_tx_fifo_level0 = 5'd0;
reg  main_soclinux_uart_tx_fifo_replace = 1'd0;
reg  [3:0] main_soclinux_uart_tx_fifo_produce = 4'd0;
reg  [3:0] main_soclinux_uart_tx_fifo_consume = 4'd0;
reg  [3:0] main_soclinux_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] main_soclinux_uart_tx_fifo_wrport_dat_r;
wire main_soclinux_uart_tx_fifo_wrport_we;
wire [9:0] main_soclinux_uart_tx_fifo_wrport_dat_w;
wire main_soclinux_uart_tx_fifo_do_read;
wire [3:0] main_soclinux_uart_tx_fifo_rdport_adr;
wire [9:0] main_soclinux_uart_tx_fifo_rdport_dat_r;
wire main_soclinux_uart_tx_fifo_rdport_re;
wire [4:0] main_soclinux_uart_tx_fifo_level1;
wire [7:0] main_soclinux_uart_tx_fifo_fifo_in_payload_data;
wire main_soclinux_uart_tx_fifo_fifo_in_first;
wire main_soclinux_uart_tx_fifo_fifo_in_last;
wire [7:0] main_soclinux_uart_tx_fifo_fifo_out_payload_data;
wire main_soclinux_uart_tx_fifo_fifo_out_first;
wire main_soclinux_uart_tx_fifo_fifo_out_last;
wire main_soclinux_uart_rx_fifo_sink_valid;
wire main_soclinux_uart_rx_fifo_sink_ready;
wire main_soclinux_uart_rx_fifo_sink_first;
wire main_soclinux_uart_rx_fifo_sink_last;
wire [7:0] main_soclinux_uart_rx_fifo_sink_payload_data;
wire main_soclinux_uart_rx_fifo_source_valid;
wire main_soclinux_uart_rx_fifo_source_ready;
wire main_soclinux_uart_rx_fifo_source_first;
wire main_soclinux_uart_rx_fifo_source_last;
wire [7:0] main_soclinux_uart_rx_fifo_source_payload_data;
wire main_soclinux_uart_rx_fifo_re;
reg  main_soclinux_uart_rx_fifo_readable = 1'd0;
wire main_soclinux_uart_rx_fifo_syncfifo_we;
wire main_soclinux_uart_rx_fifo_syncfifo_writable;
wire main_soclinux_uart_rx_fifo_syncfifo_re;
wire main_soclinux_uart_rx_fifo_syncfifo_readable;
wire [9:0] main_soclinux_uart_rx_fifo_syncfifo_din;
wire [9:0] main_soclinux_uart_rx_fifo_syncfifo_dout;
reg  [4:0] main_soclinux_uart_rx_fifo_level0 = 5'd0;
reg  main_soclinux_uart_rx_fifo_replace = 1'd0;
reg  [3:0] main_soclinux_uart_rx_fifo_produce = 4'd0;
reg  [3:0] main_soclinux_uart_rx_fifo_consume = 4'd0;
reg  [3:0] main_soclinux_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] main_soclinux_uart_rx_fifo_wrport_dat_r;
wire main_soclinux_uart_rx_fifo_wrport_we;
wire [9:0] main_soclinux_uart_rx_fifo_wrport_dat_w;
wire main_soclinux_uart_rx_fifo_do_read;
wire [3:0] main_soclinux_uart_rx_fifo_rdport_adr;
wire [9:0] main_soclinux_uart_rx_fifo_rdport_dat_r;
wire main_soclinux_uart_rx_fifo_rdport_re;
wire [4:0] main_soclinux_uart_rx_fifo_level1;
wire [7:0] main_soclinux_uart_rx_fifo_fifo_in_payload_data;
wire main_soclinux_uart_rx_fifo_fifo_in_first;
wire main_soclinux_uart_rx_fifo_fifo_in_last;
wire [7:0] main_soclinux_uart_rx_fifo_fifo_out_payload_data;
wire main_soclinux_uart_rx_fifo_fifo_out_first;
wire main_soclinux_uart_rx_fifo_fifo_out_last;
reg  [31:0] main_soclinux_timer_load_storage = 32'd0;
reg  main_soclinux_timer_load_re = 1'd0;
reg  [31:0] main_soclinux_timer_reload_storage = 32'd0;
reg  main_soclinux_timer_reload_re = 1'd0;
reg  main_soclinux_timer_en_storage = 1'd0;
reg  main_soclinux_timer_en_re = 1'd0;
reg  main_soclinux_timer_update_value_storage = 1'd0;
reg  main_soclinux_timer_update_value_re = 1'd0;
reg  [31:0] main_soclinux_timer_value_status = 32'd0;
wire main_soclinux_timer_value_we;
reg  main_soclinux_timer_value_re = 1'd0;
wire main_soclinux_timer_irq;
wire main_soclinux_timer_zero_status;
reg  main_soclinux_timer_zero_pending = 1'd0;
wire main_soclinux_timer_zero_trigger;
reg  main_soclinux_timer_zero_clear = 1'd0;
reg  main_soclinux_timer_zero_trigger_d = 1'd0;
wire main_soclinux_timer_zero0;
wire main_soclinux_timer_status_status;
wire main_soclinux_timer_status_we;
reg  main_soclinux_timer_status_re = 1'd0;
wire main_soclinux_timer_zero1;
wire main_soclinux_timer_pending_status;
wire main_soclinux_timer_pending_we;
reg  main_soclinux_timer_pending_re = 1'd0;
reg  main_soclinux_timer_pending_r = 1'd0;
wire main_soclinux_timer_zero2;
reg  main_soclinux_timer_enable_storage = 1'd0;
reg  main_soclinux_timer_enable_re = 1'd0;
reg  [31:0] main_soclinux_timer_value = 32'd0;
wire [12:0] main_dfi_p0_address;
wire [1:0] main_dfi_p0_bank;
wire main_dfi_p0_cas_n;
wire main_dfi_p0_cs_n;
wire main_dfi_p0_ras_n;
wire main_dfi_p0_we_n;
wire main_dfi_p0_cke;
wire main_dfi_p0_odt;
wire main_dfi_p0_reset_n;
wire main_dfi_p0_act_n;
wire [15:0] main_dfi_p0_wrdata;
wire main_dfi_p0_wrdata_en;
wire [1:0] main_dfi_p0_wrdata_mask;
wire main_dfi_p0_rddata_en;
wire [15:0] main_dfi_p0_rddata;
reg  main_dfi_p0_rddata_valid = 1'd0;
reg  [2:0] main_rddata_en = 3'd0;
wire [12:0] main_sdram_slave_p0_address;
wire [1:0] main_sdram_slave_p0_bank;
wire main_sdram_slave_p0_cas_n;
wire main_sdram_slave_p0_cs_n;
wire main_sdram_slave_p0_ras_n;
wire main_sdram_slave_p0_we_n;
wire main_sdram_slave_p0_cke;
wire main_sdram_slave_p0_odt;
wire main_sdram_slave_p0_reset_n;
wire main_sdram_slave_p0_act_n;
wire [15:0] main_sdram_slave_p0_wrdata;
wire main_sdram_slave_p0_wrdata_en;
wire [1:0] main_sdram_slave_p0_wrdata_mask;
wire main_sdram_slave_p0_rddata_en;
reg  [15:0] main_sdram_slave_p0_rddata = 16'd0;
reg  main_sdram_slave_p0_rddata_valid = 1'd0;
reg  [12:0] main_sdram_master_p0_address = 13'd0;
reg  [1:0] main_sdram_master_p0_bank = 2'd0;
reg  main_sdram_master_p0_cas_n = 1'd1;
reg  main_sdram_master_p0_cs_n = 1'd1;
reg  main_sdram_master_p0_ras_n = 1'd1;
reg  main_sdram_master_p0_we_n = 1'd1;
reg  main_sdram_master_p0_cke = 1'd0;
reg  main_sdram_master_p0_odt = 1'd0;
reg  main_sdram_master_p0_reset_n = 1'd0;
reg  main_sdram_master_p0_act_n = 1'd1;
reg  [15:0] main_sdram_master_p0_wrdata = 16'd0;
reg  main_sdram_master_p0_wrdata_en = 1'd0;
reg  [1:0] main_sdram_master_p0_wrdata_mask = 2'd0;
reg  main_sdram_master_p0_rddata_en = 1'd0;
wire [15:0] main_sdram_master_p0_rddata;
wire main_sdram_master_p0_rddata_valid;
wire [12:0] main_sdram_csr_dfi_p0_address;
wire [1:0] main_sdram_csr_dfi_p0_bank;
reg  main_sdram_csr_dfi_p0_cas_n = 1'd1;
reg  main_sdram_csr_dfi_p0_cs_n = 1'd1;
reg  main_sdram_csr_dfi_p0_ras_n = 1'd1;
reg  main_sdram_csr_dfi_p0_we_n = 1'd1;
wire main_sdram_csr_dfi_p0_cke;
wire main_sdram_csr_dfi_p0_odt;
wire main_sdram_csr_dfi_p0_reset_n;
reg  main_sdram_csr_dfi_p0_act_n = 1'd1;
wire [15:0] main_sdram_csr_dfi_p0_wrdata;
wire main_sdram_csr_dfi_p0_wrdata_en;
wire [1:0] main_sdram_csr_dfi_p0_wrdata_mask;
wire main_sdram_csr_dfi_p0_rddata_en;
reg  [15:0] main_sdram_csr_dfi_p0_rddata = 16'd0;
reg  main_sdram_csr_dfi_p0_rddata_valid = 1'd0;
reg  [12:0] main_sdram_ext_dfi_p0_address = 13'd0;
reg  [1:0] main_sdram_ext_dfi_p0_bank = 2'd0;
reg  main_sdram_ext_dfi_p0_cas_n = 1'd1;
reg  main_sdram_ext_dfi_p0_cs_n = 1'd1;
reg  main_sdram_ext_dfi_p0_ras_n = 1'd1;
reg  main_sdram_ext_dfi_p0_we_n = 1'd1;
reg  main_sdram_ext_dfi_p0_cke = 1'd0;
reg  main_sdram_ext_dfi_p0_odt = 1'd0;
reg  main_sdram_ext_dfi_p0_reset_n = 1'd0;
reg  main_sdram_ext_dfi_p0_act_n = 1'd1;
reg  [15:0] main_sdram_ext_dfi_p0_wrdata = 16'd0;
reg  main_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg  [1:0] main_sdram_ext_dfi_p0_wrdata_mask = 2'd0;
reg  main_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg  [15:0] main_sdram_ext_dfi_p0_rddata = 16'd0;
reg  main_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg  main_sdram_ext_dfi_sel = 1'd0;
wire main_sdram_sel;
wire main_sdram_cke1;
wire main_sdram_odt;
wire main_sdram_reset_n;
reg  [3:0] main_sdram_storage = 4'd1;
reg  main_sdram_re = 1'd0;
wire main_sdram_csrfield_cs;
wire main_sdram_csrfield_we;
wire main_sdram_csrfield_cas;
wire main_sdram_csrfield_ras;
wire main_sdram_csrfield_wren;
wire main_sdram_csrfield_rden;
reg  [5:0] main_sdram_command_storage = 6'd0;
reg  main_sdram_command_re = 1'd0;
reg  main_sdram_command_issue_re = 1'd0;
wire main_sdram_command_issue_r;
reg  main_sdram_command_issue_we = 1'd0;
reg  main_sdram_command_issue_w = 1'd0;
reg  [12:0] main_sdram_address_storage = 13'd0;
reg  main_sdram_address_re = 1'd0;
reg  [1:0] main_sdram_baddress_storage = 2'd0;
reg  main_sdram_baddress_re = 1'd0;
reg  [15:0] main_sdram_wrdata_storage = 16'd0;
reg  main_sdram_wrdata_re = 1'd0;
reg  [15:0] main_sdram_rddata_status = 16'd0;
wire main_sdram_rddata_we;
reg  main_sdram_rddata_re = 1'd0;
wire main_sdram_interface_bank0_valid;
wire main_sdram_interface_bank0_ready;
wire main_sdram_interface_bank0_we;
wire [21:0] main_sdram_interface_bank0_addr;
wire main_sdram_interface_bank0_lock;
wire main_sdram_interface_bank0_wdata_ready;
wire main_sdram_interface_bank0_rdata_valid;
wire main_sdram_interface_bank1_valid;
wire main_sdram_interface_bank1_ready;
wire main_sdram_interface_bank1_we;
wire [21:0] main_sdram_interface_bank1_addr;
wire main_sdram_interface_bank1_lock;
wire main_sdram_interface_bank1_wdata_ready;
wire main_sdram_interface_bank1_rdata_valid;
wire main_sdram_interface_bank2_valid;
wire main_sdram_interface_bank2_ready;
wire main_sdram_interface_bank2_we;
wire [21:0] main_sdram_interface_bank2_addr;
wire main_sdram_interface_bank2_lock;
wire main_sdram_interface_bank2_wdata_ready;
wire main_sdram_interface_bank2_rdata_valid;
wire main_sdram_interface_bank3_valid;
wire main_sdram_interface_bank3_ready;
wire main_sdram_interface_bank3_we;
wire [21:0] main_sdram_interface_bank3_addr;
wire main_sdram_interface_bank3_lock;
wire main_sdram_interface_bank3_wdata_ready;
wire main_sdram_interface_bank3_rdata_valid;
reg  [15:0] main_sdram_interface_wdata = 16'd0;
reg  [1:0] main_sdram_interface_wdata_we = 2'd0;
wire [15:0] main_sdram_interface_rdata;
reg  [12:0] main_sdram_dfi_p0_address = 13'd0;
reg  [1:0] main_sdram_dfi_p0_bank = 2'd0;
reg  main_sdram_dfi_p0_cas_n = 1'd1;
reg  main_sdram_dfi_p0_cs_n = 1'd1;
reg  main_sdram_dfi_p0_ras_n = 1'd1;
reg  main_sdram_dfi_p0_we_n = 1'd1;
wire main_sdram_dfi_p0_cke;
wire main_sdram_dfi_p0_odt;
wire main_sdram_dfi_p0_reset_n;
reg  main_sdram_dfi_p0_act_n = 1'd1;
wire [15:0] main_sdram_dfi_p0_wrdata;
reg  main_sdram_dfi_p0_wrdata_en = 1'd0;
wire [1:0] main_sdram_dfi_p0_wrdata_mask;
reg  main_sdram_dfi_p0_rddata_en = 1'd0;
wire [15:0] main_sdram_dfi_p0_rddata;
wire main_sdram_dfi_p0_rddata_valid;
reg  main_sdram_cmd_valid = 1'd0;
reg  main_sdram_cmd_ready = 1'd0;
reg  main_sdram_cmd_last = 1'd0;
reg  [12:0] main_sdram_cmd_payload_a = 13'd0;
reg  [1:0] main_sdram_cmd_payload_ba = 2'd0;
reg  main_sdram_cmd_payload_cas = 1'd0;
reg  main_sdram_cmd_payload_ras = 1'd0;
reg  main_sdram_cmd_payload_we = 1'd0;
reg  main_sdram_cmd_payload_is_read = 1'd0;
reg  main_sdram_cmd_payload_is_write = 1'd0;
wire main_sdram_wants_refresh;
wire main_sdram_timer_wait;
wire main_sdram_timer_done0;
wire [8:0] main_sdram_timer_count0;
wire main_sdram_timer_done1;
reg  [8:0] main_sdram_timer_count1 = 9'd390;
wire main_sdram_postponer_req_i;
reg  main_sdram_postponer_req_o = 1'd0;
reg  main_sdram_postponer_count = 1'd0;
reg  main_sdram_sequencer_start0 = 1'd0;
wire main_sdram_sequencer_done0;
wire main_sdram_sequencer_start1;
reg  main_sdram_sequencer_done1 = 1'd0;
reg  [2:0] main_sdram_sequencer_counter = 3'd0;
reg  main_sdram_sequencer_count = 1'd0;
wire main_sdram_bankmachine0_req_valid;
wire main_sdram_bankmachine0_req_ready;
wire main_sdram_bankmachine0_req_we;
wire [21:0] main_sdram_bankmachine0_req_addr;
wire main_sdram_bankmachine0_req_lock;
reg  main_sdram_bankmachine0_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine0_refresh_req;
reg  main_sdram_bankmachine0_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine0_cmd_valid = 1'd0;
reg  main_sdram_bankmachine0_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine0_cmd_payload_ba;
reg  main_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine0_auto_precharge = 1'd0;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_sink_valid;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_sink_ready;
reg  main_sdram_bankmachine0_cmd_buffer_lookahead_sink_first = 1'd0;
reg  main_sdram_bankmachine0_cmd_buffer_lookahead_sink_last = 1'd0;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we;
wire [21:0] main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_source_valid;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_source_ready;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_source_first;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_source_last;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we;
wire [21:0] main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable;
wire [24:0] main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din;
wire [24:0] main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
reg  [3:0] main_sdram_bankmachine0_cmd_buffer_lookahead_level = 4'd0;
reg  main_sdram_bankmachine0_cmd_buffer_lookahead_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine0_cmd_buffer_lookahead_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine0_cmd_buffer_lookahead_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_r;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_we;
wire [24:0] main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_do_read;
wire [2:0] main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr;
wire [24:0] main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first;
wire main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last;
wire main_sdram_bankmachine0_cmd_buffer_sink_valid;
wire main_sdram_bankmachine0_cmd_buffer_sink_ready;
wire main_sdram_bankmachine0_cmd_buffer_sink_first;
wire main_sdram_bankmachine0_cmd_buffer_sink_last;
wire main_sdram_bankmachine0_cmd_buffer_sink_payload_we;
wire [21:0] main_sdram_bankmachine0_cmd_buffer_sink_payload_addr;
reg  main_sdram_bankmachine0_cmd_buffer_source_valid = 1'd0;
wire main_sdram_bankmachine0_cmd_buffer_source_ready;
reg  main_sdram_bankmachine0_cmd_buffer_source_first = 1'd0;
reg  main_sdram_bankmachine0_cmd_buffer_source_last = 1'd0;
reg  main_sdram_bankmachine0_cmd_buffer_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine0_cmd_buffer_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine0_row = 13'd0;
reg  main_sdram_bankmachine0_row_opened = 1'd0;
wire main_sdram_bankmachine0_row_hit;
reg  main_sdram_bankmachine0_row_open = 1'd0;
reg  main_sdram_bankmachine0_row_close = 1'd0;
reg  main_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine0_twtpcon_valid;
reg  main_sdram_bankmachine0_twtpcon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine0_twtpcon_count = 2'd0;
wire main_sdram_bankmachine0_trccon_valid;
reg  main_sdram_bankmachine0_trccon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine0_trccon_count = 2'd0;
wire main_sdram_bankmachine0_trascon_valid;
reg  main_sdram_bankmachine0_trascon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine0_trascon_count = 2'd0;
wire main_sdram_bankmachine1_req_valid;
wire main_sdram_bankmachine1_req_ready;
wire main_sdram_bankmachine1_req_we;
wire [21:0] main_sdram_bankmachine1_req_addr;
wire main_sdram_bankmachine1_req_lock;
reg  main_sdram_bankmachine1_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine1_refresh_req;
reg  main_sdram_bankmachine1_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine1_cmd_valid = 1'd0;
reg  main_sdram_bankmachine1_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine1_cmd_payload_ba;
reg  main_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine1_auto_precharge = 1'd0;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_sink_valid;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_sink_ready;
reg  main_sdram_bankmachine1_cmd_buffer_lookahead_sink_first = 1'd0;
reg  main_sdram_bankmachine1_cmd_buffer_lookahead_sink_last = 1'd0;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we;
wire [21:0] main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_source_valid;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_source_ready;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_source_first;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_source_last;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we;
wire [21:0] main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable;
wire [24:0] main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din;
wire [24:0] main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
reg  [3:0] main_sdram_bankmachine1_cmd_buffer_lookahead_level = 4'd0;
reg  main_sdram_bankmachine1_cmd_buffer_lookahead_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine1_cmd_buffer_lookahead_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine1_cmd_buffer_lookahead_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_r;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_we;
wire [24:0] main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_do_read;
wire [2:0] main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr;
wire [24:0] main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first;
wire main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last;
wire main_sdram_bankmachine1_cmd_buffer_sink_valid;
wire main_sdram_bankmachine1_cmd_buffer_sink_ready;
wire main_sdram_bankmachine1_cmd_buffer_sink_first;
wire main_sdram_bankmachine1_cmd_buffer_sink_last;
wire main_sdram_bankmachine1_cmd_buffer_sink_payload_we;
wire [21:0] main_sdram_bankmachine1_cmd_buffer_sink_payload_addr;
reg  main_sdram_bankmachine1_cmd_buffer_source_valid = 1'd0;
wire main_sdram_bankmachine1_cmd_buffer_source_ready;
reg  main_sdram_bankmachine1_cmd_buffer_source_first = 1'd0;
reg  main_sdram_bankmachine1_cmd_buffer_source_last = 1'd0;
reg  main_sdram_bankmachine1_cmd_buffer_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine1_cmd_buffer_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine1_row = 13'd0;
reg  main_sdram_bankmachine1_row_opened = 1'd0;
wire main_sdram_bankmachine1_row_hit;
reg  main_sdram_bankmachine1_row_open = 1'd0;
reg  main_sdram_bankmachine1_row_close = 1'd0;
reg  main_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine1_twtpcon_valid;
reg  main_sdram_bankmachine1_twtpcon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine1_twtpcon_count = 2'd0;
wire main_sdram_bankmachine1_trccon_valid;
reg  main_sdram_bankmachine1_trccon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine1_trccon_count = 2'd0;
wire main_sdram_bankmachine1_trascon_valid;
reg  main_sdram_bankmachine1_trascon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine1_trascon_count = 2'd0;
wire main_sdram_bankmachine2_req_valid;
wire main_sdram_bankmachine2_req_ready;
wire main_sdram_bankmachine2_req_we;
wire [21:0] main_sdram_bankmachine2_req_addr;
wire main_sdram_bankmachine2_req_lock;
reg  main_sdram_bankmachine2_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine2_refresh_req;
reg  main_sdram_bankmachine2_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine2_cmd_valid = 1'd0;
reg  main_sdram_bankmachine2_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine2_cmd_payload_ba;
reg  main_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine2_auto_precharge = 1'd0;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_sink_valid;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_sink_ready;
reg  main_sdram_bankmachine2_cmd_buffer_lookahead_sink_first = 1'd0;
reg  main_sdram_bankmachine2_cmd_buffer_lookahead_sink_last = 1'd0;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we;
wire [21:0] main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_source_valid;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_source_ready;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_source_first;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_source_last;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we;
wire [21:0] main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable;
wire [24:0] main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din;
wire [24:0] main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
reg  [3:0] main_sdram_bankmachine2_cmd_buffer_lookahead_level = 4'd0;
reg  main_sdram_bankmachine2_cmd_buffer_lookahead_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine2_cmd_buffer_lookahead_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine2_cmd_buffer_lookahead_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_r;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_we;
wire [24:0] main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_do_read;
wire [2:0] main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr;
wire [24:0] main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first;
wire main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last;
wire main_sdram_bankmachine2_cmd_buffer_sink_valid;
wire main_sdram_bankmachine2_cmd_buffer_sink_ready;
wire main_sdram_bankmachine2_cmd_buffer_sink_first;
wire main_sdram_bankmachine2_cmd_buffer_sink_last;
wire main_sdram_bankmachine2_cmd_buffer_sink_payload_we;
wire [21:0] main_sdram_bankmachine2_cmd_buffer_sink_payload_addr;
reg  main_sdram_bankmachine2_cmd_buffer_source_valid = 1'd0;
wire main_sdram_bankmachine2_cmd_buffer_source_ready;
reg  main_sdram_bankmachine2_cmd_buffer_source_first = 1'd0;
reg  main_sdram_bankmachine2_cmd_buffer_source_last = 1'd0;
reg  main_sdram_bankmachine2_cmd_buffer_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine2_cmd_buffer_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine2_row = 13'd0;
reg  main_sdram_bankmachine2_row_opened = 1'd0;
wire main_sdram_bankmachine2_row_hit;
reg  main_sdram_bankmachine2_row_open = 1'd0;
reg  main_sdram_bankmachine2_row_close = 1'd0;
reg  main_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine2_twtpcon_valid;
reg  main_sdram_bankmachine2_twtpcon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine2_twtpcon_count = 2'd0;
wire main_sdram_bankmachine2_trccon_valid;
reg  main_sdram_bankmachine2_trccon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine2_trccon_count = 2'd0;
wire main_sdram_bankmachine2_trascon_valid;
reg  main_sdram_bankmachine2_trascon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine2_trascon_count = 2'd0;
wire main_sdram_bankmachine3_req_valid;
wire main_sdram_bankmachine3_req_ready;
wire main_sdram_bankmachine3_req_we;
wire [21:0] main_sdram_bankmachine3_req_addr;
wire main_sdram_bankmachine3_req_lock;
reg  main_sdram_bankmachine3_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine3_refresh_req;
reg  main_sdram_bankmachine3_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine3_cmd_valid = 1'd0;
reg  main_sdram_bankmachine3_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine3_cmd_payload_ba;
reg  main_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine3_auto_precharge = 1'd0;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_sink_valid;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_sink_ready;
reg  main_sdram_bankmachine3_cmd_buffer_lookahead_sink_first = 1'd0;
reg  main_sdram_bankmachine3_cmd_buffer_lookahead_sink_last = 1'd0;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we;
wire [21:0] main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_source_valid;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_source_ready;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_source_first;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_source_last;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we;
wire [21:0] main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable;
wire [24:0] main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din;
wire [24:0] main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
reg  [3:0] main_sdram_bankmachine3_cmd_buffer_lookahead_level = 4'd0;
reg  main_sdram_bankmachine3_cmd_buffer_lookahead_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine3_cmd_buffer_lookahead_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine3_cmd_buffer_lookahead_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_r;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_we;
wire [24:0] main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_do_read;
wire [2:0] main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr;
wire [24:0] main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first;
wire main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last;
wire main_sdram_bankmachine3_cmd_buffer_sink_valid;
wire main_sdram_bankmachine3_cmd_buffer_sink_ready;
wire main_sdram_bankmachine3_cmd_buffer_sink_first;
wire main_sdram_bankmachine3_cmd_buffer_sink_last;
wire main_sdram_bankmachine3_cmd_buffer_sink_payload_we;
wire [21:0] main_sdram_bankmachine3_cmd_buffer_sink_payload_addr;
reg  main_sdram_bankmachine3_cmd_buffer_source_valid = 1'd0;
wire main_sdram_bankmachine3_cmd_buffer_source_ready;
reg  main_sdram_bankmachine3_cmd_buffer_source_first = 1'd0;
reg  main_sdram_bankmachine3_cmd_buffer_source_last = 1'd0;
reg  main_sdram_bankmachine3_cmd_buffer_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine3_cmd_buffer_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine3_row = 13'd0;
reg  main_sdram_bankmachine3_row_opened = 1'd0;
wire main_sdram_bankmachine3_row_hit;
reg  main_sdram_bankmachine3_row_open = 1'd0;
reg  main_sdram_bankmachine3_row_close = 1'd0;
reg  main_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine3_twtpcon_valid;
reg  main_sdram_bankmachine3_twtpcon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine3_twtpcon_count = 2'd0;
wire main_sdram_bankmachine3_trccon_valid;
reg  main_sdram_bankmachine3_trccon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine3_trccon_count = 2'd0;
wire main_sdram_bankmachine3_trascon_valid;
reg  main_sdram_bankmachine3_trascon_ready = 1'd0;
reg  [1:0] main_sdram_bankmachine3_trascon_count = 2'd0;
wire main_sdram_ras_allowed;
wire main_sdram_cas_allowed;
reg  main_sdram_choose_cmd_want_reads = 1'd0;
reg  main_sdram_choose_cmd_want_writes = 1'd0;
reg  main_sdram_choose_cmd_want_cmds = 1'd0;
reg  main_sdram_choose_cmd_want_activates = 1'd0;
wire main_sdram_choose_cmd_cmd_valid;
reg  main_sdram_choose_cmd_cmd_ready = 1'd0;
wire [12:0] main_sdram_choose_cmd_cmd_payload_a;
wire [1:0] main_sdram_choose_cmd_cmd_payload_ba;
reg  main_sdram_choose_cmd_cmd_payload_cas = 1'd0;
reg  main_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg  main_sdram_choose_cmd_cmd_payload_we = 1'd0;
wire main_sdram_choose_cmd_cmd_payload_is_cmd;
wire main_sdram_choose_cmd_cmd_payload_is_read;
wire main_sdram_choose_cmd_cmd_payload_is_write;
reg  [3:0] main_sdram_choose_cmd_valids = 4'd0;
wire [3:0] main_sdram_choose_cmd_request;
reg  [1:0] main_sdram_choose_cmd_grant = 2'd0;
wire main_sdram_choose_cmd_ce;
reg  main_sdram_choose_req_want_reads = 1'd0;
reg  main_sdram_choose_req_want_writes = 1'd0;
wire main_sdram_choose_req_want_cmds;
reg  main_sdram_choose_req_want_activates = 1'd0;
wire main_sdram_choose_req_cmd_valid;
reg  main_sdram_choose_req_cmd_ready = 1'd0;
wire [12:0] main_sdram_choose_req_cmd_payload_a;
wire [1:0] main_sdram_choose_req_cmd_payload_ba;
reg  main_sdram_choose_req_cmd_payload_cas = 1'd0;
reg  main_sdram_choose_req_cmd_payload_ras = 1'd0;
reg  main_sdram_choose_req_cmd_payload_we = 1'd0;
wire main_sdram_choose_req_cmd_payload_is_cmd;
wire main_sdram_choose_req_cmd_payload_is_read;
wire main_sdram_choose_req_cmd_payload_is_write;
reg  [3:0] main_sdram_choose_req_valids = 4'd0;
wire [3:0] main_sdram_choose_req_request;
reg  [1:0] main_sdram_choose_req_grant = 2'd0;
wire main_sdram_choose_req_ce;
reg  [12:0] main_sdram_nop_a = 13'd0;
reg  [1:0] main_sdram_nop_ba = 2'd0;
reg  [1:0] main_sdram_steerer_sel = 2'd0;
reg  main_sdram_steerer0 = 1'd1;
reg  main_sdram_steerer1 = 1'd1;
wire main_sdram_trrdcon_valid;
reg  main_sdram_trrdcon_ready = 1'd0;
reg  main_sdram_trrdcon_count = 1'd0;
wire main_sdram_tfawcon_valid;
reg  main_sdram_tfawcon_ready = 1'd1;
wire main_sdram_tccdcon_valid;
reg  main_sdram_tccdcon_ready = 1'd0;
reg  main_sdram_tccdcon_count = 1'd0;
wire main_sdram_twtrcon_valid;
reg  main_sdram_twtrcon_ready = 1'd0;
reg  [2:0] main_sdram_twtrcon_count = 3'd0;
wire main_sdram_read_available;
wire main_sdram_write_available;
reg  main_sdram_en0 = 1'd0;
wire main_sdram_max_time0;
reg  [4:0] main_sdram_time0 = 5'd0;
reg  main_sdram_en1 = 1'd0;
wire main_sdram_max_time1;
reg  [3:0] main_sdram_time1 = 4'd0;
wire main_sdram_go_to_refresh;
reg  main_port_cmd_valid = 1'd0;
wire main_port_cmd_ready;
reg  main_port_cmd_payload_we = 1'd0;
reg  [23:0] main_port_cmd_payload_addr = 24'd0;
wire main_port_wdata_valid;
wire main_port_wdata_ready;
wire main_port_wdata_first;
wire main_port_wdata_last;
wire [15:0] main_port_wdata_payload_data;
wire [1:0] main_port_wdata_payload_we;
wire main_port_rdata_valid;
wire main_port_rdata_ready;
reg  main_port_rdata_first = 1'd0;
reg  main_port_rdata_last = 1'd0;
wire [15:0] main_port_rdata_payload_data;
wire [29:0] main_wb_sdram_adr;
wire [31:0] main_wb_sdram_dat_w;
reg  [31:0] main_wb_sdram_dat_r = 32'd0;
wire [3:0] main_wb_sdram_sel;
wire main_wb_sdram_cyc;
wire main_wb_sdram_stb;
reg  main_wb_sdram_ack = 1'd0;
wire main_wb_sdram_we;
wire [2:0] main_wb_sdram_cti;
wire [1:0] main_wb_sdram_bte;
reg  main_wb_sdram_err = 1'd0;
wire [29:0] main_interface_adr;
wire [127:0] main_interface_dat_w;
reg  [127:0] main_interface_dat_r = 128'd0;
wire [15:0] main_interface_sel;
reg  main_interface_cyc = 1'd0;
reg  main_interface_stb = 1'd0;
reg  main_interface_ack = 1'd0;
reg  main_interface_we = 1'd0;
wire [6:0] main_data_port_adr;
wire [127:0] main_data_port_dat_r;
reg  [15:0] main_data_port_we = 16'd0;
reg  [127:0] main_data_port_dat_w = 128'd0;
reg  main_write_from_slave = 1'd0;
reg  [1:0] main_adr_offset_r = 2'd0;
wire [6:0] main_tag_port_adr;
wire [25:0] main_tag_port_dat_r;
reg  main_tag_port_we = 1'd0;
wire [25:0] main_tag_port_dat_w;
wire [24:0] main_tag_do_tag;
wire main_tag_do_dirty;
wire [24:0] main_tag_di_tag;
reg  main_tag_di_dirty = 1'd0;
reg  main_word_clr = 1'd0;
reg  main_word_inc = 1'd0;
wire main_wishbone_bridge_flush;
reg  main_wishbone_bridge_cmd_valid = 1'd0;
reg  main_wishbone_bridge_cmd_ready = 1'd0;
wire main_wishbone_bridge_cmd_last;
wire main_wishbone_bridge_cmd_payload_we;
wire [20:0] main_wishbone_bridge_cmd_payload_addr;
reg  main_wishbone_bridge_wdata_valid = 1'd0;
wire main_wishbone_bridge_wdata_ready;
reg  main_wishbone_bridge_wdata_first = 1'd0;
reg  main_wishbone_bridge_wdata_last = 1'd0;
wire [127:0] main_wishbone_bridge_wdata_payload_data;
wire [15:0] main_wishbone_bridge_wdata_payload_we;
wire main_wishbone_bridge_rdata_valid;
wire main_wishbone_bridge_rdata_ready;
wire main_wishbone_bridge_rdata_first;
wire main_wishbone_bridge_rdata_last;
wire [127:0] main_wishbone_bridge_rdata_payload_data;
reg  [2:0] main_wishbone_bridge_count = 3'd0;
wire main_wishbone_bridge_wdata_converter_sink_valid;
wire main_wishbone_bridge_wdata_converter_sink_ready;
wire main_wishbone_bridge_wdata_converter_sink_first;
wire main_wishbone_bridge_wdata_converter_sink_last;
wire [127:0] main_wishbone_bridge_wdata_converter_sink_payload_data;
wire [15:0] main_wishbone_bridge_wdata_converter_sink_payload_we;
wire main_wishbone_bridge_wdata_converter_source_valid;
wire main_wishbone_bridge_wdata_converter_source_ready;
wire main_wishbone_bridge_wdata_converter_source_first;
wire main_wishbone_bridge_wdata_converter_source_last;
wire [15:0] main_wishbone_bridge_wdata_converter_source_payload_data;
wire [1:0] main_wishbone_bridge_wdata_converter_source_payload_we;
wire main_wishbone_bridge_wdata_converter_converter_sink_valid;
wire main_wishbone_bridge_wdata_converter_converter_sink_ready;
wire main_wishbone_bridge_wdata_converter_converter_sink_first;
wire main_wishbone_bridge_wdata_converter_converter_sink_last;
reg  [143:0] main_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire main_wishbone_bridge_wdata_converter_converter_source_valid;
wire main_wishbone_bridge_wdata_converter_converter_source_ready;
wire main_wishbone_bridge_wdata_converter_converter_source_first;
wire main_wishbone_bridge_wdata_converter_converter_source_last;
reg  [17:0] main_wishbone_bridge_wdata_converter_converter_source_payload_data = 18'd0;
wire main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
reg  [2:0] main_wishbone_bridge_wdata_converter_converter_mux = 3'd0;
wire main_wishbone_bridge_wdata_converter_converter_first;
wire main_wishbone_bridge_wdata_converter_converter_last;
wire main_wishbone_bridge_wdata_converter_source_source_valid;
wire main_wishbone_bridge_wdata_converter_source_source_ready;
wire main_wishbone_bridge_wdata_converter_source_source_first;
wire main_wishbone_bridge_wdata_converter_source_source_last;
wire [17:0] main_wishbone_bridge_wdata_converter_source_source_payload_data;
wire main_wishbone_bridge_rdata_converter_sink_valid;
wire main_wishbone_bridge_rdata_converter_sink_ready;
wire main_wishbone_bridge_rdata_converter_sink_first;
wire main_wishbone_bridge_rdata_converter_sink_last;
wire [15:0] main_wishbone_bridge_rdata_converter_sink_payload_data;
wire main_wishbone_bridge_rdata_converter_source_valid;
wire main_wishbone_bridge_rdata_converter_source_ready;
wire main_wishbone_bridge_rdata_converter_source_first;
wire main_wishbone_bridge_rdata_converter_source_last;
reg  [127:0] main_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire main_wishbone_bridge_rdata_converter_converter_sink_valid;
wire main_wishbone_bridge_rdata_converter_converter_sink_ready;
wire main_wishbone_bridge_rdata_converter_converter_sink_first;
wire main_wishbone_bridge_rdata_converter_converter_sink_last;
wire [15:0] main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire main_wishbone_bridge_rdata_converter_converter_source_valid;
wire main_wishbone_bridge_rdata_converter_converter_source_ready;
reg  main_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg  main_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg  [127:0] main_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg  [3:0] main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 4'd0;
reg  [2:0] main_wishbone_bridge_rdata_converter_converter_demux = 3'd0;
wire main_wishbone_bridge_rdata_converter_converter_load_part;
reg  main_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire main_wishbone_bridge_rdata_converter_source_source_valid;
wire main_wishbone_bridge_rdata_converter_source_source_ready;
wire main_wishbone_bridge_rdata_converter_source_source_first;
wire main_wishbone_bridge_rdata_converter_source_source_last;
wire [127:0] main_wishbone_bridge_rdata_converter_source_source_payload_data;
reg  main_wishbone_bridge_aborted = 1'd0;
reg  main_wishbone_bridge_is_ongoing = 1'd0;
wire main_sink_valid;
wire main_sink_ready;
wire main_sink_first;
wire main_sink_last;
wire main_sink_payload_hsync;
wire main_sink_payload_vsync;
wire main_sink_payload_de;
wire [7:0] main_sink_payload_r;
wire [7:0] main_sink_payload_g;
wire [7:0] main_sink_payload_b;
wire [7:0] main_tmdsencoder0_d0;
wire [1:0] main_tmdsencoder0_c;
wire main_tmdsencoder0_de;
reg  [9:0] main_tmdsencoder0_out = 10'd0;
reg  [7:0] main_tmdsencoder0_d1 = 8'd0;
reg  [3:0] main_tmdsencoder0_n1d = 4'd0;
reg  [8:0] main_tmdsencoder0_q_m = 9'd0;
wire main_tmdsencoder0_q_m8_n;
reg  [8:0] main_tmdsencoder0_q_m_r = 9'd0;
reg  [3:0] main_tmdsencoder0_n0q_m = 4'd0;
reg  [3:0] main_tmdsencoder0_n1q_m = 4'd0;
reg  signed [5:0] main_tmdsencoder0_cnt = 6'd0;
reg  [1:0] main_tmdsencoder0_new_c0 = 2'd0;
reg  main_tmdsencoder0_new_de0 = 1'd0;
reg  [1:0] main_tmdsencoder0_new_c1 = 2'd0;
reg  main_tmdsencoder0_new_de1 = 1'd0;
reg  [1:0] main_tmdsencoder0_new_c2 = 2'd0;
reg  main_tmdsencoder0_new_de2 = 1'd0;
wire main_videohdmi10to1serializer0_sink_sink_valid;
wire main_videohdmi10to1serializer0_sink_sink_ready;
reg  main_videohdmi10to1serializer0_sink_sink_first = 1'd0;
reg  main_videohdmi10to1serializer0_sink_sink_last = 1'd0;
wire [9:0] main_videohdmi10to1serializer0_sink_sink_payload_data;
wire main_videohdmi10to1serializer0_source_source_valid;
wire main_videohdmi10to1serializer0_source_source_ready;
wire main_videohdmi10to1serializer0_source_source_first;
wire main_videohdmi10to1serializer0_source_source_last;
wire [9:0] main_videohdmi10to1serializer0_source_source_payload_data;
wire main_videohdmi10to1serializer0_cdc_sink_valid;
wire main_videohdmi10to1serializer0_cdc_sink_ready;
wire main_videohdmi10to1serializer0_cdc_sink_first;
wire main_videohdmi10to1serializer0_cdc_sink_last;
wire [9:0] main_videohdmi10to1serializer0_cdc_sink_payload_data;
wire main_videohdmi10to1serializer0_cdc_source_valid;
wire main_videohdmi10to1serializer0_cdc_source_ready;
wire main_videohdmi10to1serializer0_cdc_source_first;
wire main_videohdmi10to1serializer0_cdc_source_last;
wire [9:0] main_videohdmi10to1serializer0_cdc_source_payload_data;
wire main_videohdmi10to1serializer0_cdc_asyncfifo0_we;
wire main_videohdmi10to1serializer0_cdc_asyncfifo0_writable;
wire main_videohdmi10to1serializer0_cdc_asyncfifo0_re;
wire main_videohdmi10to1serializer0_cdc_asyncfifo0_readable;
wire [11:0] main_videohdmi10to1serializer0_cdc_asyncfifo0_din;
wire [11:0] main_videohdmi10to1serializer0_cdc_asyncfifo0_dout;
wire main_videohdmi10to1serializer0_cdc_graycounter0_ce;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter0_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer0_cdc_graycounter0_q_next;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary = 3'd0;
wire main_videohdmi10to1serializer0_cdc_graycounter1_ce;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter1_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer0_cdc_graycounter1_q_next;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] main_videohdmi10to1serializer0_cdc_produce_rdomain;
wire [2:0] main_videohdmi10to1serializer0_cdc_consume_wdomain;
wire [1:0] main_videohdmi10to1serializer0_cdc_wrport_adr;
wire [11:0] main_videohdmi10to1serializer0_cdc_wrport_dat_r;
wire main_videohdmi10to1serializer0_cdc_wrport_we;
wire [11:0] main_videohdmi10to1serializer0_cdc_wrport_dat_w;
wire [1:0] main_videohdmi10to1serializer0_cdc_rdport_adr;
wire [11:0] main_videohdmi10to1serializer0_cdc_rdport_dat_r;
wire [9:0] main_videohdmi10to1serializer0_cdc_fifo_in_payload_data;
wire main_videohdmi10to1serializer0_cdc_fifo_in_first;
wire main_videohdmi10to1serializer0_cdc_fifo_in_last;
wire [9:0] main_videohdmi10to1serializer0_cdc_fifo_out_payload_data;
wire main_videohdmi10to1serializer0_cdc_fifo_out_first;
wire main_videohdmi10to1serializer0_cdc_fifo_out_last;
wire main_videohdmi10to1serializer0_sink_valid;
wire main_videohdmi10to1serializer0_sink_ready;
wire main_videohdmi10to1serializer0_sink_first;
wire main_videohdmi10to1serializer0_sink_last;
wire [9:0] main_videohdmi10to1serializer0_sink_payload_data;
wire main_videohdmi10to1serializer0_source_valid;
wire main_videohdmi10to1serializer0_source_ready;
wire [1:0] main_videohdmi10to1serializer0_source_payload_data;
reg  [4:0] main_videohdmi10to1serializer0_level = 5'd0;
wire main_videohdmi10to1serializer0_i_inc;
reg  main_videohdmi10to1serializer0_i_count = 1'd0;
wire main_videohdmi10to1serializer0_o_inc;
reg  [3:0] main_videohdmi10to1serializer0_o_count = 4'd0;
reg  [19:0] main_videohdmi10to1serializer0_shift_register = 20'd0;
wire [9:0] main_videohdmi10to1serializer0_i_data;
reg  [1:0] main_videohdmi10to1serializer0_o_data = 2'd0;
wire [7:0] main_tmdsencoder1_d0;
wire [1:0] main_tmdsencoder1_c;
wire main_tmdsencoder1_de;
reg  [9:0] main_tmdsencoder1_out = 10'd0;
reg  [7:0] main_tmdsencoder1_d1 = 8'd0;
reg  [3:0] main_tmdsencoder1_n1d = 4'd0;
reg  [8:0] main_tmdsencoder1_q_m = 9'd0;
wire main_tmdsencoder1_q_m8_n;
reg  [8:0] main_tmdsencoder1_q_m_r = 9'd0;
reg  [3:0] main_tmdsencoder1_n0q_m = 4'd0;
reg  [3:0] main_tmdsencoder1_n1q_m = 4'd0;
reg  signed [5:0] main_tmdsencoder1_cnt = 6'd0;
reg  [1:0] main_tmdsencoder1_new_c0 = 2'd0;
reg  main_tmdsencoder1_new_de0 = 1'd0;
reg  [1:0] main_tmdsencoder1_new_c1 = 2'd0;
reg  main_tmdsencoder1_new_de1 = 1'd0;
reg  [1:0] main_tmdsencoder1_new_c2 = 2'd0;
reg  main_tmdsencoder1_new_de2 = 1'd0;
wire main_videohdmi10to1serializer1_sink_sink_valid;
wire main_videohdmi10to1serializer1_sink_sink_ready;
reg  main_videohdmi10to1serializer1_sink_sink_first = 1'd0;
reg  main_videohdmi10to1serializer1_sink_sink_last = 1'd0;
wire [9:0] main_videohdmi10to1serializer1_sink_sink_payload_data;
wire main_videohdmi10to1serializer1_source_source_valid;
wire main_videohdmi10to1serializer1_source_source_ready;
wire main_videohdmi10to1serializer1_source_source_first;
wire main_videohdmi10to1serializer1_source_source_last;
wire [9:0] main_videohdmi10to1serializer1_source_source_payload_data;
wire main_videohdmi10to1serializer1_cdc_sink_valid;
wire main_videohdmi10to1serializer1_cdc_sink_ready;
wire main_videohdmi10to1serializer1_cdc_sink_first;
wire main_videohdmi10to1serializer1_cdc_sink_last;
wire [9:0] main_videohdmi10to1serializer1_cdc_sink_payload_data;
wire main_videohdmi10to1serializer1_cdc_source_valid;
wire main_videohdmi10to1serializer1_cdc_source_ready;
wire main_videohdmi10to1serializer1_cdc_source_first;
wire main_videohdmi10to1serializer1_cdc_source_last;
wire [9:0] main_videohdmi10to1serializer1_cdc_source_payload_data;
wire main_videohdmi10to1serializer1_cdc_asyncfifo1_we;
wire main_videohdmi10to1serializer1_cdc_asyncfifo1_writable;
wire main_videohdmi10to1serializer1_cdc_asyncfifo1_re;
wire main_videohdmi10to1serializer1_cdc_asyncfifo1_readable;
wire [11:0] main_videohdmi10to1serializer1_cdc_asyncfifo1_din;
wire [11:0] main_videohdmi10to1serializer1_cdc_asyncfifo1_dout;
wire main_videohdmi10to1serializer1_cdc_graycounter2_ce;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter2_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer1_cdc_graycounter2_q_next;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter2_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary = 3'd0;
wire main_videohdmi10to1serializer1_cdc_graycounter3_ce;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter3_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer1_cdc_graycounter3_q_next;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter3_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary = 3'd0;
wire [2:0] main_videohdmi10to1serializer1_cdc_produce_rdomain;
wire [2:0] main_videohdmi10to1serializer1_cdc_consume_wdomain;
wire [1:0] main_videohdmi10to1serializer1_cdc_wrport_adr;
wire [11:0] main_videohdmi10to1serializer1_cdc_wrport_dat_r;
wire main_videohdmi10to1serializer1_cdc_wrport_we;
wire [11:0] main_videohdmi10to1serializer1_cdc_wrport_dat_w;
wire [1:0] main_videohdmi10to1serializer1_cdc_rdport_adr;
wire [11:0] main_videohdmi10to1serializer1_cdc_rdport_dat_r;
wire [9:0] main_videohdmi10to1serializer1_cdc_fifo_in_payload_data;
wire main_videohdmi10to1serializer1_cdc_fifo_in_first;
wire main_videohdmi10to1serializer1_cdc_fifo_in_last;
wire [9:0] main_videohdmi10to1serializer1_cdc_fifo_out_payload_data;
wire main_videohdmi10to1serializer1_cdc_fifo_out_first;
wire main_videohdmi10to1serializer1_cdc_fifo_out_last;
wire main_videohdmi10to1serializer1_sink_valid;
wire main_videohdmi10to1serializer1_sink_ready;
wire main_videohdmi10to1serializer1_sink_first;
wire main_videohdmi10to1serializer1_sink_last;
wire [9:0] main_videohdmi10to1serializer1_sink_payload_data;
wire main_videohdmi10to1serializer1_source_valid;
wire main_videohdmi10to1serializer1_source_ready;
wire [1:0] main_videohdmi10to1serializer1_source_payload_data;
reg  [4:0] main_videohdmi10to1serializer1_level = 5'd0;
wire main_videohdmi10to1serializer1_i_inc;
reg  main_videohdmi10to1serializer1_i_count = 1'd0;
wire main_videohdmi10to1serializer1_o_inc;
reg  [3:0] main_videohdmi10to1serializer1_o_count = 4'd0;
reg  [19:0] main_videohdmi10to1serializer1_shift_register = 20'd0;
wire [9:0] main_videohdmi10to1serializer1_i_data;
reg  [1:0] main_videohdmi10to1serializer1_o_data = 2'd0;
wire [7:0] main_tmdsencoder2_d0;
wire [1:0] main_tmdsencoder2_c;
wire main_tmdsencoder2_de;
reg  [9:0] main_tmdsencoder2_out = 10'd0;
reg  [7:0] main_tmdsencoder2_d1 = 8'd0;
reg  [3:0] main_tmdsencoder2_n1d = 4'd0;
reg  [8:0] main_tmdsencoder2_q_m = 9'd0;
wire main_tmdsencoder2_q_m8_n;
reg  [8:0] main_tmdsencoder2_q_m_r = 9'd0;
reg  [3:0] main_tmdsencoder2_n0q_m = 4'd0;
reg  [3:0] main_tmdsencoder2_n1q_m = 4'd0;
reg  signed [5:0] main_tmdsencoder2_cnt = 6'd0;
reg  [1:0] main_tmdsencoder2_new_c0 = 2'd0;
reg  main_tmdsencoder2_new_de0 = 1'd0;
reg  [1:0] main_tmdsencoder2_new_c1 = 2'd0;
reg  main_tmdsencoder2_new_de1 = 1'd0;
reg  [1:0] main_tmdsencoder2_new_c2 = 2'd0;
reg  main_tmdsencoder2_new_de2 = 1'd0;
wire main_videohdmi10to1serializer2_sink_sink_valid;
wire main_videohdmi10to1serializer2_sink_sink_ready;
reg  main_videohdmi10to1serializer2_sink_sink_first = 1'd0;
reg  main_videohdmi10to1serializer2_sink_sink_last = 1'd0;
wire [9:0] main_videohdmi10to1serializer2_sink_sink_payload_data;
wire main_videohdmi10to1serializer2_source_source_valid;
wire main_videohdmi10to1serializer2_source_source_ready;
wire main_videohdmi10to1serializer2_source_source_first;
wire main_videohdmi10to1serializer2_source_source_last;
wire [9:0] main_videohdmi10to1serializer2_source_source_payload_data;
wire main_videohdmi10to1serializer2_cdc_sink_valid;
wire main_videohdmi10to1serializer2_cdc_sink_ready;
wire main_videohdmi10to1serializer2_cdc_sink_first;
wire main_videohdmi10to1serializer2_cdc_sink_last;
wire [9:0] main_videohdmi10to1serializer2_cdc_sink_payload_data;
wire main_videohdmi10to1serializer2_cdc_source_valid;
wire main_videohdmi10to1serializer2_cdc_source_ready;
wire main_videohdmi10to1serializer2_cdc_source_first;
wire main_videohdmi10to1serializer2_cdc_source_last;
wire [9:0] main_videohdmi10to1serializer2_cdc_source_payload_data;
wire main_videohdmi10to1serializer2_cdc_asyncfifo2_we;
wire main_videohdmi10to1serializer2_cdc_asyncfifo2_writable;
wire main_videohdmi10to1serializer2_cdc_asyncfifo2_re;
wire main_videohdmi10to1serializer2_cdc_asyncfifo2_readable;
wire [11:0] main_videohdmi10to1serializer2_cdc_asyncfifo2_din;
wire [11:0] main_videohdmi10to1serializer2_cdc_asyncfifo2_dout;
wire main_videohdmi10to1serializer2_cdc_graycounter4_ce;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter4_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer2_cdc_graycounter4_q_next;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter4_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary = 3'd0;
wire main_videohdmi10to1serializer2_cdc_graycounter5_ce;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter5_q = 3'd0;
wire [2:0] main_videohdmi10to1serializer2_cdc_graycounter5_q_next;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter5_q_binary = 3'd0;
reg  [2:0] main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary = 3'd0;
wire [2:0] main_videohdmi10to1serializer2_cdc_produce_rdomain;
wire [2:0] main_videohdmi10to1serializer2_cdc_consume_wdomain;
wire [1:0] main_videohdmi10to1serializer2_cdc_wrport_adr;
wire [11:0] main_videohdmi10to1serializer2_cdc_wrport_dat_r;
wire main_videohdmi10to1serializer2_cdc_wrport_we;
wire [11:0] main_videohdmi10to1serializer2_cdc_wrport_dat_w;
wire [1:0] main_videohdmi10to1serializer2_cdc_rdport_adr;
wire [11:0] main_videohdmi10to1serializer2_cdc_rdport_dat_r;
wire [9:0] main_videohdmi10to1serializer2_cdc_fifo_in_payload_data;
wire main_videohdmi10to1serializer2_cdc_fifo_in_first;
wire main_videohdmi10to1serializer2_cdc_fifo_in_last;
wire [9:0] main_videohdmi10to1serializer2_cdc_fifo_out_payload_data;
wire main_videohdmi10to1serializer2_cdc_fifo_out_first;
wire main_videohdmi10to1serializer2_cdc_fifo_out_last;
wire main_videohdmi10to1serializer2_sink_valid;
wire main_videohdmi10to1serializer2_sink_ready;
wire main_videohdmi10to1serializer2_sink_first;
wire main_videohdmi10to1serializer2_sink_last;
wire [9:0] main_videohdmi10to1serializer2_sink_payload_data;
wire main_videohdmi10to1serializer2_source_valid;
wire main_videohdmi10to1serializer2_source_ready;
wire [1:0] main_videohdmi10to1serializer2_source_payload_data;
reg  [4:0] main_videohdmi10to1serializer2_level = 5'd0;
wire main_videohdmi10to1serializer2_i_inc;
reg  main_videohdmi10to1serializer2_i_count = 1'd0;
wire main_videohdmi10to1serializer2_o_inc;
reg  [3:0] main_videohdmi10to1serializer2_o_count = 4'd0;
reg  [19:0] main_videohdmi10to1serializer2_shift_register = 20'd0;
wire [9:0] main_videohdmi10to1serializer2_i_data;
reg  [1:0] main_videohdmi10to1serializer2_o_data = 2'd0;
reg  main_vtg_enable_storage = 1'd1;
reg  main_vtg_enable_re = 1'd0;
reg  [11:0] main_vtg_hres_storage = 12'd640;
reg  main_vtg_hres_re = 1'd0;
reg  [11:0] main_vtg_hsync_start_storage = 12'd656;
reg  main_vtg_hsync_start_re = 1'd0;
reg  [11:0] main_vtg_hsync_end_storage = 12'd720;
reg  main_vtg_hsync_end_re = 1'd0;
reg  [11:0] main_vtg_hscan_storage = 12'd839;
reg  main_vtg_hscan_re = 1'd0;
reg  [11:0] main_vtg_vres_storage = 12'd480;
reg  main_vtg_vres_re = 1'd0;
reg  [11:0] main_vtg_vsync_start_storage = 12'd481;
reg  main_vtg_vsync_start_re = 1'd0;
reg  [11:0] main_vtg_vsync_end_storage = 12'd484;
reg  main_vtg_vsync_end_re = 1'd0;
reg  [11:0] main_vtg_vscan_storage = 12'd499;
reg  main_vtg_vscan_re = 1'd0;
reg  main_vtg_source_valid = 1'd0;
wire main_vtg_source_ready;
reg  main_vtg_source_first = 1'd0;
reg  main_vtg_source_last = 1'd0;
reg  main_vtg_source_payload_hsync = 1'd0;
reg  main_vtg_source_payload_vsync = 1'd0;
wire main_vtg_source_payload_de;
reg  [11:0] main_vtg_source_payload_hres = 12'd0;
reg  [11:0] main_vtg_source_payload_vres = 12'd0;
reg  [11:0] main_vtg_source_payload_hcount = 12'd0;
reg  [11:0] main_vtg_source_payload_vcount = 12'd0;
wire main_vtg_enable;
wire [11:0] main_vtg_hres;
wire [11:0] main_vtg_hsync_start;
wire [11:0] main_vtg_hsync_end;
wire [11:0] main_vtg_hscan;
wire [11:0] main_vtg_vres;
wire [11:0] main_vtg_vsync_start;
wire [11:0] main_vtg_vsync_end;
wire [11:0] main_vtg_vscan;
reg  main_vtg_hactive = 1'd0;
reg  main_vtg_vactive = 1'd0;
wire main_vtg_reset;
wire main_litedramcrossbar_cmd_valid;
wire main_litedramcrossbar_cmd_ready;
wire main_litedramcrossbar_cmd_payload_we;
wire [23:0] main_litedramcrossbar_cmd_payload_addr;
wire main_litedramcrossbar_wdata_ready;
reg  [15:0] main_litedramcrossbar_wdata_payload_data = 16'd0;
reg  [1:0] main_litedramcrossbar_wdata_payload_we = 2'd0;
wire main_litedramcrossbar_rdata_valid;
wire main_litedramcrossbar_rdata_ready;
reg  main_litedramcrossbar_rdata_first = 1'd0;
reg  main_litedramcrossbar_rdata_last = 1'd0;
wire [15:0] main_litedramcrossbar_rdata_payload_data;
wire main_vfb_vtg_sink_valid;
reg  main_vfb_vtg_sink_ready = 1'd0;
wire main_vfb_vtg_sink_first;
wire main_vfb_vtg_sink_last;
wire main_vfb_vtg_sink_payload_hsync;
wire main_vfb_vtg_sink_payload_vsync;
wire main_vfb_vtg_sink_payload_de;
wire [11:0] main_vfb_vtg_sink_payload_hres;
wire [11:0] main_vfb_vtg_sink_payload_vres;
wire [11:0] main_vfb_vtg_sink_payload_hcount;
wire [11:0] main_vfb_vtg_sink_payload_vcount;
reg  main_vfb_source_valid = 1'd0;
wire main_vfb_source_ready;
reg  main_vfb_source_first = 1'd0;
reg  main_vfb_source_last = 1'd0;
wire main_vfb_source_payload_hsync;
wire main_vfb_source_payload_vsync;
wire main_vfb_source_payload_de;
wire [7:0] main_vfb_source_payload_r;
wire [7:0] main_vfb_source_payload_g;
wire [7:0] main_vfb_source_payload_b;
wire main_vfb_underflow;
wire main_vfb_dma_enable;
reg  main_vfb_dma_sink_sink_valid = 1'd0;
wire main_vfb_dma_sink_sink_ready;
reg  main_vfb_dma_sink_sink_last = 1'd0;
reg  [23:0] main_vfb_dma_sink_sink_payload_address = 24'd0;
wire main_vfb_dma_source_source_valid;
wire main_vfb_dma_source_source_ready;
wire main_vfb_dma_source_source_first;
wire main_vfb_dma_source_source_last;
wire [15:0] main_vfb_dma_source_source_payload_data;
wire main_vfb_dma_request_enable;
wire main_vfb_dma_request_issued;
wire main_vfb_dma_data_dequeued;
reg  [15:0] main_vfb_dma_rsv_level = 16'd0;
wire main_vfb_dma_fifo_sink_valid;
wire main_vfb_dma_fifo_sink_ready;
wire main_vfb_dma_fifo_sink_first;
wire main_vfb_dma_fifo_sink_last;
wire [15:0] main_vfb_dma_fifo_sink_payload_data;
wire main_vfb_dma_fifo_source_valid;
wire main_vfb_dma_fifo_source_ready;
wire main_vfb_dma_fifo_source_first;
wire main_vfb_dma_fifo_source_last;
wire [15:0] main_vfb_dma_fifo_source_payload_data;
wire main_vfb_dma_fifo_re;
reg  main_vfb_dma_fifo_readable = 1'd0;
wire main_vfb_dma_fifo_syncfifo_we;
wire main_vfb_dma_fifo_syncfifo_writable;
wire main_vfb_dma_fifo_syncfifo_re;
wire main_vfb_dma_fifo_syncfifo_readable;
wire [17:0] main_vfb_dma_fifo_syncfifo_din;
wire [17:0] main_vfb_dma_fifo_syncfifo_dout;
reg  [15:0] main_vfb_dma_fifo_level0 = 16'd0;
reg  main_vfb_dma_fifo_replace = 1'd0;
reg  [14:0] main_vfb_dma_fifo_produce = 15'd0;
reg  [14:0] main_vfb_dma_fifo_consume = 15'd0;
reg  [14:0] main_vfb_dma_fifo_wrport_adr = 15'd0;
wire [17:0] main_vfb_dma_fifo_wrport_dat_r;
wire main_vfb_dma_fifo_wrport_we;
wire [17:0] main_vfb_dma_fifo_wrport_dat_w;
wire main_vfb_dma_fifo_do_read;
wire [14:0] main_vfb_dma_fifo_rdport_adr;
wire [17:0] main_vfb_dma_fifo_rdport_dat_r;
wire main_vfb_dma_fifo_rdport_re;
wire [15:0] main_vfb_dma_fifo_level1;
wire [15:0] main_vfb_dma_fifo_fifo_in_payload_data;
wire main_vfb_dma_fifo_fifo_in_first;
wire main_vfb_dma_fifo_fifo_in_last;
wire [15:0] main_vfb_dma_fifo_fifo_out_payload_data;
wire main_vfb_dma_fifo_fifo_out_first;
wire main_vfb_dma_fifo_fifo_out_last;
reg  [31:0] main_vfb_base_storage = 32'd1086324736;
reg  main_vfb_base_re = 1'd0;
reg  [31:0] main_vfb_length_storage = 32'd1228800;
reg  main_vfb_length_re = 1'd0;
reg  main_vfb_enable_storage = 1'd0;
reg  main_vfb_enable_re = 1'd0;
reg  main_vfb_done_status = 1'd0;
wire main_vfb_done_we;
reg  main_vfb_done_re = 1'd0;
reg  main_vfb_loop_storage = 1'd1;
reg  main_vfb_loop_re = 1'd0;
wire [31:0] main_vfb_offset_status;
wire main_vfb_offset_we;
reg  main_vfb_offset_re = 1'd0;
wire [23:0] main_vfb_base;
reg  [23:0] main_vfb_offset = 24'd0;
wire [23:0] main_vfb_length;
wire main_vfb_reset;
wire main_vfb_conv_converter_sink_valid;
wire main_vfb_conv_converter_sink_ready;
wire main_vfb_conv_converter_sink_first;
wire main_vfb_conv_converter_sink_last;
wire [15:0] main_vfb_conv_converter_sink_payload_data;
wire main_vfb_conv_converter_source_valid;
wire main_vfb_conv_converter_source_ready;
reg  main_vfb_conv_converter_source_first = 1'd0;
reg  main_vfb_conv_converter_source_last = 1'd0;
reg  [31:0] main_vfb_conv_converter_source_payload_data = 32'd0;
reg  [1:0] main_vfb_conv_converter_source_payload_valid_token_count = 2'd0;
reg  main_vfb_conv_converter_demux = 1'd0;
wire main_vfb_conv_converter_load_part;
reg  main_vfb_conv_converter_strobe_all = 1'd0;
wire main_vfb_conv_source_source_valid;
wire main_vfb_conv_source_source_ready;
wire main_vfb_conv_source_source_first;
wire main_vfb_conv_source_source_last;
wire [31:0] main_vfb_conv_source_source_payload_data;
wire main_vfb_cdc_sink_sink_valid;
wire main_vfb_cdc_sink_sink_ready;
wire main_vfb_cdc_sink_sink_first;
wire main_vfb_cdc_sink_sink_last;
reg  [31:0] main_vfb_cdc_sink_sink_payload_data = 32'd0;
wire main_vfb_cdc_source_source_valid;
reg  main_vfb_cdc_source_source_ready = 1'd0;
wire main_vfb_cdc_source_source_first;
wire main_vfb_cdc_source_source_last;
wire [31:0] main_vfb_cdc_source_source_payload_data;
wire main_vfb_cdc_cdc_sink_valid;
wire main_vfb_cdc_cdc_sink_ready;
wire main_vfb_cdc_cdc_sink_first;
wire main_vfb_cdc_cdc_sink_last;
wire [31:0] main_vfb_cdc_cdc_sink_payload_data;
wire main_vfb_cdc_cdc_source_valid;
wire main_vfb_cdc_cdc_source_ready;
wire main_vfb_cdc_cdc_source_first;
wire main_vfb_cdc_cdc_source_last;
wire [31:0] main_vfb_cdc_cdc_source_payload_data;
wire main_vfb_cdc_cdc_asyncfifo_we;
wire main_vfb_cdc_cdc_asyncfifo_writable;
wire main_vfb_cdc_cdc_asyncfifo_re;
wire main_vfb_cdc_cdc_asyncfifo_readable;
wire [33:0] main_vfb_cdc_cdc_asyncfifo_din;
wire [33:0] main_vfb_cdc_cdc_asyncfifo_dout;
wire main_vfb_cdc_cdc_graycounter0_ce;
reg  [2:0] main_vfb_cdc_cdc_graycounter0_q = 3'd0;
wire [2:0] main_vfb_cdc_cdc_graycounter0_q_next;
reg  [2:0] main_vfb_cdc_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] main_vfb_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire main_vfb_cdc_cdc_graycounter1_ce;
reg  [2:0] main_vfb_cdc_cdc_graycounter1_q = 3'd0;
wire [2:0] main_vfb_cdc_cdc_graycounter1_q_next;
reg  [2:0] main_vfb_cdc_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] main_vfb_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] main_vfb_cdc_cdc_produce_rdomain;
wire [2:0] main_vfb_cdc_cdc_consume_wdomain;
wire [1:0] main_vfb_cdc_cdc_wrport_adr;
wire [33:0] main_vfb_cdc_cdc_wrport_dat_r;
wire main_vfb_cdc_cdc_wrport_we;
wire [33:0] main_vfb_cdc_cdc_wrport_dat_w;
wire [1:0] main_vfb_cdc_cdc_rdport_adr;
wire [33:0] main_vfb_cdc_cdc_rdport_dat_r;
wire [31:0] main_vfb_cdc_cdc_fifo_in_payload_data;
wire main_vfb_cdc_cdc_fifo_in_first;
wire main_vfb_cdc_cdc_fifo_in_last;
wire [31:0] main_vfb_cdc_cdc_fifo_out_payload_data;
wire main_vfb_cdc_cdc_fifo_out_first;
wire main_vfb_cdc_cdc_fifo_out_last;
reg  [7:0] main_storage = 8'd0;
reg  main_re = 1'd0;
reg  [7:0] main_chaser = 8'd0;
reg  main_mode = 1'd0;
wire main_wait;
wire main_done;
reg  [21:0] main_count = 22'd3125000;
wire card_detect_status0;
wire card_detect_we;
reg  card_detect_re = 1'd0;
reg  [8:0] clocker_storage = 9'd256;
reg  clocker_re = 1'd0;
wire clocker_stop;
wire clocker_ce;
wire clocker_clk_en;
wire clocker_clk0;
reg  [8:0] clocker_clks = 9'd0;
reg  clocker_clk1 = 1'd0;
reg  clocker_clk_d = 1'd0;
reg  clocker_ce_delayed = 1'd0;
reg  clocker_ce_latched = 1'd0;
reg  init_initialize_re = 1'd0;
wire init_initialize_r;
reg  init_initialize_we = 1'd0;
reg  init_initialize_w = 1'd0;
wire init_pads_in_valid;
wire init_pads_in_payload_cmd_i;
wire [3:0] init_pads_in_payload_data_i;
wire init_pads_out_ready;
reg  init_pads_out_payload_clk = 1'd0;
reg  init_pads_out_payload_cmd_o = 1'd0;
reg  init_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] init_pads_out_payload_data_o = 4'd0;
reg  init_pads_out_payload_data_oe = 1'd0;
reg  [7:0] init_count = 8'd0;
wire cmdw_pads_in_valid;
wire cmdw_pads_in_payload_cmd_i;
wire [3:0] cmdw_pads_in_payload_data_i;
wire cmdw_pads_out_ready;
reg  cmdw_pads_out_payload_clk = 1'd0;
reg  cmdw_pads_out_payload_cmd_o = 1'd0;
reg  cmdw_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] cmdw_pads_out_payload_data_o = 4'd0;
reg  cmdw_pads_out_payload_data_oe = 1'd0;
reg  cmdw_sink_valid = 1'd0;
reg  cmdw_sink_ready = 1'd0;
reg  cmdw_sink_last = 1'd0;
reg  [7:0] cmdw_sink_payload_data = 8'd0;
reg  [1:0] cmdw_sink_payload_cmd_type = 2'd0;
reg  cmdw_done = 1'd0;
reg  [7:0] cmdw_count = 8'd0;
wire cmdr_pads_in_pads_in_valid;
wire cmdr_pads_in_pads_in_ready;
reg  cmdr_pads_in_pads_in_first = 1'd0;
reg  cmdr_pads_in_pads_in_last = 1'd0;
reg  cmdr_pads_in_pads_in_payload_clk = 1'd0;
wire cmdr_pads_in_pads_in_payload_cmd_i;
reg  cmdr_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  cmdr_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] cmdr_pads_in_pads_in_payload_data_i;
reg  [3:0] cmdr_pads_in_pads_in_payload_data_o = 4'd0;
reg  cmdr_pads_in_pads_in_payload_data_oe = 1'd0;
reg  cmdr_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire cmdr_pads_out_ready;
reg  cmdr_pads_out_payload_clk = 1'd0;
reg  cmdr_pads_out_payload_cmd_o = 1'd0;
reg  cmdr_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] cmdr_pads_out_payload_data_o = 4'd0;
reg  cmdr_pads_out_payload_data_oe = 1'd0;
reg  cmdr_sink_valid = 1'd0;
reg  cmdr_sink_ready = 1'd0;
reg  [1:0] cmdr_sink_payload_cmd_type = 2'd0;
reg  [1:0] cmdr_sink_payload_data_type = 2'd0;
reg  [7:0] cmdr_sink_payload_length = 8'd0;
reg  cmdr_source_valid = 1'd0;
reg  cmdr_source_ready = 1'd0;
reg  cmdr_source_last = 1'd0;
reg  [7:0] cmdr_source_payload_data = 8'd0;
reg  [2:0] cmdr_source_payload_status = 3'd0;
reg  [31:0] cmdr_timeout = 32'd50000000;
reg  [7:0] cmdr_count = 8'd0;
reg  cmdr_busy = 1'd0;
wire cmdr_cmdr_pads_in_valid;
reg  cmdr_cmdr_pads_in_ready = 1'd0;
wire cmdr_cmdr_pads_in_first;
wire cmdr_cmdr_pads_in_last;
wire cmdr_cmdr_pads_in_payload_clk;
wire cmdr_cmdr_pads_in_payload_cmd_i;
wire cmdr_cmdr_pads_in_payload_cmd_o;
wire cmdr_cmdr_pads_in_payload_cmd_oe;
wire [3:0] cmdr_cmdr_pads_in_payload_data_i;
wire [3:0] cmdr_cmdr_pads_in_payload_data_o;
wire cmdr_cmdr_pads_in_payload_data_oe;
wire cmdr_cmdr_pads_in_payload_data_i_ce;
wire cmdr_cmdr_source_source_valid0;
reg  cmdr_cmdr_source_source_ready0 = 1'd0;
wire cmdr_cmdr_source_source_first0;
wire cmdr_cmdr_source_source_last0;
wire [7:0] cmdr_cmdr_source_source_payload_data0;
wire cmdr_cmdr_start;
reg  cmdr_cmdr_run = 1'd0;
wire cmdr_cmdr_converter_sink_valid;
wire cmdr_cmdr_converter_sink_ready;
reg  cmdr_cmdr_converter_sink_first = 1'd0;
reg  cmdr_cmdr_converter_sink_last = 1'd0;
wire cmdr_cmdr_converter_sink_payload_data;
wire cmdr_cmdr_converter_source_valid;
wire cmdr_cmdr_converter_source_ready;
reg  cmdr_cmdr_converter_source_first = 1'd0;
reg  cmdr_cmdr_converter_source_last = 1'd0;
reg  [7:0] cmdr_cmdr_converter_source_payload_data = 8'd0;
reg  [3:0] cmdr_cmdr_converter_source_payload_valid_token_count = 4'd0;
reg  [2:0] cmdr_cmdr_converter_demux = 3'd0;
wire cmdr_cmdr_converter_load_part;
reg  cmdr_cmdr_converter_strobe_all = 1'd0;
wire cmdr_cmdr_source_source_valid1;
wire cmdr_cmdr_source_source_ready1;
wire cmdr_cmdr_source_source_first1;
wire cmdr_cmdr_source_source_last1;
wire [7:0] cmdr_cmdr_source_source_payload_data1;
wire cmdr_cmdr_buf_sink_valid;
wire cmdr_cmdr_buf_sink_ready;
wire cmdr_cmdr_buf_sink_first;
wire cmdr_cmdr_buf_sink_last;
wire [7:0] cmdr_cmdr_buf_sink_payload_data;
reg  cmdr_cmdr_buf_source_valid = 1'd0;
wire cmdr_cmdr_buf_source_ready;
reg  cmdr_cmdr_buf_source_first = 1'd0;
reg  cmdr_cmdr_buf_source_last = 1'd0;
reg  [7:0] cmdr_cmdr_buf_source_payload_data = 8'd0;
reg  cmdr_cmdr_reset = 1'd0;
wire dataw_pads_in_pads_in_valid;
reg  dataw_pads_in_pads_in_ready = 1'd0;
reg  dataw_pads_in_pads_in_first = 1'd0;
reg  dataw_pads_in_pads_in_last = 1'd0;
reg  dataw_pads_in_pads_in_payload_clk = 1'd0;
wire dataw_pads_in_pads_in_payload_cmd_i;
reg  dataw_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  dataw_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] dataw_pads_in_pads_in_payload_data_i;
reg  [3:0] dataw_pads_in_pads_in_payload_data_o = 4'd0;
reg  dataw_pads_in_pads_in_payload_data_oe = 1'd0;
reg  dataw_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire dataw_pads_out_ready;
reg  dataw_pads_out_payload_clk = 1'd0;
reg  dataw_pads_out_payload_cmd_o = 1'd0;
reg  dataw_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] dataw_pads_out_payload_data_o = 4'd0;
reg  dataw_pads_out_payload_data_oe = 1'd0;
reg  dataw_sink_valid = 1'd0;
reg  dataw_sink_ready = 1'd0;
reg  dataw_sink_first = 1'd0;
reg  dataw_sink_last = 1'd0;
reg  [7:0] dataw_sink_payload_data = 8'd0;
reg  dataw_stop = 1'd0;
wire dataw_accepted0;
wire dataw_crc_error0;
wire dataw_write_error0;
reg  [2:0] dataw_status = 3'd0;
wire dataw_we;
reg  dataw_re = 1'd0;
reg  [7:0] dataw_count = 8'd0;
reg  dataw_accepted1 = 1'd0;
reg  dataw_crc_error1 = 1'd0;
reg  dataw_write_error1 = 1'd0;
wire dataw_crc_pads_in_valid;
wire dataw_crc_pads_in_ready;
wire dataw_crc_pads_in_first;
wire dataw_crc_pads_in_last;
wire dataw_crc_pads_in_payload_clk;
wire dataw_crc_pads_in_payload_cmd_i;
wire dataw_crc_pads_in_payload_cmd_o;
wire dataw_crc_pads_in_payload_cmd_oe;
wire [3:0] dataw_crc_pads_in_payload_data_i;
wire [3:0] dataw_crc_pads_in_payload_data_o;
wire dataw_crc_pads_in_payload_data_oe;
wire dataw_crc_pads_in_payload_data_i_ce;
wire dataw_crc_source_source_valid0;
reg  dataw_crc_source_source_ready0 = 1'd0;
wire dataw_crc_source_source_first0;
wire dataw_crc_source_source_last0;
wire [7:0] dataw_crc_source_source_payload_data0;
wire dataw_crc_start;
reg  dataw_crc_run = 1'd0;
wire dataw_crc_converter_sink_valid;
wire dataw_crc_converter_sink_ready;
reg  dataw_crc_converter_sink_first = 1'd0;
reg  dataw_crc_converter_sink_last = 1'd0;
wire dataw_crc_converter_sink_payload_data;
wire dataw_crc_converter_source_valid;
wire dataw_crc_converter_source_ready;
reg  dataw_crc_converter_source_first = 1'd0;
reg  dataw_crc_converter_source_last = 1'd0;
reg  [7:0] dataw_crc_converter_source_payload_data = 8'd0;
reg  [3:0] dataw_crc_converter_source_payload_valid_token_count = 4'd0;
reg  [2:0] dataw_crc_converter_demux = 3'd0;
wire dataw_crc_converter_load_part;
reg  dataw_crc_converter_strobe_all = 1'd0;
wire dataw_crc_source_source_valid1;
wire dataw_crc_source_source_ready1;
wire dataw_crc_source_source_first1;
wire dataw_crc_source_source_last1;
wire [7:0] dataw_crc_source_source_payload_data1;
wire dataw_crc_buf_sink_valid;
wire dataw_crc_buf_sink_ready;
wire dataw_crc_buf_sink_first;
wire dataw_crc_buf_sink_last;
wire [7:0] dataw_crc_buf_sink_payload_data;
reg  dataw_crc_buf_source_valid = 1'd0;
wire dataw_crc_buf_source_ready;
reg  dataw_crc_buf_source_first = 1'd0;
reg  dataw_crc_buf_source_last = 1'd0;
reg  [7:0] dataw_crc_buf_source_payload_data = 8'd0;
reg  dataw_crc_reset = 1'd0;
wire datar_pads_in_pads_in_valid;
wire datar_pads_in_pads_in_ready;
reg  datar_pads_in_pads_in_first = 1'd0;
reg  datar_pads_in_pads_in_last = 1'd0;
reg  datar_pads_in_pads_in_payload_clk = 1'd0;
wire datar_pads_in_pads_in_payload_cmd_i;
reg  datar_pads_in_pads_in_payload_cmd_o = 1'd0;
reg  datar_pads_in_pads_in_payload_cmd_oe = 1'd0;
wire [3:0] datar_pads_in_pads_in_payload_data_i;
reg  [3:0] datar_pads_in_pads_in_payload_data_o = 4'd0;
reg  datar_pads_in_pads_in_payload_data_oe = 1'd0;
reg  datar_pads_in_pads_in_payload_data_i_ce = 1'd0;
wire datar_pads_out_ready;
reg  datar_pads_out_payload_clk = 1'd0;
reg  datar_pads_out_payload_cmd_o = 1'd0;
reg  datar_pads_out_payload_cmd_oe = 1'd0;
reg  [3:0] datar_pads_out_payload_data_o = 4'd0;
reg  datar_pads_out_payload_data_oe = 1'd0;
reg  datar_sink_valid = 1'd0;
reg  datar_sink_ready = 1'd0;
reg  datar_sink_last = 1'd0;
reg  [9:0] datar_sink_payload_block_length = 10'd0;
reg  datar_source_valid = 1'd0;
reg  datar_source_ready = 1'd0;
reg  datar_source_first = 1'd0;
reg  datar_source_last = 1'd0;
reg  [7:0] datar_source_payload_data = 8'd0;
reg  [2:0] datar_source_payload_status = 3'd0;
reg  datar_stop = 1'd0;
reg  [31:0] datar_timeout = 32'd50000000;
reg  [9:0] datar_count = 10'd0;
wire datar_datar_pads_in_valid;
reg  datar_datar_pads_in_ready = 1'd0;
wire datar_datar_pads_in_first;
wire datar_datar_pads_in_last;
wire datar_datar_pads_in_payload_clk;
wire datar_datar_pads_in_payload_cmd_i;
wire datar_datar_pads_in_payload_cmd_o;
wire datar_datar_pads_in_payload_cmd_oe;
wire [3:0] datar_datar_pads_in_payload_data_i;
wire [3:0] datar_datar_pads_in_payload_data_o;
wire datar_datar_pads_in_payload_data_oe;
wire datar_datar_pads_in_payload_data_i_ce;
wire datar_datar_source_source_valid0;
reg  datar_datar_source_source_ready0 = 1'd0;
wire datar_datar_source_source_first0;
wire datar_datar_source_source_last0;
wire [7:0] datar_datar_source_source_payload_data0;
wire datar_datar_start;
reg  datar_datar_run = 1'd0;
wire datar_datar_converter_sink_valid;
wire datar_datar_converter_sink_ready;
reg  datar_datar_converter_sink_first = 1'd0;
reg  datar_datar_converter_sink_last = 1'd0;
wire [3:0] datar_datar_converter_sink_payload_data;
wire datar_datar_converter_source_valid;
wire datar_datar_converter_source_ready;
reg  datar_datar_converter_source_first = 1'd0;
reg  datar_datar_converter_source_last = 1'd0;
reg  [7:0] datar_datar_converter_source_payload_data = 8'd0;
reg  [1:0] datar_datar_converter_source_payload_valid_token_count = 2'd0;
reg  datar_datar_converter_demux = 1'd0;
wire datar_datar_converter_load_part;
reg  datar_datar_converter_strobe_all = 1'd0;
wire datar_datar_source_source_valid1;
wire datar_datar_source_source_ready1;
wire datar_datar_source_source_first1;
wire datar_datar_source_source_last1;
wire [7:0] datar_datar_source_source_payload_data1;
wire datar_datar_buf_sink_valid;
wire datar_datar_buf_sink_ready;
wire datar_datar_buf_sink_first;
wire datar_datar_buf_sink_last;
wire [7:0] datar_datar_buf_sink_payload_data;
reg  datar_datar_buf_source_valid = 1'd0;
wire datar_datar_buf_source_ready;
reg  datar_datar_buf_source_first = 1'd0;
reg  datar_datar_buf_source_last = 1'd0;
reg  [7:0] datar_datar_buf_source_payload_data = 8'd0;
reg  datar_datar_reset = 1'd0;
wire sdpads_clk;
wire sdpads_cmd_i;
wire sdpads_cmd_o;
wire sdpads_cmd_oe;
wire [3:0] sdpads_data_i;
wire [3:0] sdpads_data_o;
wire sdpads_data_oe;
reg  sdpads_data_i_ce = 1'd0;
reg  [1:0] clocker_clk_delay = 2'd0;
reg  card_detect_irq = 1'd0;
reg  card_detect_d = 1'd0;
wire sdcore_sink_sink_valid0;
wire sdcore_sink_sink_ready0;
wire sdcore_sink_sink_first0;
wire sdcore_sink_sink_last0;
wire [7:0] sdcore_sink_sink_payload_data0;
wire sdcore_source_source_valid0;
wire sdcore_source_source_ready0;
wire sdcore_source_source_first0;
wire sdcore_source_source_last0;
wire [7:0] sdcore_source_source_payload_data0;
reg  [31:0] sdcore_cmd_argument_storage = 32'd0;
reg  sdcore_cmd_argument_re = 1'd0;
wire [1:0] sdcore_csrfield_cmd_type;
wire [1:0] sdcore_csrfield_data_type;
wire [5:0] sdcore_csrfield_cmd;
reg  [13:0] sdcore_cmd_command_storage = 14'd0;
reg  sdcore_cmd_command_re = 1'd0;
reg  sdcore_cmd_send_storage = 1'd0;
reg  sdcore_cmd_send_re = 1'd0;
reg  [127:0] sdcore_cmd_response_status = 128'd0;
wire sdcore_cmd_response_we;
reg  sdcore_cmd_response_re = 1'd0;
wire sdcore_csrfield_done0;
wire sdcore_csrfield_error0;
wire sdcore_csrfield_timeout0;
wire sdcore_csrfield_crc0;
reg  [3:0] sdcore_cmd_event_status = 4'd0;
wire sdcore_cmd_event_we;
reg  sdcore_cmd_event_re = 1'd0;
wire sdcore_csrfield_done1;
wire sdcore_csrfield_error1;
wire sdcore_csrfield_timeout1;
wire sdcore_csrfield_crc1;
reg  [3:0] sdcore_data_event_status = 4'd0;
wire sdcore_data_event_we;
reg  sdcore_data_event_re = 1'd0;
reg  [9:0] sdcore_block_length_storage = 10'd0;
reg  sdcore_block_length_re = 1'd0;
reg  [31:0] sdcore_block_count_storage = 32'd0;
reg  sdcore_block_count_re = 1'd0;
wire sdcore_crc7_inserter_reset;
wire sdcore_crc7_inserter_enable;
wire [39:0] sdcore_crc7_inserter_din;
reg  [6:0] sdcore_crc7_inserter_crc = 7'd0;
reg  [6:0] sdcore_crc7_inserter_reg0 = 7'd0;
wire [6:0] sdcore_crc7_inserter_reg1;
wire [6:0] sdcore_crc7_inserter_reg2;
wire [6:0] sdcore_crc7_inserter_reg3;
wire [6:0] sdcore_crc7_inserter_reg4;
wire [6:0] sdcore_crc7_inserter_reg5;
wire [6:0] sdcore_crc7_inserter_reg6;
wire [6:0] sdcore_crc7_inserter_reg7;
wire [6:0] sdcore_crc7_inserter_reg8;
wire [6:0] sdcore_crc7_inserter_reg9;
wire [6:0] sdcore_crc7_inserter_reg10;
wire [6:0] sdcore_crc7_inserter_reg11;
wire [6:0] sdcore_crc7_inserter_reg12;
wire [6:0] sdcore_crc7_inserter_reg13;
wire [6:0] sdcore_crc7_inserter_reg14;
wire [6:0] sdcore_crc7_inserter_reg15;
wire [6:0] sdcore_crc7_inserter_reg16;
wire [6:0] sdcore_crc7_inserter_reg17;
wire [6:0] sdcore_crc7_inserter_reg18;
wire [6:0] sdcore_crc7_inserter_reg19;
wire [6:0] sdcore_crc7_inserter_reg20;
wire [6:0] sdcore_crc7_inserter_reg21;
wire [6:0] sdcore_crc7_inserter_reg22;
wire [6:0] sdcore_crc7_inserter_reg23;
wire [6:0] sdcore_crc7_inserter_reg24;
wire [6:0] sdcore_crc7_inserter_reg25;
wire [6:0] sdcore_crc7_inserter_reg26;
wire [6:0] sdcore_crc7_inserter_reg27;
wire [6:0] sdcore_crc7_inserter_reg28;
wire [6:0] sdcore_crc7_inserter_reg29;
wire [6:0] sdcore_crc7_inserter_reg30;
wire [6:0] sdcore_crc7_inserter_reg31;
wire [6:0] sdcore_crc7_inserter_reg32;
wire [6:0] sdcore_crc7_inserter_reg33;
wire [6:0] sdcore_crc7_inserter_reg34;
wire [6:0] sdcore_crc7_inserter_reg35;
wire [6:0] sdcore_crc7_inserter_reg36;
wire [6:0] sdcore_crc7_inserter_reg37;
wire [6:0] sdcore_crc7_inserter_reg38;
wire [6:0] sdcore_crc7_inserter_reg39;
wire [6:0] sdcore_crc7_inserter_reg40;
wire sdcore_crc16_inserter_sink_valid;
reg  sdcore_crc16_inserter_sink_ready = 1'd0;
wire sdcore_crc16_inserter_sink_first;
wire sdcore_crc16_inserter_sink_last;
wire [7:0] sdcore_crc16_inserter_sink_payload_data;
reg  sdcore_crc16_inserter_source_valid = 1'd0;
reg  sdcore_crc16_inserter_source_ready = 1'd0;
reg  sdcore_crc16_inserter_source_first = 1'd0;
reg  sdcore_crc16_inserter_source_last = 1'd0;
reg  [7:0] sdcore_crc16_inserter_source_payload_data = 8'd0;
reg  [2:0] sdcore_crc16_inserter_count = 3'd0;
wire sdcore_crc16_inserter_crc0_reset;
wire sdcore_crc16_inserter_crc0_enable;
reg  [1:0] sdcore_crc16_inserter_crc0_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc0_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc0_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc0_reg1;
wire [15:0] sdcore_crc16_inserter_crc0_reg2;
wire sdcore_crc16_inserter_crc1_reset;
wire sdcore_crc16_inserter_crc1_enable;
reg  [1:0] sdcore_crc16_inserter_crc1_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc1_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc1_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc1_reg1;
wire [15:0] sdcore_crc16_inserter_crc1_reg2;
wire sdcore_crc16_inserter_crc2_reset;
wire sdcore_crc16_inserter_crc2_enable;
reg  [1:0] sdcore_crc16_inserter_crc2_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc2_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc2_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc2_reg1;
wire [15:0] sdcore_crc16_inserter_crc2_reg2;
wire sdcore_crc16_inserter_crc3_reset;
wire sdcore_crc16_inserter_crc3_enable;
reg  [1:0] sdcore_crc16_inserter_crc3_din = 2'd0;
reg  [15:0] sdcore_crc16_inserter_crc3_crc = 16'd0;
reg  [15:0] sdcore_crc16_inserter_crc3_reg0 = 16'd0;
wire [15:0] sdcore_crc16_inserter_crc3_reg1;
wire [15:0] sdcore_crc16_inserter_crc3_reg2;
reg  sdcore_sink_sink_valid1 = 1'd0;
wire sdcore_sink_sink_ready1;
reg  sdcore_sink_sink_first1 = 1'd0;
reg  sdcore_sink_sink_last1 = 1'd0;
reg  [7:0] sdcore_sink_sink_payload_data1 = 8'd0;
wire sdcore_source_source_valid1;
wire sdcore_source_source_ready1;
wire sdcore_source_source_first1;
wire sdcore_source_source_last1;
wire [7:0] sdcore_source_source_payload_data1;
wire sdcore_fifo_sink_valid;
wire sdcore_fifo_sink_ready;
wire sdcore_fifo_sink_first;
wire sdcore_fifo_sink_last;
wire [7:0] sdcore_fifo_sink_payload_data;
wire sdcore_fifo_source_valid;
wire sdcore_fifo_source_ready;
wire sdcore_fifo_source_first;
wire sdcore_fifo_source_last;
wire [7:0] sdcore_fifo_source_payload_data;
wire sdcore_fifo_syncfifo_we;
wire sdcore_fifo_syncfifo_writable;
wire sdcore_fifo_syncfifo_re;
wire sdcore_fifo_syncfifo_readable;
wire [9:0] sdcore_fifo_syncfifo_din;
wire [9:0] sdcore_fifo_syncfifo_dout;
reg  [3:0] sdcore_fifo_level = 4'd0;
reg  sdcore_fifo_replace = 1'd0;
reg  [2:0] sdcore_fifo_produce = 3'd0;
reg  [2:0] sdcore_fifo_consume = 3'd0;
reg  [2:0] sdcore_fifo_wrport_adr = 3'd0;
wire [9:0] sdcore_fifo_wrport_dat_r;
wire sdcore_fifo_wrport_we;
wire [9:0] sdcore_fifo_wrport_dat_w;
wire sdcore_fifo_do_read;
wire [2:0] sdcore_fifo_rdport_adr;
wire [9:0] sdcore_fifo_rdport_dat_r;
wire [7:0] sdcore_fifo_fifo_in_payload_data;
wire sdcore_fifo_fifo_in_first;
wire sdcore_fifo_fifo_in_last;
wire [7:0] sdcore_fifo_fifo_out_payload_data;
wire sdcore_fifo_fifo_out_first;
wire sdcore_fifo_fifo_out_last;
wire sdcore_fifo_reset;
wire [1:0] sdcore_cmd_type;
reg  [2:0] sdcore_cmd_count = 3'd0;
reg  sdcore_cmd_done = 1'd0;
reg  sdcore_cmd_error = 1'd0;
reg  sdcore_cmd_timeout = 1'd0;
wire [1:0] sdcore_data_type;
reg  [31:0] sdcore_data_count = 32'd0;
reg  sdcore_data_done = 1'd0;
reg  sdcore_data_error = 1'd0;
reg  sdcore_data_timeout = 1'd0;
wire [5:0] sdcore_cmd;
wire [31:0] interface0_bus_adr;
wire [31:0] interface0_bus_dat_w;
wire [31:0] interface0_bus_dat_r;
wire [3:0] interface0_bus_sel;
wire interface0_bus_cyc;
wire interface0_bus_stb;
wire interface0_bus_ack;
wire interface0_bus_we;
reg  [2:0] interface0_bus_cti = 3'd0;
reg  [1:0] interface0_bus_bte = 2'd0;
wire interface0_bus_err;
wire sdblock2mem_sink_sink_valid0;
reg  sdblock2mem_sink_sink_ready0 = 1'd0;
wire sdblock2mem_sink_sink_first;
wire sdblock2mem_sink_sink_last0;
wire [7:0] sdblock2mem_sink_sink_payload_data0;
reg  sdblock2mem_irq = 1'd0;
reg  sdblock2mem_fifo_sink_valid = 1'd0;
wire sdblock2mem_fifo_sink_ready;
reg  sdblock2mem_fifo_sink_first = 1'd0;
reg  sdblock2mem_fifo_sink_last = 1'd0;
reg  [7:0] sdblock2mem_fifo_sink_payload_data = 8'd0;
wire sdblock2mem_fifo_source_valid;
wire sdblock2mem_fifo_source_ready;
wire sdblock2mem_fifo_source_first;
wire sdblock2mem_fifo_source_last;
wire [7:0] sdblock2mem_fifo_source_payload_data;
wire sdblock2mem_fifo_re;
reg  sdblock2mem_fifo_readable = 1'd0;
wire sdblock2mem_fifo_syncfifo_we;
wire sdblock2mem_fifo_syncfifo_writable;
wire sdblock2mem_fifo_syncfifo_re;
wire sdblock2mem_fifo_syncfifo_readable;
wire [9:0] sdblock2mem_fifo_syncfifo_din;
wire [9:0] sdblock2mem_fifo_syncfifo_dout;
reg  [9:0] sdblock2mem_fifo_level0 = 10'd0;
reg  sdblock2mem_fifo_replace = 1'd0;
reg  [8:0] sdblock2mem_fifo_produce = 9'd0;
reg  [8:0] sdblock2mem_fifo_consume = 9'd0;
reg  [8:0] sdblock2mem_fifo_wrport_adr = 9'd0;
wire [9:0] sdblock2mem_fifo_wrport_dat_r;
wire sdblock2mem_fifo_wrport_we;
wire [9:0] sdblock2mem_fifo_wrport_dat_w;
wire sdblock2mem_fifo_do_read;
wire [8:0] sdblock2mem_fifo_rdport_adr;
wire [9:0] sdblock2mem_fifo_rdport_dat_r;
wire sdblock2mem_fifo_rdport_re;
wire [9:0] sdblock2mem_fifo_level1;
wire [7:0] sdblock2mem_fifo_fifo_in_payload_data;
wire sdblock2mem_fifo_fifo_in_first;
wire sdblock2mem_fifo_fifo_in_last;
wire [7:0] sdblock2mem_fifo_fifo_out_payload_data;
wire sdblock2mem_fifo_fifo_out_first;
wire sdblock2mem_fifo_fifo_out_last;
wire sdblock2mem_converter_sink_valid;
wire sdblock2mem_converter_sink_ready;
wire sdblock2mem_converter_sink_first;
wire sdblock2mem_converter_sink_last;
wire [7:0] sdblock2mem_converter_sink_payload_data;
wire sdblock2mem_converter_source_valid;
wire sdblock2mem_converter_source_ready;
reg  sdblock2mem_converter_source_first = 1'd0;
reg  sdblock2mem_converter_source_last = 1'd0;
reg  [31:0] sdblock2mem_converter_source_payload_data = 32'd0;
reg  [2:0] sdblock2mem_converter_source_payload_valid_token_count = 3'd0;
reg  [1:0] sdblock2mem_converter_demux = 2'd0;
wire sdblock2mem_converter_load_part;
reg  sdblock2mem_converter_strobe_all = 1'd0;
wire sdblock2mem_source_source_valid;
wire sdblock2mem_source_source_ready;
wire sdblock2mem_source_source_first;
wire sdblock2mem_source_source_last;
wire [31:0] sdblock2mem_source_source_payload_data;
reg  sdblock2mem_sink_sink_valid1 = 1'd0;
wire sdblock2mem_sink_sink_ready1;
reg  sdblock2mem_sink_sink_last1 = 1'd0;
reg  [31:0] sdblock2mem_sink_sink_payload_address = 32'd0;
reg  [31:0] sdblock2mem_sink_sink_payload_data1 = 32'd0;
wire sdblock2mem_wishbonedmawriter_sink_valid;
reg  sdblock2mem_wishbonedmawriter_sink_ready = 1'd0;
wire sdblock2mem_wishbonedmawriter_sink_first;
wire sdblock2mem_wishbonedmawriter_sink_last;
wire [31:0] sdblock2mem_wishbonedmawriter_sink_payload_data;
reg  [63:0] sdblock2mem_wishbonedmawriter_base_storage = 64'd0;
reg  sdblock2mem_wishbonedmawriter_base_re = 1'd0;
reg  [31:0] sdblock2mem_wishbonedmawriter_length_storage = 32'd0;
reg  sdblock2mem_wishbonedmawriter_length_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_enable_storage = 1'd0;
reg  sdblock2mem_wishbonedmawriter_enable_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_done_status = 1'd0;
wire sdblock2mem_wishbonedmawriter_done_we;
reg  sdblock2mem_wishbonedmawriter_done_re = 1'd0;
reg  sdblock2mem_wishbonedmawriter_loop_storage = 1'd0;
reg  sdblock2mem_wishbonedmawriter_loop_re = 1'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_offset_status;
wire sdblock2mem_wishbonedmawriter_offset_we;
reg  sdblock2mem_wishbonedmawriter_offset_re = 1'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_base;
reg  [31:0] sdblock2mem_wishbonedmawriter_offset = 32'd0;
wire [31:0] sdblock2mem_wishbonedmawriter_length;
wire sdblock2mem_wishbonedmawriter_reset;
wire sdblock2mem_start;
reg  sdblock2mem_connect = 1'd0;
reg  sdblock2mem_done_d = 1'd0;
reg  [31:0] interface1_bus_adr = 32'd0;
reg  [31:0] interface1_bus_dat_w = 32'd0;
wire [31:0] interface1_bus_dat_r;
reg  [3:0] interface1_bus_sel = 4'd0;
reg  interface1_bus_cyc = 1'd0;
reg  interface1_bus_stb = 1'd0;
wire interface1_bus_ack;
reg  interface1_bus_we = 1'd0;
reg  [2:0] interface1_bus_cti = 3'd0;
reg  [1:0] interface1_bus_bte = 2'd0;
wire interface1_bus_err;
wire sdmem2block_source_source_valid0;
wire sdmem2block_source_source_ready0;
wire sdmem2block_source_source_first0;
reg  sdmem2block_source_source_last0 = 1'd0;
wire [7:0] sdmem2block_source_source_payload_data0;
reg  sdmem2block_irq = 1'd0;
reg  sdmem2block_dma_sink_valid = 1'd0;
reg  sdmem2block_dma_sink_ready = 1'd0;
reg  sdmem2block_dma_sink_last = 1'd0;
reg  [31:0] sdmem2block_dma_sink_payload_address = 32'd0;
reg  sdmem2block_dma_source_valid = 1'd0;
wire sdmem2block_dma_source_ready;
reg  sdmem2block_dma_source_first = 1'd0;
reg  sdmem2block_dma_source_last = 1'd0;
reg  [31:0] sdmem2block_dma_source_payload_data = 32'd0;
reg  [31:0] sdmem2block_dma_data = 32'd0;
reg  [63:0] sdmem2block_dma_base_storage = 64'd0;
reg  sdmem2block_dma_base_re = 1'd0;
reg  [31:0] sdmem2block_dma_length_storage = 32'd0;
reg  sdmem2block_dma_length_re = 1'd0;
reg  sdmem2block_dma_enable_storage = 1'd0;
reg  sdmem2block_dma_enable_re = 1'd0;
reg  sdmem2block_dma_done_status = 1'd0;
wire sdmem2block_dma_done_we;
reg  sdmem2block_dma_done_re = 1'd0;
reg  sdmem2block_dma_loop_storage = 1'd0;
reg  sdmem2block_dma_loop_re = 1'd0;
wire [31:0] sdmem2block_dma_offset_status;
wire sdmem2block_dma_offset_we;
reg  sdmem2block_dma_offset_re = 1'd0;
wire [31:0] sdmem2block_dma_base;
reg  [31:0] sdmem2block_dma_offset = 32'd0;
wire [31:0] sdmem2block_dma_length;
wire sdmem2block_dma_reset;
wire sdmem2block_converter_sink_valid;
wire sdmem2block_converter_sink_ready;
wire sdmem2block_converter_sink_first;
wire sdmem2block_converter_sink_last;
wire [31:0] sdmem2block_converter_sink_payload_data;
wire sdmem2block_converter_source_valid;
wire sdmem2block_converter_source_ready;
wire sdmem2block_converter_source_first;
wire sdmem2block_converter_source_last;
reg  [7:0] sdmem2block_converter_source_payload_data = 8'd0;
wire sdmem2block_converter_source_payload_valid_token_count;
reg  [1:0] sdmem2block_converter_mux = 2'd0;
wire sdmem2block_converter_first;
wire sdmem2block_converter_last;
wire sdmem2block_source_source_valid1;
wire sdmem2block_source_source_ready1;
wire sdmem2block_source_source_first1;
wire sdmem2block_source_source_last1;
wire [7:0] sdmem2block_source_source_payload_data1;
wire sdmem2block_fifo_sink_valid;
wire sdmem2block_fifo_sink_ready;
wire sdmem2block_fifo_sink_first;
wire sdmem2block_fifo_sink_last;
wire [7:0] sdmem2block_fifo_sink_payload_data;
wire sdmem2block_fifo_source_valid;
wire sdmem2block_fifo_source_ready;
wire sdmem2block_fifo_source_first;
wire sdmem2block_fifo_source_last;
wire [7:0] sdmem2block_fifo_source_payload_data;
wire sdmem2block_fifo_re;
reg  sdmem2block_fifo_readable = 1'd0;
wire sdmem2block_fifo_syncfifo_we;
wire sdmem2block_fifo_syncfifo_writable;
wire sdmem2block_fifo_syncfifo_re;
wire sdmem2block_fifo_syncfifo_readable;
wire [9:0] sdmem2block_fifo_syncfifo_din;
wire [9:0] sdmem2block_fifo_syncfifo_dout;
reg  [9:0] sdmem2block_fifo_level0 = 10'd0;
reg  sdmem2block_fifo_replace = 1'd0;
reg  [8:0] sdmem2block_fifo_produce = 9'd0;
reg  [8:0] sdmem2block_fifo_consume = 9'd0;
reg  [8:0] sdmem2block_fifo_wrport_adr = 9'd0;
wire [9:0] sdmem2block_fifo_wrport_dat_r;
wire sdmem2block_fifo_wrport_we;
wire [9:0] sdmem2block_fifo_wrport_dat_w;
wire sdmem2block_fifo_do_read;
wire [8:0] sdmem2block_fifo_rdport_adr;
wire [9:0] sdmem2block_fifo_rdport_dat_r;
wire sdmem2block_fifo_rdport_re;
wire [9:0] sdmem2block_fifo_level1;
wire [7:0] sdmem2block_fifo_fifo_in_payload_data;
wire sdmem2block_fifo_fifo_in_first;
wire sdmem2block_fifo_fifo_in_last;
wire [7:0] sdmem2block_fifo_fifo_out_payload_data;
wire sdmem2block_fifo_fifo_out_first;
wire sdmem2block_fifo_fifo_out_last;
reg  [8:0] sdmem2block_count = 9'd0;
reg  sdmem2block_done_d = 1'd0;
wire sdirq_irq;
wire card_detect_status1;
reg  card_detect_pending = 1'd0;
wire card_detect_trigger;
reg  card_detect_clear = 1'd0;
wire block2mem_dma_status;
reg  block2mem_dma_pending = 1'd0;
wire block2mem_dma_trigger;
reg  block2mem_dma_clear = 1'd0;
wire mem2block_dma_status;
reg  mem2block_dma_pending = 1'd0;
wire mem2block_dma_trigger;
reg  mem2block_dma_clear = 1'd0;
wire cmd_done_status;
wire cmd_done_pending;
wire cmd_done_trigger;
reg  cmd_done_clear = 1'd0;
wire eventmanager_card_detect0;
wire eventmanager_block2mem_dma0;
wire eventmanager_mem2block_dma0;
wire eventmanager_cmd_done0;
reg  [3:0] eventmanager_status_status = 4'd0;
wire eventmanager_status_we;
reg  eventmanager_status_re = 1'd0;
wire eventmanager_card_detect1;
wire eventmanager_block2mem_dma1;
wire eventmanager_mem2block_dma1;
wire eventmanager_cmd_done1;
reg  [3:0] eventmanager_pending_status = 4'd0;
wire eventmanager_pending_we;
reg  eventmanager_pending_re = 1'd0;
reg  [3:0] eventmanager_pending_r = 4'd0;
wire eventmanager_card_detect2;
wire eventmanager_block2mem_dma2;
wire eventmanager_mem2block_dma2;
wire eventmanager_cmd_done2;
reg  [3:0] eventmanager_enable_storage = 4'd0;
reg  eventmanager_enable_re = 1'd0;
wire builder_ecp5pll0_ecp5pll;
wire builder_ecp5pll0_locked;
wire builder_ecp5pll1_ecp5pll;
wire builder_ecp5pll1_locked;
reg  builder_rs232phytx_state = 1'd0;
reg  builder_rs232phytx_next_state = 1'd0;
reg  [3:0] main_soclinux_tx_count_rs232phytx_next_value0 = 4'd0;
reg  main_soclinux_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  main_soclinux_serial_tx_rs232phytx_next_value1 = 1'd0;
reg  main_soclinux_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] main_soclinux_tx_data_rs232phytx_next_value2 = 8'd0;
reg  main_soclinux_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  builder_rs232phyrx_state = 1'd0;
reg  builder_rs232phyrx_next_state = 1'd0;
reg  [3:0] main_soclinux_rx_count_rs232phyrx_next_value0 = 4'd0;
reg  main_soclinux_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] main_soclinux_rx_data_rs232phyrx_next_value1 = 8'd0;
reg  main_soclinux_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [1:0] builder_refresher_state = 2'd0;
reg  [1:0] builder_refresher_next_state = 2'd0;
reg  [2:0] builder_bankmachine0_state = 3'd0;
reg  [2:0] builder_bankmachine0_next_state = 3'd0;
reg  [2:0] builder_bankmachine1_state = 3'd0;
reg  [2:0] builder_bankmachine1_next_state = 3'd0;
reg  [2:0] builder_bankmachine2_state = 3'd0;
reg  [2:0] builder_bankmachine2_next_state = 3'd0;
reg  [2:0] builder_bankmachine3_state = 3'd0;
reg  [2:0] builder_bankmachine3_next_state = 3'd0;
reg  [2:0] builder_multiplexer_state = 3'd0;
reg  [2:0] builder_multiplexer_next_state = 3'd0;
wire [1:0] builder_roundrobin0_request;
reg  builder_roundrobin0_grant = 1'd0;
wire builder_roundrobin0_ce;
wire [1:0] builder_roundrobin1_request;
reg  builder_roundrobin1_grant = 1'd0;
wire builder_roundrobin1_ce;
wire [1:0] builder_roundrobin2_request;
reg  builder_roundrobin2_grant = 1'd0;
wire builder_roundrobin2_ce;
wire [1:0] builder_roundrobin3_request;
reg  builder_roundrobin3_grant = 1'd0;
wire builder_roundrobin3_ce;
reg  builder_locked0 = 1'd0;
reg  builder_locked1 = 1'd0;
reg  builder_locked2 = 1'd0;
reg  builder_locked3 = 1'd0;
reg  builder_locked4 = 1'd0;
reg  builder_locked5 = 1'd0;
reg  builder_locked6 = 1'd0;
reg  builder_locked7 = 1'd0;
reg  builder_new_master_wdata_ready0 = 1'd0;
reg  builder_new_master_wdata_ready1 = 1'd0;
reg  builder_new_master_rdata_valid0 = 1'd0;
reg  builder_new_master_rdata_valid1 = 1'd0;
reg  builder_new_master_rdata_valid2 = 1'd0;
reg  builder_new_master_rdata_valid3 = 1'd0;
reg  builder_new_master_rdata_valid4 = 1'd0;
reg  builder_new_master_rdata_valid5 = 1'd0;
reg  builder_new_master_rdata_valid6 = 1'd0;
reg  builder_new_master_rdata_valid7 = 1'd0;
reg  [1:0] builder_fullmemorywe_state = 2'd0;
reg  [1:0] builder_fullmemorywe_next_state = 2'd0;
reg  builder_litedramwishbone2native_litedramnativeportconverter_state = 1'd0;
reg  builder_litedramwishbone2native_litedramnativeportconverter_next_state = 1'd0;
reg  [2:0] main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value = 3'd0;
reg  main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value_ce = 1'd0;
reg  [1:0] builder_litedramwishbone2native_fsm_state = 2'd0;
reg  [1:0] builder_litedramwishbone2native_fsm_next_state = 2'd0;
reg  main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value = 1'd0;
reg  main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce = 1'd0;
reg  builder_clockdomainsrenamer_state = 1'd0;
reg  builder_clockdomainsrenamer_next_state = 1'd0;
reg  main_vtg_hactive_clockdomainsrenamer_next_value0 = 1'd0;
reg  main_vtg_hactive_clockdomainsrenamer_next_value_ce0 = 1'd0;
reg  main_vtg_vactive_clockdomainsrenamer_next_value1 = 1'd0;
reg  main_vtg_vactive_clockdomainsrenamer_next_value_ce1 = 1'd0;
reg  [11:0] main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 = 12'd0;
reg  main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 = 1'd0;
reg  [11:0] main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 = 12'd0;
reg  main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 = 1'd0;
reg  [11:0] main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 = 12'd0;
reg  main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 = 1'd0;
reg  [11:0] main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 = 12'd0;
reg  main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 = 1'd0;
reg  main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 = 1'd0;
reg  main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 = 1'd0;
reg  main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 = 1'd0;
reg  main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 = 1'd0;
reg  [1:0] builder_videoframebuffer_state = 2'd0;
reg  [1:0] builder_videoframebuffer_next_state = 2'd0;
reg  [23:0] main_vfb_offset_videoframebuffer_next_value = 24'd0;
reg  main_vfb_offset_videoframebuffer_next_value_ce = 1'd0;
reg  builder_sdphyinit_state = 1'd0;
reg  builder_sdphyinit_next_state = 1'd0;
reg  [7:0] init_count_sdphyinit_next_value = 8'd0;
reg  init_count_sdphyinit_next_value_ce = 1'd0;
reg  [1:0] builder_sdphycmdw_state = 2'd0;
reg  [1:0] builder_sdphycmdw_next_state = 2'd0;
reg  [7:0] cmdw_count_sdphycmdw_next_value = 8'd0;
reg  cmdw_count_sdphycmdw_next_value_ce = 1'd0;
reg  [2:0] builder_sdphycmdr_state = 3'd0;
reg  [2:0] builder_sdphycmdr_next_state = 3'd0;
reg  [31:0] cmdr_timeout_sdphycmdr_next_value0 = 32'd0;
reg  cmdr_timeout_sdphycmdr_next_value_ce0 = 1'd0;
reg  [7:0] cmdr_count_sdphycmdr_next_value1 = 8'd0;
reg  cmdr_count_sdphycmdr_next_value_ce1 = 1'd0;
reg  cmdr_busy_sdphycmdr_next_value2 = 1'd0;
reg  cmdr_busy_sdphycmdr_next_value_ce2 = 1'd0;
reg  cmdr_cmdr_reset_sdphycmdr_next_value3 = 1'd0;
reg  cmdr_cmdr_reset_sdphycmdr_next_value_ce3 = 1'd0;
reg  [2:0] builder_sdphydataw_state = 3'd0;
reg  [2:0] builder_sdphydataw_next_state = 3'd0;
reg  dataw_accepted1_sdphydataw_next_value0 = 1'd0;
reg  dataw_accepted1_sdphydataw_next_value_ce0 = 1'd0;
reg  dataw_crc_error1_sdphydataw_next_value1 = 1'd0;
reg  dataw_crc_error1_sdphydataw_next_value_ce1 = 1'd0;
reg  dataw_write_error1_sdphydataw_next_value2 = 1'd0;
reg  dataw_write_error1_sdphydataw_next_value_ce2 = 1'd0;
reg  [7:0] dataw_count_sdphydataw_next_value3 = 8'd0;
reg  dataw_count_sdphydataw_next_value_ce3 = 1'd0;
reg  [2:0] builder_sdphydatar_state = 3'd0;
reg  [2:0] builder_sdphydatar_next_state = 3'd0;
reg  [9:0] datar_count_sdphydatar_next_value0 = 10'd0;
reg  datar_count_sdphydatar_next_value_ce0 = 1'd0;
reg  [31:0] datar_timeout_sdphydatar_next_value1 = 32'd0;
reg  datar_timeout_sdphydatar_next_value_ce1 = 1'd0;
reg  datar_datar_reset_sdphydatar_next_value2 = 1'd0;
reg  datar_datar_reset_sdphydatar_next_value_ce2 = 1'd0;
reg  builder_sdcore_crc16inserter_state = 1'd0;
reg  builder_sdcore_crc16inserter_next_state = 1'd0;
reg  [2:0] sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value = 3'd0;
reg  sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce = 1'd0;
reg  [2:0] builder_sdcore_fsm_state = 3'd0;
reg  [2:0] builder_sdcore_fsm_next_state = 3'd0;
reg  sdcore_cmd_done_sdcore_fsm_next_value0 = 1'd0;
reg  sdcore_cmd_done_sdcore_fsm_next_value_ce0 = 1'd0;
reg  sdcore_data_done_sdcore_fsm_next_value1 = 1'd0;
reg  sdcore_data_done_sdcore_fsm_next_value_ce1 = 1'd0;
reg  [2:0] sdcore_cmd_count_sdcore_fsm_next_value2 = 3'd0;
reg  sdcore_cmd_count_sdcore_fsm_next_value_ce2 = 1'd0;
reg  [31:0] sdcore_data_count_sdcore_fsm_next_value3 = 32'd0;
reg  sdcore_data_count_sdcore_fsm_next_value_ce3 = 1'd0;
reg  sdcore_cmd_error_sdcore_fsm_next_value4 = 1'd0;
reg  sdcore_cmd_error_sdcore_fsm_next_value_ce4 = 1'd0;
reg  sdcore_cmd_timeout_sdcore_fsm_next_value5 = 1'd0;
reg  sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 = 1'd0;
reg  sdcore_data_error_sdcore_fsm_next_value6 = 1'd0;
reg  sdcore_data_error_sdcore_fsm_next_value_ce6 = 1'd0;
reg  sdcore_data_timeout_sdcore_fsm_next_value7 = 1'd0;
reg  sdcore_data_timeout_sdcore_fsm_next_value_ce7 = 1'd0;
reg  [127:0] sdcore_cmd_response_status_sdcore_fsm_next_value8 = 128'd0;
reg  sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 = 1'd0;
reg  [1:0] builder_sdblock2memdma_state = 2'd0;
reg  [1:0] builder_sdblock2memdma_next_state = 2'd0;
reg  [31:0] sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value = 32'd0;
reg  sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce = 1'd0;
reg  builder_sdmem2blockdma_fsm_state = 1'd0;
reg  builder_sdmem2blockdma_fsm_next_state = 1'd0;
reg  [31:0] sdmem2block_dma_data_sdmem2blockdma_fsm_next_value = 32'd0;
reg  sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce = 1'd0;
reg  [1:0] builder_sdmem2blockdma_resetinserter_state = 2'd0;
reg  [1:0] builder_sdmem2blockdma_resetinserter_next_state = 2'd0;
reg  [31:0] sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value = 32'd0;
reg  sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce = 1'd0;
reg  [13:0] builder_soclinux_adr = 14'd0;
reg  builder_soclinux_we = 1'd0;
reg  [31:0] builder_soclinux_dat_w = 32'd0;
wire [31:0] builder_soclinux_dat_r;
wire [29:0] builder_soclinux_wishbone_adr;
wire [31:0] builder_soclinux_wishbone_dat_w;
reg  [31:0] builder_soclinux_wishbone_dat_r = 32'd0;
wire [3:0] builder_soclinux_wishbone_sel;
wire builder_soclinux_wishbone_cyc;
wire builder_soclinux_wishbone_stb;
reg  builder_soclinux_wishbone_ack = 1'd0;
wire builder_soclinux_wishbone_we;
wire [2:0] builder_soclinux_wishbone_cti;
wire [1:0] builder_soclinux_wishbone_bte;
reg  builder_soclinux_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg  [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg  builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [2:0] builder_request;
reg  [1:0] builder_grant = 2'd0;
reg  [5:0] builder_slave_sel = 6'd0;
reg  [5:0] builder_slave_sel_r = 6'd0;
reg  builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg  [19:0] builder_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg  builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg  builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg  builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg  builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg  builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg  [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [4:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg  builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire [7:0] builder_csr_bankarray_csrbank1_out0_r;
reg  builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire [7:0] builder_csr_bankarray_csrbank1_out0_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank2_dma_base1_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_base1_r;
reg  builder_csr_bankarray_csrbank2_dma_base1_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_base1_w;
reg  builder_csr_bankarray_csrbank2_dma_base0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_base0_r;
reg  builder_csr_bankarray_csrbank2_dma_base0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_base0_w;
reg  builder_csr_bankarray_csrbank2_dma_length0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_length0_r;
reg  builder_csr_bankarray_csrbank2_dma_length0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_length0_w;
reg  builder_csr_bankarray_csrbank2_dma_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_enable0_r;
reg  builder_csr_bankarray_csrbank2_dma_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_enable0_w;
reg  builder_csr_bankarray_csrbank2_dma_done_re = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_done_r;
reg  builder_csr_bankarray_csrbank2_dma_done_we = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_done_w;
reg  builder_csr_bankarray_csrbank2_dma_loop0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_loop0_r;
reg  builder_csr_bankarray_csrbank2_dma_loop0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_dma_loop0_w;
reg  builder_csr_bankarray_csrbank2_dma_offset_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_offset_r;
reg  builder_csr_bankarray_csrbank2_dma_offset_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_dma_offset_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
wire builder_csr_bankarray_interface3_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank3_cmd_argument0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_argument0_r;
reg  builder_csr_bankarray_csrbank3_cmd_argument0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_argument0_w;
reg  builder_csr_bankarray_csrbank3_cmd_command0_re = 1'd0;
wire [13:0] builder_csr_bankarray_csrbank3_cmd_command0_r;
reg  builder_csr_bankarray_csrbank3_cmd_command0_we = 1'd0;
wire [13:0] builder_csr_bankarray_csrbank3_cmd_command0_w;
reg  builder_csr_bankarray_csrbank3_cmd_send0_re = 1'd0;
wire builder_csr_bankarray_csrbank3_cmd_send0_r;
reg  builder_csr_bankarray_csrbank3_cmd_send0_we = 1'd0;
wire builder_csr_bankarray_csrbank3_cmd_send0_w;
reg  builder_csr_bankarray_csrbank3_cmd_response3_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response3_r;
reg  builder_csr_bankarray_csrbank3_cmd_response3_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response3_w;
reg  builder_csr_bankarray_csrbank3_cmd_response2_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response2_r;
reg  builder_csr_bankarray_csrbank3_cmd_response2_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response2_w;
reg  builder_csr_bankarray_csrbank3_cmd_response1_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response1_r;
reg  builder_csr_bankarray_csrbank3_cmd_response1_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response1_w;
reg  builder_csr_bankarray_csrbank3_cmd_response0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response0_r;
reg  builder_csr_bankarray_csrbank3_cmd_response0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_cmd_response0_w;
reg  builder_csr_bankarray_csrbank3_cmd_event_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank3_cmd_event_r;
reg  builder_csr_bankarray_csrbank3_cmd_event_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank3_cmd_event_w;
reg  builder_csr_bankarray_csrbank3_data_event_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank3_data_event_r;
reg  builder_csr_bankarray_csrbank3_data_event_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank3_data_event_w;
reg  builder_csr_bankarray_csrbank3_block_length0_re = 1'd0;
wire [9:0] builder_csr_bankarray_csrbank3_block_length0_r;
reg  builder_csr_bankarray_csrbank3_block_length0_we = 1'd0;
wire [9:0] builder_csr_bankarray_csrbank3_block_length0_w;
reg  builder_csr_bankarray_csrbank3_block_count0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_block_count0_r;
reg  builder_csr_bankarray_csrbank3_block_count0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank3_block_count0_w;
wire builder_csr_bankarray_csrbank3_sel;
wire [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
wire builder_csr_bankarray_interface4_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank4_status_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_status_r;
reg  builder_csr_bankarray_csrbank4_status_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_status_w;
reg  builder_csr_bankarray_csrbank4_pending_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_pending_r;
reg  builder_csr_bankarray_csrbank4_pending_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_pending_w;
reg  builder_csr_bankarray_csrbank4_enable0_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_enable0_r;
reg  builder_csr_bankarray_csrbank4_enable0_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank4_enable0_w;
wire builder_csr_bankarray_csrbank4_sel;
wire [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
wire builder_csr_bankarray_interface5_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank5_dma_base1_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_base1_r;
reg  builder_csr_bankarray_csrbank5_dma_base1_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_base1_w;
reg  builder_csr_bankarray_csrbank5_dma_base0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_base0_r;
reg  builder_csr_bankarray_csrbank5_dma_base0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_base0_w;
reg  builder_csr_bankarray_csrbank5_dma_length0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_length0_r;
reg  builder_csr_bankarray_csrbank5_dma_length0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_length0_w;
reg  builder_csr_bankarray_csrbank5_dma_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_enable0_r;
reg  builder_csr_bankarray_csrbank5_dma_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_enable0_w;
reg  builder_csr_bankarray_csrbank5_dma_done_re = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_done_r;
reg  builder_csr_bankarray_csrbank5_dma_done_we = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_done_w;
reg  builder_csr_bankarray_csrbank5_dma_loop0_re = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_loop0_r;
reg  builder_csr_bankarray_csrbank5_dma_loop0_we = 1'd0;
wire builder_csr_bankarray_csrbank5_dma_loop0_w;
reg  builder_csr_bankarray_csrbank5_dma_offset_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_offset_r;
reg  builder_csr_bankarray_csrbank5_dma_offset_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank5_dma_offset_w;
wire builder_csr_bankarray_csrbank5_sel;
wire [13:0] builder_csr_bankarray_interface6_bank_bus_adr;
wire builder_csr_bankarray_interface6_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface6_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank6_card_detect_re = 1'd0;
wire builder_csr_bankarray_csrbank6_card_detect_r;
reg  builder_csr_bankarray_csrbank6_card_detect_we = 1'd0;
wire builder_csr_bankarray_csrbank6_card_detect_w;
reg  builder_csr_bankarray_csrbank6_clocker_divider0_re = 1'd0;
wire [8:0] builder_csr_bankarray_csrbank6_clocker_divider0_r;
reg  builder_csr_bankarray_csrbank6_clocker_divider0_we = 1'd0;
wire [8:0] builder_csr_bankarray_csrbank6_clocker_divider0_w;
reg  builder_csr_bankarray_csrbank6_dataw_status_re = 1'd0;
wire [2:0] builder_csr_bankarray_csrbank6_dataw_status_r;
reg  builder_csr_bankarray_csrbank6_dataw_status_we = 1'd0;
wire [2:0] builder_csr_bankarray_csrbank6_dataw_status_w;
wire builder_csr_bankarray_csrbank6_sel;
wire [13:0] builder_csr_bankarray_interface7_bank_bus_adr;
wire builder_csr_bankarray_interface7_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface7_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank7_dfii_control0_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank7_dfii_control0_r;
reg  builder_csr_bankarray_csrbank7_dfii_control0_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank7_dfii_control0_w;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_command0_re = 1'd0;
wire [5:0] builder_csr_bankarray_csrbank7_dfii_pi0_command0_r;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_command0_we = 1'd0;
wire [5:0] builder_csr_bankarray_csrbank7_dfii_pi0_command0_w;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_address0_re = 1'd0;
wire [12:0] builder_csr_bankarray_csrbank7_dfii_pi0_address0_r;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_address0_we = 1'd0;
wire [12:0] builder_csr_bankarray_csrbank7_dfii_pi0_address0_w;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_r;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_w;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_re = 1'd0;
wire [15:0] builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_r;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_we = 1'd0;
wire [15:0] builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_w;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_rddata_re = 1'd0;
wire [15:0] builder_csr_bankarray_csrbank7_dfii_pi0_rddata_r;
reg  builder_csr_bankarray_csrbank7_dfii_pi0_rddata_we = 1'd0;
wire [15:0] builder_csr_bankarray_csrbank7_dfii_pi0_rddata_w;
wire builder_csr_bankarray_csrbank7_sel;
wire [13:0] builder_csr_bankarray_interface8_bank_bus_adr;
wire builder_csr_bankarray_interface8_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface8_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface8_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank8_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_load0_r;
reg  builder_csr_bankarray_csrbank8_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_load0_w;
reg  builder_csr_bankarray_csrbank8_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_reload0_r;
reg  builder_csr_bankarray_csrbank8_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_reload0_w;
reg  builder_csr_bankarray_csrbank8_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank8_en0_r;
reg  builder_csr_bankarray_csrbank8_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank8_en0_w;
reg  builder_csr_bankarray_csrbank8_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank8_update_value0_r;
reg  builder_csr_bankarray_csrbank8_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank8_update_value0_w;
reg  builder_csr_bankarray_csrbank8_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_value_r;
reg  builder_csr_bankarray_csrbank8_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank8_value_w;
reg  builder_csr_bankarray_csrbank8_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_status_r;
reg  builder_csr_bankarray_csrbank8_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_status_w;
reg  builder_csr_bankarray_csrbank8_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_pending_r;
reg  builder_csr_bankarray_csrbank8_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_pending_w;
reg  builder_csr_bankarray_csrbank8_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_enable0_r;
reg  builder_csr_bankarray_csrbank8_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank8_ev_enable0_w;
wire builder_csr_bankarray_csrbank8_sel;
wire [13:0] builder_csr_bankarray_interface9_bank_bus_adr;
wire builder_csr_bankarray_interface9_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface9_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface9_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank9_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank9_txfull_r;
reg  builder_csr_bankarray_csrbank9_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank9_txfull_w;
reg  builder_csr_bankarray_csrbank9_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank9_rxempty_r;
reg  builder_csr_bankarray_csrbank9_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank9_rxempty_w;
reg  builder_csr_bankarray_csrbank9_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_status_r;
reg  builder_csr_bankarray_csrbank9_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_status_w;
reg  builder_csr_bankarray_csrbank9_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_pending_r;
reg  builder_csr_bankarray_csrbank9_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_pending_w;
reg  builder_csr_bankarray_csrbank9_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_enable0_r;
reg  builder_csr_bankarray_csrbank9_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank9_ev_enable0_w;
reg  builder_csr_bankarray_csrbank9_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank9_txempty_r;
reg  builder_csr_bankarray_csrbank9_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank9_txempty_w;
reg  builder_csr_bankarray_csrbank9_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank9_rxfull_r;
reg  builder_csr_bankarray_csrbank9_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank9_rxfull_w;
wire builder_csr_bankarray_csrbank9_sel;
wire [13:0] builder_csr_bankarray_interface10_bank_bus_adr;
wire builder_csr_bankarray_interface10_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface10_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface10_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank10_dma_base0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_base0_r;
reg  builder_csr_bankarray_csrbank10_dma_base0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_base0_w;
reg  builder_csr_bankarray_csrbank10_dma_length0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_length0_r;
reg  builder_csr_bankarray_csrbank10_dma_length0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_length0_w;
reg  builder_csr_bankarray_csrbank10_dma_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_enable0_r;
reg  builder_csr_bankarray_csrbank10_dma_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_enable0_w;
reg  builder_csr_bankarray_csrbank10_dma_done_re = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_done_r;
reg  builder_csr_bankarray_csrbank10_dma_done_we = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_done_w;
reg  builder_csr_bankarray_csrbank10_dma_loop0_re = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_loop0_r;
reg  builder_csr_bankarray_csrbank10_dma_loop0_we = 1'd0;
wire builder_csr_bankarray_csrbank10_dma_loop0_w;
reg  builder_csr_bankarray_csrbank10_dma_offset_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_offset_r;
reg  builder_csr_bankarray_csrbank10_dma_offset_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank10_dma_offset_w;
wire builder_csr_bankarray_csrbank10_sel;
wire [13:0] builder_csr_bankarray_interface11_bank_bus_adr;
wire builder_csr_bankarray_interface11_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface11_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface11_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank11_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank11_enable0_r;
reg  builder_csr_bankarray_csrbank11_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank11_enable0_w;
reg  builder_csr_bankarray_csrbank11_hres0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hres0_r;
reg  builder_csr_bankarray_csrbank11_hres0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hres0_w;
reg  builder_csr_bankarray_csrbank11_hsync_start0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hsync_start0_r;
reg  builder_csr_bankarray_csrbank11_hsync_start0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hsync_start0_w;
reg  builder_csr_bankarray_csrbank11_hsync_end0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hsync_end0_r;
reg  builder_csr_bankarray_csrbank11_hsync_end0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hsync_end0_w;
reg  builder_csr_bankarray_csrbank11_hscan0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hscan0_r;
reg  builder_csr_bankarray_csrbank11_hscan0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_hscan0_w;
reg  builder_csr_bankarray_csrbank11_vres0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vres0_r;
reg  builder_csr_bankarray_csrbank11_vres0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vres0_w;
reg  builder_csr_bankarray_csrbank11_vsync_start0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vsync_start0_r;
reg  builder_csr_bankarray_csrbank11_vsync_start0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vsync_start0_w;
reg  builder_csr_bankarray_csrbank11_vsync_end0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vsync_end0_r;
reg  builder_csr_bankarray_csrbank11_vsync_end0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vsync_end0_w;
reg  builder_csr_bankarray_csrbank11_vscan0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vscan0_r;
reg  builder_csr_bankarray_csrbank11_vscan0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank11_vscan0_w;
wire builder_csr_bankarray_csrbank11_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg  [1:0] builder_state = 2'd0;
reg  [1:0] builder_next_state = 2'd0;
reg  [31:0] builder_soclinux_dat_w_next_value0 = 32'd0;
reg  builder_soclinux_dat_w_next_value_ce0 = 1'd0;
reg  [13:0] builder_soclinux_adr_next_value1 = 14'd0;
reg  builder_soclinux_adr_next_value_ce1 = 1'd0;
reg  builder_soclinux_we_next_value2 = 1'd0;
reg  builder_soclinux_we_next_value_ce2 = 1'd0;
reg  builder_comb_rhs_array_muxed0 = 1'd0;
reg  [12:0] builder_comb_rhs_array_muxed1 = 13'd0;
reg  [1:0] builder_comb_rhs_array_muxed2 = 2'd0;
reg  builder_comb_rhs_array_muxed3 = 1'd0;
reg  builder_comb_rhs_array_muxed4 = 1'd0;
reg  builder_comb_rhs_array_muxed5 = 1'd0;
reg  builder_comb_t_array_muxed0 = 1'd0;
reg  builder_comb_t_array_muxed1 = 1'd0;
reg  builder_comb_t_array_muxed2 = 1'd0;
reg  builder_comb_rhs_array_muxed6 = 1'd0;
reg  [12:0] builder_comb_rhs_array_muxed7 = 13'd0;
reg  [1:0] builder_comb_rhs_array_muxed8 = 2'd0;
reg  builder_comb_rhs_array_muxed9 = 1'd0;
reg  builder_comb_rhs_array_muxed10 = 1'd0;
reg  builder_comb_rhs_array_muxed11 = 1'd0;
reg  builder_comb_t_array_muxed3 = 1'd0;
reg  builder_comb_t_array_muxed4 = 1'd0;
reg  builder_comb_t_array_muxed5 = 1'd0;
reg  [21:0] builder_comb_rhs_array_muxed12 = 22'd0;
reg  builder_comb_rhs_array_muxed13 = 1'd0;
reg  builder_comb_rhs_array_muxed14 = 1'd0;
reg  [21:0] builder_comb_rhs_array_muxed15 = 22'd0;
reg  builder_comb_rhs_array_muxed16 = 1'd0;
reg  builder_comb_rhs_array_muxed17 = 1'd0;
reg  [21:0] builder_comb_rhs_array_muxed18 = 22'd0;
reg  builder_comb_rhs_array_muxed19 = 1'd0;
reg  builder_comb_rhs_array_muxed20 = 1'd0;
reg  [21:0] builder_comb_rhs_array_muxed21 = 22'd0;
reg  builder_comb_rhs_array_muxed22 = 1'd0;
reg  builder_comb_rhs_array_muxed23 = 1'd0;
reg  [31:0] builder_comb_rhs_array_muxed24 = 32'd0;
reg  [31:0] builder_comb_rhs_array_muxed25 = 32'd0;
reg  [3:0] builder_comb_rhs_array_muxed26 = 4'd0;
reg  builder_comb_rhs_array_muxed27 = 1'd0;
reg  builder_comb_rhs_array_muxed28 = 1'd0;
reg  builder_comb_rhs_array_muxed29 = 1'd0;
reg  [2:0] builder_comb_rhs_array_muxed30 = 3'd0;
reg  [1:0] builder_comb_rhs_array_muxed31 = 2'd0;
reg  [9:0] builder_sync_f_array_muxed0 = 10'd0;
reg  [9:0] builder_sync_f_array_muxed1 = 10'd0;
reg  [9:0] builder_sync_f_array_muxed2 = 10'd0;
reg  [1:0] builder_sync_rhs_array_muxed0 = 2'd0;
reg  [12:0] builder_sync_rhs_array_muxed1 = 13'd0;
reg  builder_sync_rhs_array_muxed2 = 1'd0;
reg  builder_sync_rhs_array_muxed3 = 1'd0;
reg  builder_sync_rhs_array_muxed4 = 1'd0;
reg  builder_sync_rhs_array_muxed5 = 1'd0;
reg  builder_sync_rhs_array_muxed6 = 1'd0;
wire builder_rst10;
wire builder_rst11;
wire builder_rst12;
wire builder_rst13;
reg  builder_multiregimpl0_regs0 = 1'd0;
reg  builder_multiregimpl0_regs1 = 1'd0;
wire builder_inferedsdrtristate0__o;
reg  builder_inferedsdrtristate0_oe = 1'd0;
wire builder_inferedsdrtristate0__i;
wire sdrio_clk;
wire builder_inferedsdrtristate1__o;
reg  builder_inferedsdrtristate1_oe = 1'd0;
wire builder_inferedsdrtristate1__i;
wire sdrio_clk_1;
wire builder_inferedsdrtristate2__o;
reg  builder_inferedsdrtristate2_oe = 1'd0;
wire builder_inferedsdrtristate2__i;
wire sdrio_clk_2;
wire builder_inferedsdrtristate3__o;
reg  builder_inferedsdrtristate3_oe = 1'd0;
wire builder_inferedsdrtristate3__i;
wire sdrio_clk_3;
wire builder_inferedsdrtristate4__o;
reg  builder_inferedsdrtristate4_oe = 1'd0;
wire builder_inferedsdrtristate4__i;
wire sdrio_clk_4;
wire builder_inferedsdrtristate5__o;
reg  builder_inferedsdrtristate5_oe = 1'd0;
wire builder_inferedsdrtristate5__i;
wire sdrio_clk_5;
wire builder_inferedsdrtristate6__o;
reg  builder_inferedsdrtristate6_oe = 1'd0;
wire builder_inferedsdrtristate6__i;
wire sdrio_clk_6;
wire builder_inferedsdrtristate7__o;
reg  builder_inferedsdrtristate7_oe = 1'd0;
wire builder_inferedsdrtristate7__i;
wire sdrio_clk_7;
wire builder_inferedsdrtristate8__o;
reg  builder_inferedsdrtristate8_oe = 1'd0;
wire builder_inferedsdrtristate8__i;
wire sdrio_clk_8;
wire builder_inferedsdrtristate9__o;
reg  builder_inferedsdrtristate9_oe = 1'd0;
wire builder_inferedsdrtristate9__i;
wire sdrio_clk_9;
wire builder_inferedsdrtristate10__o;
reg  builder_inferedsdrtristate10_oe = 1'd0;
wire builder_inferedsdrtristate10__i;
wire sdrio_clk_10;
wire builder_inferedsdrtristate11__o;
reg  builder_inferedsdrtristate11_oe = 1'd0;
wire builder_inferedsdrtristate11__i;
wire sdrio_clk_11;
wire builder_inferedsdrtristate12__o;
reg  builder_inferedsdrtristate12_oe = 1'd0;
wire builder_inferedsdrtristate12__i;
wire sdrio_clk_12;
wire builder_inferedsdrtristate13__o;
reg  builder_inferedsdrtristate13_oe = 1'd0;
wire builder_inferedsdrtristate13__i;
wire sdrio_clk_13;
wire builder_inferedsdrtristate14__o;
reg  builder_inferedsdrtristate14_oe = 1'd0;
wire builder_inferedsdrtristate14__i;
wire sdrio_clk_14;
wire builder_inferedsdrtristate15__o;
reg  builder_inferedsdrtristate15_oe = 1'd0;
wire builder_inferedsdrtristate15__i;
wire sdrio_clk_15;
reg  [2:0] builder_multiregimpl1_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl1_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl2_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl2_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl3_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl3_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl4_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl4_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl5_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl5_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl6_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl6_regs1 = 3'd0;
reg  builder_multiregimpl7_regs0 = 1'd0;
reg  builder_multiregimpl7_regs1 = 1'd0;
reg  [11:0] builder_multiregimpl8_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl8_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl9_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl9_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl10_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl10_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl11_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl11_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl12_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl12_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl13_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl13_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl14_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl14_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl15_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl15_regs1 = 12'd0;
reg  [2:0] builder_multiregimpl16_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl16_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl17_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl17_regs1 = 3'd0;
wire builder_inferedsdrtristate16__o;
reg  builder_inferedsdrtristate16_oe = 1'd0;
wire builder_inferedsdrtristate16__i;
wire sdrio_clk_16;
wire builder_inferedsdrtristate17__o;
reg  builder_inferedsdrtristate17_oe = 1'd0;
wire builder_inferedsdrtristate17__i;
wire sdrio_clk_17;
wire builder_inferedsdrtristate18__o;
reg  builder_inferedsdrtristate18_oe = 1'd0;
wire builder_inferedsdrtristate18__i;
wire sdrio_clk_18;
wire builder_inferedsdrtristate19__o;
reg  builder_inferedsdrtristate19_oe = 1'd0;
wire builder_inferedsdrtristate19__i;
wire sdrio_clk_19;
wire builder_inferedsdrtristate20__o;
reg  builder_inferedsdrtristate20_oe = 1'd0;
wire builder_inferedsdrtristate20__i;
wire sdrio_clk_20;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_soclinux_reset = (main_soclinux_soc_rst | main_soclinux_cpu_rst);
assign main_vfb_vtg_sink_valid = main_vtg_source_valid;
assign main_vtg_source_ready = main_vfb_vtg_sink_ready;
assign main_vfb_vtg_sink_first = main_vtg_source_first;
assign main_vfb_vtg_sink_last = main_vtg_source_last;
assign main_vfb_vtg_sink_payload_hsync = main_vtg_source_payload_hsync;
assign main_vfb_vtg_sink_payload_vsync = main_vtg_source_payload_vsync;
assign main_vfb_vtg_sink_payload_de = main_vtg_source_payload_de;
assign main_vfb_vtg_sink_payload_hres = main_vtg_source_payload_hres;
assign main_vfb_vtg_sink_payload_vres = main_vtg_source_payload_vres;
assign main_vfb_vtg_sink_payload_hcount = main_vtg_source_payload_hcount;
assign main_vfb_vtg_sink_payload_vcount = main_vtg_source_payload_vcount;
assign main_sink_valid = main_vfb_source_valid;
assign main_vfb_source_ready = main_sink_ready;
assign main_sink_first = main_vfb_source_first;
assign main_sink_last = main_vfb_source_last;
assign main_sink_payload_hsync = main_vfb_source_payload_hsync;
assign main_sink_payload_vsync = main_vfb_source_payload_vsync;
assign main_sink_payload_de = main_vfb_source_payload_de;
assign main_sink_payload_r = main_vfb_source_payload_r;
assign main_sink_payload_g = main_vfb_source_payload_g;
assign main_sink_payload_b = main_vfb_source_payload_b;
assign sdblock2mem_sink_sink_valid0 = sdcore_source_source_valid0;
assign sdcore_source_source_ready0 = sdblock2mem_sink_sink_ready0;
assign sdblock2mem_sink_sink_first = sdcore_source_source_first0;
assign sdblock2mem_sink_sink_last0 = sdcore_source_source_last0;
assign sdblock2mem_sink_sink_payload_data0 = sdcore_source_source_payload_data0;
assign sdcore_sink_sink_valid0 = sdmem2block_source_source_valid0;
assign sdmem2block_source_source_ready0 = sdcore_sink_sink_ready0;
assign sdcore_sink_sink_first0 = sdmem2block_source_source_first0;
assign sdcore_sink_sink_last0 = sdmem2block_source_source_last0;
assign sdcore_sink_sink_payload_data0 = sdmem2block_source_source_payload_data0;
assign block2mem_dma_trigger = sdblock2mem_irq;
assign mem2block_dma_trigger = sdmem2block_irq;
assign card_detect_trigger = card_detect_irq;
assign cmd_done_trigger = sdcore_csrfield_done0;
always @(*) begin
	main_rst <= 1'd0;
	if (main_soclinux_soc_rst) begin
		main_rst <= 1'd1;
	end
end
assign main_soclinux_bus_error = builder_error;
always @(*) begin
	main_soclinux_interrupt <= 32'd0;
	main_soclinux_interrupt[2] <= sdirq_irq;
	main_soclinux_interrupt[1] <= main_soclinux_timer_irq;
	main_soclinux_interrupt[0] <= main_soclinux_uart_irq;
end
assign main_pll_reset = (rst | main_rst);
assign main_video_pll_reset = (rst | main_rst);
assign wifi_gpio0 = 1'd1;
assign main_ecp5pll0_clkin = clk25;
assign sys_clk = main_ecp5pll0_clkout0;
assign sys_ps_clk = main_ecp5pll0_clkout1;
assign main_pll_locked = (builder_ecp5pll0_locked & (~main_pll_reset));
assign main_ecp5pll1_clkin = clk25;
assign hdmi_clk = main_ecp5pll1_clkout0;
assign hdmi5x_clk = main_ecp5pll1_clkout1;
assign main_video_pll_locked = (builder_ecp5pll1_locked & (~main_video_pll_reset));
assign main_soclinux_bus_errors_status = main_soclinux_bus_errors;
assign main_soclinux_soclinux_adr = main_soclinux_soclinux_ram_bus_adr[13:0];
assign main_soclinux_soclinux_ram_bus_dat_r = main_soclinux_soclinux_dat_r;
always @(*) begin
	main_soclinux_ram_we <= 4'd0;
	main_soclinux_ram_we[0] <= (((main_soclinux_ram_bus_ram_bus_cyc & main_soclinux_ram_bus_ram_bus_stb) & main_soclinux_ram_bus_ram_bus_we) & main_soclinux_ram_bus_ram_bus_sel[0]);
	main_soclinux_ram_we[1] <= (((main_soclinux_ram_bus_ram_bus_cyc & main_soclinux_ram_bus_ram_bus_stb) & main_soclinux_ram_bus_ram_bus_we) & main_soclinux_ram_bus_ram_bus_sel[1]);
	main_soclinux_ram_we[2] <= (((main_soclinux_ram_bus_ram_bus_cyc & main_soclinux_ram_bus_ram_bus_stb) & main_soclinux_ram_bus_ram_bus_we) & main_soclinux_ram_bus_ram_bus_sel[2]);
	main_soclinux_ram_we[3] <= (((main_soclinux_ram_bus_ram_bus_cyc & main_soclinux_ram_bus_ram_bus_stb) & main_soclinux_ram_bus_ram_bus_we) & main_soclinux_ram_bus_ram_bus_sel[3]);
end
assign main_soclinux_ram_adr = main_soclinux_ram_bus_ram_bus_adr[10:0];
assign main_soclinux_ram_bus_ram_bus_dat_r = main_soclinux_ram_dat_r;
assign main_soclinux_ram_dat_w = main_soclinux_ram_bus_ram_bus_dat_w;
always @(*) begin
	builder_rs232phytx_next_state <= 1'd0;
	main_soclinux_tx_count_rs232phytx_next_value0 <= 4'd0;
	main_soclinux_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	main_soclinux_serial_tx_rs232phytx_next_value1 <= 1'd0;
	main_soclinux_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	main_soclinux_tx_sink_ready <= 1'd0;
	main_soclinux_tx_data_rs232phytx_next_value2 <= 8'd0;
	main_soclinux_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	main_soclinux_tx_enable <= 1'd0;
	builder_rs232phytx_next_state <= builder_rs232phytx_state;
	case (builder_rs232phytx_state)
		1'd1: begin
			main_soclinux_tx_enable <= 1'd1;
			if (main_soclinux_tx_tick) begin
				main_soclinux_serial_tx_rs232phytx_next_value1 <= main_soclinux_tx_data;
				main_soclinux_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_soclinux_tx_count_rs232phytx_next_value0 <= (main_soclinux_tx_count + 1'd1);
				main_soclinux_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				main_soclinux_tx_data_rs232phytx_next_value2 <= {1'd1, main_soclinux_tx_data[7:1]};
				main_soclinux_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((main_soclinux_tx_count == 4'd9)) begin
					main_soclinux_tx_sink_ready <= 1'd1;
					builder_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_soclinux_tx_count_rs232phytx_next_value0 <= 1'd0;
			main_soclinux_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			main_soclinux_serial_tx_rs232phytx_next_value1 <= 1'd1;
			main_soclinux_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (main_soclinux_tx_sink_valid) begin
				main_soclinux_serial_tx_rs232phytx_next_value1 <= 1'd0;
				main_soclinux_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_soclinux_tx_data_rs232phytx_next_value2 <= main_soclinux_tx_sink_payload_data;
				main_soclinux_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				builder_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_rs232phyrx_next_state <= 1'd0;
	main_soclinux_rx_count_rs232phyrx_next_value0 <= 4'd0;
	main_soclinux_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	main_soclinux_rx_source_valid <= 1'd0;
	main_soclinux_rx_data_rs232phyrx_next_value1 <= 8'd0;
	main_soclinux_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	main_soclinux_rx_source_payload_data <= 8'd0;
	main_soclinux_rx_enable <= 1'd0;
	builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
	case (builder_rs232phyrx_state)
		1'd1: begin
			main_soclinux_rx_enable <= 1'd1;
			if (main_soclinux_rx_tick) begin
				main_soclinux_rx_count_rs232phyrx_next_value0 <= (main_soclinux_rx_count + 1'd1);
				main_soclinux_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				main_soclinux_rx_data_rs232phyrx_next_value1 <= {main_soclinux_rx_rx, main_soclinux_rx_data[7:1]};
				main_soclinux_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((main_soclinux_rx_count == 4'd9)) begin
					main_soclinux_rx_source_valid <= (main_soclinux_rx_rx == 1'd1);
					main_soclinux_rx_source_payload_data <= main_soclinux_rx_data;
					builder_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_soclinux_rx_count_rs232phyrx_next_value0 <= 1'd0;
			main_soclinux_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((main_soclinux_rx_rx == 1'd0) & (main_soclinux_rx_rx_d == 1'd1))) begin
				builder_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_soclinux_uart_uart_sink_valid = main_soclinux_rx_source_valid;
assign main_soclinux_rx_source_ready = main_soclinux_uart_uart_sink_ready;
assign main_soclinux_uart_uart_sink_first = main_soclinux_rx_source_first;
assign main_soclinux_uart_uart_sink_last = main_soclinux_rx_source_last;
assign main_soclinux_uart_uart_sink_payload_data = main_soclinux_rx_source_payload_data;
assign main_soclinux_tx_sink_valid = main_soclinux_uart_uart_source_valid;
assign main_soclinux_uart_uart_source_ready = main_soclinux_tx_sink_ready;
assign main_soclinux_tx_sink_first = main_soclinux_uart_uart_source_first;
assign main_soclinux_tx_sink_last = main_soclinux_uart_uart_source_last;
assign main_soclinux_tx_sink_payload_data = main_soclinux_uart_uart_source_payload_data;
assign main_soclinux_uart_tx_fifo_sink_valid = main_soclinux_uart_rxtx_re;
assign main_soclinux_uart_tx_fifo_sink_payload_data = main_soclinux_uart_rxtx_r;
assign main_soclinux_uart_uart_source_valid = main_soclinux_uart_tx_fifo_source_valid;
assign main_soclinux_uart_tx_fifo_source_ready = main_soclinux_uart_uart_source_ready;
assign main_soclinux_uart_uart_source_first = main_soclinux_uart_tx_fifo_source_first;
assign main_soclinux_uart_uart_source_last = main_soclinux_uart_tx_fifo_source_last;
assign main_soclinux_uart_uart_source_payload_data = main_soclinux_uart_tx_fifo_source_payload_data;
assign main_soclinux_uart_txfull_status = (~main_soclinux_uart_tx_fifo_sink_ready);
assign main_soclinux_uart_txempty_status = (~main_soclinux_uart_tx_fifo_source_valid);
assign main_soclinux_uart_tx_trigger = main_soclinux_uart_tx_fifo_sink_ready;
assign main_soclinux_uart_rx_fifo_sink_valid = main_soclinux_uart_uart_sink_valid;
assign main_soclinux_uart_uart_sink_ready = main_soclinux_uart_rx_fifo_sink_ready;
assign main_soclinux_uart_rx_fifo_sink_first = main_soclinux_uart_uart_sink_first;
assign main_soclinux_uart_rx_fifo_sink_last = main_soclinux_uart_uart_sink_last;
assign main_soclinux_uart_rx_fifo_sink_payload_data = main_soclinux_uart_uart_sink_payload_data;
assign main_soclinux_uart_rxtx_w = main_soclinux_uart_rx_fifo_source_payload_data;
assign main_soclinux_uart_rx_fifo_source_ready = (main_soclinux_uart_rx_clear | (1'd0 & main_soclinux_uart_rxtx_we));
assign main_soclinux_uart_rxempty_status = (~main_soclinux_uart_rx_fifo_source_valid);
assign main_soclinux_uart_rxfull_status = (~main_soclinux_uart_rx_fifo_sink_ready);
assign main_soclinux_uart_rx_trigger = main_soclinux_uart_rx_fifo_source_valid;
assign main_soclinux_uart_tx0 = main_soclinux_uart_tx_status;
assign main_soclinux_uart_tx1 = main_soclinux_uart_tx_pending;
always @(*) begin
	main_soclinux_uart_tx_clear <= 1'd0;
	if ((main_soclinux_uart_pending_re & main_soclinux_uart_pending_r[0])) begin
		main_soclinux_uart_tx_clear <= 1'd1;
	end
end
assign main_soclinux_uart_rx0 = main_soclinux_uart_rx_status;
assign main_soclinux_uart_rx1 = main_soclinux_uart_rx_pending;
always @(*) begin
	main_soclinux_uart_rx_clear <= 1'd0;
	if ((main_soclinux_uart_pending_re & main_soclinux_uart_pending_r[1])) begin
		main_soclinux_uart_rx_clear <= 1'd1;
	end
end
assign main_soclinux_uart_irq = ((main_soclinux_uart_pending_status[0] & main_soclinux_uart_enable_storage[0]) | (main_soclinux_uart_pending_status[1] & main_soclinux_uart_enable_storage[1]));
assign main_soclinux_uart_tx_status = main_soclinux_uart_tx_trigger;
assign main_soclinux_uart_rx_status = main_soclinux_uart_rx_trigger;
assign main_soclinux_uart_tx_fifo_syncfifo_din = {main_soclinux_uart_tx_fifo_fifo_in_last, main_soclinux_uart_tx_fifo_fifo_in_first, main_soclinux_uart_tx_fifo_fifo_in_payload_data};
assign {main_soclinux_uart_tx_fifo_fifo_out_last, main_soclinux_uart_tx_fifo_fifo_out_first, main_soclinux_uart_tx_fifo_fifo_out_payload_data} = main_soclinux_uart_tx_fifo_syncfifo_dout;
assign main_soclinux_uart_tx_fifo_sink_ready = main_soclinux_uart_tx_fifo_syncfifo_writable;
assign main_soclinux_uart_tx_fifo_syncfifo_we = main_soclinux_uart_tx_fifo_sink_valid;
assign main_soclinux_uart_tx_fifo_fifo_in_first = main_soclinux_uart_tx_fifo_sink_first;
assign main_soclinux_uart_tx_fifo_fifo_in_last = main_soclinux_uart_tx_fifo_sink_last;
assign main_soclinux_uart_tx_fifo_fifo_in_payload_data = main_soclinux_uart_tx_fifo_sink_payload_data;
assign main_soclinux_uart_tx_fifo_source_valid = main_soclinux_uart_tx_fifo_readable;
assign main_soclinux_uart_tx_fifo_source_first = main_soclinux_uart_tx_fifo_fifo_out_first;
assign main_soclinux_uart_tx_fifo_source_last = main_soclinux_uart_tx_fifo_fifo_out_last;
assign main_soclinux_uart_tx_fifo_source_payload_data = main_soclinux_uart_tx_fifo_fifo_out_payload_data;
assign main_soclinux_uart_tx_fifo_re = main_soclinux_uart_tx_fifo_source_ready;
assign main_soclinux_uart_tx_fifo_syncfifo_re = (main_soclinux_uart_tx_fifo_syncfifo_readable & ((~main_soclinux_uart_tx_fifo_readable) | main_soclinux_uart_tx_fifo_re));
assign main_soclinux_uart_tx_fifo_level1 = (main_soclinux_uart_tx_fifo_level0 + main_soclinux_uart_tx_fifo_readable);
always @(*) begin
	main_soclinux_uart_tx_fifo_wrport_adr <= 4'd0;
	if (main_soclinux_uart_tx_fifo_replace) begin
		main_soclinux_uart_tx_fifo_wrport_adr <= (main_soclinux_uart_tx_fifo_produce - 1'd1);
	end else begin
		main_soclinux_uart_tx_fifo_wrport_adr <= main_soclinux_uart_tx_fifo_produce;
	end
end
assign main_soclinux_uart_tx_fifo_wrport_dat_w = main_soclinux_uart_tx_fifo_syncfifo_din;
assign main_soclinux_uart_tx_fifo_wrport_we = (main_soclinux_uart_tx_fifo_syncfifo_we & (main_soclinux_uart_tx_fifo_syncfifo_writable | main_soclinux_uart_tx_fifo_replace));
assign main_soclinux_uart_tx_fifo_do_read = (main_soclinux_uart_tx_fifo_syncfifo_readable & main_soclinux_uart_tx_fifo_syncfifo_re);
assign main_soclinux_uart_tx_fifo_rdport_adr = main_soclinux_uart_tx_fifo_consume;
assign main_soclinux_uart_tx_fifo_syncfifo_dout = main_soclinux_uart_tx_fifo_rdport_dat_r;
assign main_soclinux_uart_tx_fifo_rdport_re = main_soclinux_uart_tx_fifo_do_read;
assign main_soclinux_uart_tx_fifo_syncfifo_writable = (main_soclinux_uart_tx_fifo_level0 != 5'd16);
assign main_soclinux_uart_tx_fifo_syncfifo_readable = (main_soclinux_uart_tx_fifo_level0 != 1'd0);
assign main_soclinux_uart_rx_fifo_syncfifo_din = {main_soclinux_uart_rx_fifo_fifo_in_last, main_soclinux_uart_rx_fifo_fifo_in_first, main_soclinux_uart_rx_fifo_fifo_in_payload_data};
assign {main_soclinux_uart_rx_fifo_fifo_out_last, main_soclinux_uart_rx_fifo_fifo_out_first, main_soclinux_uart_rx_fifo_fifo_out_payload_data} = main_soclinux_uart_rx_fifo_syncfifo_dout;
assign main_soclinux_uart_rx_fifo_sink_ready = main_soclinux_uart_rx_fifo_syncfifo_writable;
assign main_soclinux_uart_rx_fifo_syncfifo_we = main_soclinux_uart_rx_fifo_sink_valid;
assign main_soclinux_uart_rx_fifo_fifo_in_first = main_soclinux_uart_rx_fifo_sink_first;
assign main_soclinux_uart_rx_fifo_fifo_in_last = main_soclinux_uart_rx_fifo_sink_last;
assign main_soclinux_uart_rx_fifo_fifo_in_payload_data = main_soclinux_uart_rx_fifo_sink_payload_data;
assign main_soclinux_uart_rx_fifo_source_valid = main_soclinux_uart_rx_fifo_readable;
assign main_soclinux_uart_rx_fifo_source_first = main_soclinux_uart_rx_fifo_fifo_out_first;
assign main_soclinux_uart_rx_fifo_source_last = main_soclinux_uart_rx_fifo_fifo_out_last;
assign main_soclinux_uart_rx_fifo_source_payload_data = main_soclinux_uart_rx_fifo_fifo_out_payload_data;
assign main_soclinux_uart_rx_fifo_re = main_soclinux_uart_rx_fifo_source_ready;
assign main_soclinux_uart_rx_fifo_syncfifo_re = (main_soclinux_uart_rx_fifo_syncfifo_readable & ((~main_soclinux_uart_rx_fifo_readable) | main_soclinux_uart_rx_fifo_re));
assign main_soclinux_uart_rx_fifo_level1 = (main_soclinux_uart_rx_fifo_level0 + main_soclinux_uart_rx_fifo_readable);
always @(*) begin
	main_soclinux_uart_rx_fifo_wrport_adr <= 4'd0;
	if (main_soclinux_uart_rx_fifo_replace) begin
		main_soclinux_uart_rx_fifo_wrport_adr <= (main_soclinux_uart_rx_fifo_produce - 1'd1);
	end else begin
		main_soclinux_uart_rx_fifo_wrport_adr <= main_soclinux_uart_rx_fifo_produce;
	end
end
assign main_soclinux_uart_rx_fifo_wrport_dat_w = main_soclinux_uart_rx_fifo_syncfifo_din;
assign main_soclinux_uart_rx_fifo_wrport_we = (main_soclinux_uart_rx_fifo_syncfifo_we & (main_soclinux_uart_rx_fifo_syncfifo_writable | main_soclinux_uart_rx_fifo_replace));
assign main_soclinux_uart_rx_fifo_do_read = (main_soclinux_uart_rx_fifo_syncfifo_readable & main_soclinux_uart_rx_fifo_syncfifo_re);
assign main_soclinux_uart_rx_fifo_rdport_adr = main_soclinux_uart_rx_fifo_consume;
assign main_soclinux_uart_rx_fifo_syncfifo_dout = main_soclinux_uart_rx_fifo_rdport_dat_r;
assign main_soclinux_uart_rx_fifo_rdport_re = main_soclinux_uart_rx_fifo_do_read;
assign main_soclinux_uart_rx_fifo_syncfifo_writable = (main_soclinux_uart_rx_fifo_level0 != 5'd16);
assign main_soclinux_uart_rx_fifo_syncfifo_readable = (main_soclinux_uart_rx_fifo_level0 != 1'd0);
assign main_soclinux_timer_zero_trigger = (main_soclinux_timer_value == 1'd0);
assign main_soclinux_timer_zero0 = main_soclinux_timer_zero_status;
assign main_soclinux_timer_zero1 = main_soclinux_timer_zero_pending;
always @(*) begin
	main_soclinux_timer_zero_clear <= 1'd0;
	if ((main_soclinux_timer_pending_re & main_soclinux_timer_pending_r)) begin
		main_soclinux_timer_zero_clear <= 1'd1;
	end
end
assign main_soclinux_timer_irq = (main_soclinux_timer_pending_status & main_soclinux_timer_enable_storage);
assign main_soclinux_timer_zero_status = main_soclinux_timer_zero_trigger;
assign main_dfi_p0_address = main_sdram_master_p0_address;
assign main_dfi_p0_bank = main_sdram_master_p0_bank;
assign main_dfi_p0_cas_n = main_sdram_master_p0_cas_n;
assign main_dfi_p0_cs_n = main_sdram_master_p0_cs_n;
assign main_dfi_p0_ras_n = main_sdram_master_p0_ras_n;
assign main_dfi_p0_we_n = main_sdram_master_p0_we_n;
assign main_dfi_p0_cke = main_sdram_master_p0_cke;
assign main_dfi_p0_odt = main_sdram_master_p0_odt;
assign main_dfi_p0_reset_n = main_sdram_master_p0_reset_n;
assign main_dfi_p0_act_n = main_sdram_master_p0_act_n;
assign main_dfi_p0_wrdata = main_sdram_master_p0_wrdata;
assign main_dfi_p0_wrdata_en = main_sdram_master_p0_wrdata_en;
assign main_dfi_p0_wrdata_mask = main_sdram_master_p0_wrdata_mask;
assign main_dfi_p0_rddata_en = main_sdram_master_p0_rddata_en;
assign main_sdram_master_p0_rddata = main_dfi_p0_rddata;
assign main_sdram_master_p0_rddata_valid = main_dfi_p0_rddata_valid;
assign main_sdram_slave_p0_address = main_sdram_dfi_p0_address;
assign main_sdram_slave_p0_bank = main_sdram_dfi_p0_bank;
assign main_sdram_slave_p0_cas_n = main_sdram_dfi_p0_cas_n;
assign main_sdram_slave_p0_cs_n = main_sdram_dfi_p0_cs_n;
assign main_sdram_slave_p0_ras_n = main_sdram_dfi_p0_ras_n;
assign main_sdram_slave_p0_we_n = main_sdram_dfi_p0_we_n;
assign main_sdram_slave_p0_cke = main_sdram_dfi_p0_cke;
assign main_sdram_slave_p0_odt = main_sdram_dfi_p0_odt;
assign main_sdram_slave_p0_reset_n = main_sdram_dfi_p0_reset_n;
assign main_sdram_slave_p0_act_n = main_sdram_dfi_p0_act_n;
assign main_sdram_slave_p0_wrdata = main_sdram_dfi_p0_wrdata;
assign main_sdram_slave_p0_wrdata_en = main_sdram_dfi_p0_wrdata_en;
assign main_sdram_slave_p0_wrdata_mask = main_sdram_dfi_p0_wrdata_mask;
assign main_sdram_slave_p0_rddata_en = main_sdram_dfi_p0_rddata_en;
assign main_sdram_dfi_p0_rddata = main_sdram_slave_p0_rddata;
assign main_sdram_dfi_p0_rddata_valid = main_sdram_slave_p0_rddata_valid;
always @(*) begin
	main_sdram_slave_p0_rddata <= 16'd0;
	main_sdram_slave_p0_rddata_valid <= 1'd0;
	main_sdram_master_p0_address <= 13'd0;
	main_sdram_csr_dfi_p0_rddata <= 16'd0;
	main_sdram_master_p0_bank <= 2'd0;
	main_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
	main_sdram_master_p0_cas_n <= 1'd1;
	main_sdram_master_p0_cs_n <= 1'd1;
	main_sdram_master_p0_ras_n <= 1'd1;
	main_sdram_master_p0_we_n <= 1'd1;
	main_sdram_master_p0_cke <= 1'd0;
	main_sdram_master_p0_odt <= 1'd0;
	main_sdram_master_p0_reset_n <= 1'd0;
	main_sdram_master_p0_act_n <= 1'd1;
	main_sdram_master_p0_wrdata <= 16'd0;
	main_sdram_master_p0_wrdata_en <= 1'd0;
	main_sdram_master_p0_wrdata_mask <= 2'd0;
	main_sdram_master_p0_rddata_en <= 1'd0;
	main_sdram_ext_dfi_p0_rddata <= 16'd0;
	main_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_address <= main_sdram_ext_dfi_p0_address;
			main_sdram_master_p0_bank <= main_sdram_ext_dfi_p0_bank;
			main_sdram_master_p0_cas_n <= main_sdram_ext_dfi_p0_cas_n;
			main_sdram_master_p0_cs_n <= main_sdram_ext_dfi_p0_cs_n;
			main_sdram_master_p0_ras_n <= main_sdram_ext_dfi_p0_ras_n;
			main_sdram_master_p0_we_n <= main_sdram_ext_dfi_p0_we_n;
			main_sdram_master_p0_cke <= main_sdram_ext_dfi_p0_cke;
			main_sdram_master_p0_odt <= main_sdram_ext_dfi_p0_odt;
			main_sdram_master_p0_reset_n <= main_sdram_ext_dfi_p0_reset_n;
			main_sdram_master_p0_act_n <= main_sdram_ext_dfi_p0_act_n;
			main_sdram_master_p0_wrdata <= main_sdram_ext_dfi_p0_wrdata;
			main_sdram_master_p0_wrdata_en <= main_sdram_ext_dfi_p0_wrdata_en;
			main_sdram_master_p0_wrdata_mask <= main_sdram_ext_dfi_p0_wrdata_mask;
			main_sdram_master_p0_rddata_en <= main_sdram_ext_dfi_p0_rddata_en;
			main_sdram_ext_dfi_p0_rddata <= main_sdram_master_p0_rddata;
			main_sdram_ext_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
		end else begin
			main_sdram_master_p0_address <= main_sdram_slave_p0_address;
			main_sdram_master_p0_bank <= main_sdram_slave_p0_bank;
			main_sdram_master_p0_cas_n <= main_sdram_slave_p0_cas_n;
			main_sdram_master_p0_cs_n <= main_sdram_slave_p0_cs_n;
			main_sdram_master_p0_ras_n <= main_sdram_slave_p0_ras_n;
			main_sdram_master_p0_we_n <= main_sdram_slave_p0_we_n;
			main_sdram_master_p0_cke <= main_sdram_slave_p0_cke;
			main_sdram_master_p0_odt <= main_sdram_slave_p0_odt;
			main_sdram_master_p0_reset_n <= main_sdram_slave_p0_reset_n;
			main_sdram_master_p0_act_n <= main_sdram_slave_p0_act_n;
			main_sdram_master_p0_wrdata <= main_sdram_slave_p0_wrdata;
			main_sdram_master_p0_wrdata_en <= main_sdram_slave_p0_wrdata_en;
			main_sdram_master_p0_wrdata_mask <= main_sdram_slave_p0_wrdata_mask;
			main_sdram_master_p0_rddata_en <= main_sdram_slave_p0_rddata_en;
			main_sdram_slave_p0_rddata <= main_sdram_master_p0_rddata;
			main_sdram_slave_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
		end
	end else begin
		main_sdram_master_p0_address <= main_sdram_csr_dfi_p0_address;
		main_sdram_master_p0_bank <= main_sdram_csr_dfi_p0_bank;
		main_sdram_master_p0_cas_n <= main_sdram_csr_dfi_p0_cas_n;
		main_sdram_master_p0_cs_n <= main_sdram_csr_dfi_p0_cs_n;
		main_sdram_master_p0_ras_n <= main_sdram_csr_dfi_p0_ras_n;
		main_sdram_master_p0_we_n <= main_sdram_csr_dfi_p0_we_n;
		main_sdram_master_p0_cke <= main_sdram_csr_dfi_p0_cke;
		main_sdram_master_p0_odt <= main_sdram_csr_dfi_p0_odt;
		main_sdram_master_p0_reset_n <= main_sdram_csr_dfi_p0_reset_n;
		main_sdram_master_p0_act_n <= main_sdram_csr_dfi_p0_act_n;
		main_sdram_master_p0_wrdata <= main_sdram_csr_dfi_p0_wrdata;
		main_sdram_master_p0_wrdata_en <= main_sdram_csr_dfi_p0_wrdata_en;
		main_sdram_master_p0_wrdata_mask <= main_sdram_csr_dfi_p0_wrdata_mask;
		main_sdram_master_p0_rddata_en <= main_sdram_csr_dfi_p0_rddata_en;
		main_sdram_csr_dfi_p0_rddata <= main_sdram_master_p0_rddata;
		main_sdram_csr_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
	end
end
assign main_sdram_csr_dfi_p0_cke = main_sdram_cke1;
assign main_sdram_csr_dfi_p0_odt = main_sdram_odt;
assign main_sdram_csr_dfi_p0_reset_n = main_sdram_reset_n;
always @(*) begin
	main_sdram_csr_dfi_p0_ras_n <= 1'd1;
	main_sdram_csr_dfi_p0_we_n <= 1'd1;
	main_sdram_csr_dfi_p0_cas_n <= 1'd1;
	main_sdram_csr_dfi_p0_cs_n <= 1'd1;
	if (main_sdram_command_issue_re) begin
		main_sdram_csr_dfi_p0_cs_n <= {1{(~main_sdram_csrfield_cs)}};
		main_sdram_csr_dfi_p0_we_n <= (~main_sdram_csrfield_we);
		main_sdram_csr_dfi_p0_cas_n <= (~main_sdram_csrfield_cas);
		main_sdram_csr_dfi_p0_ras_n <= (~main_sdram_csrfield_ras);
	end else begin
		main_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
		main_sdram_csr_dfi_p0_we_n <= 1'd1;
		main_sdram_csr_dfi_p0_cas_n <= 1'd1;
		main_sdram_csr_dfi_p0_ras_n <= 1'd1;
	end
end
assign main_sdram_csr_dfi_p0_address = main_sdram_address_storage;
assign main_sdram_csr_dfi_p0_bank = main_sdram_baddress_storage;
assign main_sdram_csr_dfi_p0_wrdata_en = (main_sdram_command_issue_re & main_sdram_csrfield_wren);
assign main_sdram_csr_dfi_p0_rddata_en = (main_sdram_command_issue_re & main_sdram_csrfield_rden);
assign main_sdram_csr_dfi_p0_wrdata = main_sdram_wrdata_storage;
assign main_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign main_sdram_bankmachine0_req_valid = main_sdram_interface_bank0_valid;
assign main_sdram_interface_bank0_ready = main_sdram_bankmachine0_req_ready;
assign main_sdram_bankmachine0_req_we = main_sdram_interface_bank0_we;
assign main_sdram_bankmachine0_req_addr = main_sdram_interface_bank0_addr;
assign main_sdram_interface_bank0_lock = main_sdram_bankmachine0_req_lock;
assign main_sdram_interface_bank0_wdata_ready = main_sdram_bankmachine0_req_wdata_ready;
assign main_sdram_interface_bank0_rdata_valid = main_sdram_bankmachine0_req_rdata_valid;
assign main_sdram_bankmachine1_req_valid = main_sdram_interface_bank1_valid;
assign main_sdram_interface_bank1_ready = main_sdram_bankmachine1_req_ready;
assign main_sdram_bankmachine1_req_we = main_sdram_interface_bank1_we;
assign main_sdram_bankmachine1_req_addr = main_sdram_interface_bank1_addr;
assign main_sdram_interface_bank1_lock = main_sdram_bankmachine1_req_lock;
assign main_sdram_interface_bank1_wdata_ready = main_sdram_bankmachine1_req_wdata_ready;
assign main_sdram_interface_bank1_rdata_valid = main_sdram_bankmachine1_req_rdata_valid;
assign main_sdram_bankmachine2_req_valid = main_sdram_interface_bank2_valid;
assign main_sdram_interface_bank2_ready = main_sdram_bankmachine2_req_ready;
assign main_sdram_bankmachine2_req_we = main_sdram_interface_bank2_we;
assign main_sdram_bankmachine2_req_addr = main_sdram_interface_bank2_addr;
assign main_sdram_interface_bank2_lock = main_sdram_bankmachine2_req_lock;
assign main_sdram_interface_bank2_wdata_ready = main_sdram_bankmachine2_req_wdata_ready;
assign main_sdram_interface_bank2_rdata_valid = main_sdram_bankmachine2_req_rdata_valid;
assign main_sdram_bankmachine3_req_valid = main_sdram_interface_bank3_valid;
assign main_sdram_interface_bank3_ready = main_sdram_bankmachine3_req_ready;
assign main_sdram_bankmachine3_req_we = main_sdram_interface_bank3_we;
assign main_sdram_bankmachine3_req_addr = main_sdram_interface_bank3_addr;
assign main_sdram_interface_bank3_lock = main_sdram_bankmachine3_req_lock;
assign main_sdram_interface_bank3_wdata_ready = main_sdram_bankmachine3_req_wdata_ready;
assign main_sdram_interface_bank3_rdata_valid = main_sdram_bankmachine3_req_rdata_valid;
assign main_sdram_timer_wait = (~main_sdram_timer_done0);
assign main_sdram_postponer_req_i = main_sdram_timer_done0;
assign main_sdram_wants_refresh = main_sdram_postponer_req_o;
assign main_sdram_timer_done1 = (main_sdram_timer_count1 == 1'd0);
assign main_sdram_timer_done0 = main_sdram_timer_done1;
assign main_sdram_timer_count0 = main_sdram_timer_count1;
assign main_sdram_sequencer_start1 = (main_sdram_sequencer_start0 | (main_sdram_sequencer_count != 1'd0));
assign main_sdram_sequencer_done0 = (main_sdram_sequencer_done1 & (main_sdram_sequencer_count == 1'd0));
always @(*) begin
	main_sdram_cmd_last <= 1'd0;
	builder_refresher_next_state <= 2'd0;
	main_sdram_sequencer_start0 <= 1'd0;
	main_sdram_cmd_valid <= 1'd0;
	builder_refresher_next_state <= builder_refresher_state;
	case (builder_refresher_state)
		1'd1: begin
			main_sdram_cmd_valid <= 1'd1;
			if (main_sdram_cmd_ready) begin
				main_sdram_sequencer_start0 <= 1'd1;
				builder_refresher_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_sdram_cmd_valid <= 1'd1;
			if (main_sdram_sequencer_done0) begin
				main_sdram_cmd_valid <= 1'd0;
				main_sdram_cmd_last <= 1'd1;
				builder_refresher_next_state <= 1'd0;
			end
		end
		default: begin
			if (1'd1) begin
				if (main_sdram_wants_refresh) begin
					builder_refresher_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine0_cmd_buffer_lookahead_sink_valid = main_sdram_bankmachine0_req_valid;
assign main_sdram_bankmachine0_req_ready = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_ready;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we = main_sdram_bankmachine0_req_we;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr = main_sdram_bankmachine0_req_addr;
assign main_sdram_bankmachine0_cmd_buffer_sink_valid = main_sdram_bankmachine0_cmd_buffer_lookahead_source_valid;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_ready = main_sdram_bankmachine0_cmd_buffer_sink_ready;
assign main_sdram_bankmachine0_cmd_buffer_sink_first = main_sdram_bankmachine0_cmd_buffer_lookahead_source_first;
assign main_sdram_bankmachine0_cmd_buffer_sink_last = main_sdram_bankmachine0_cmd_buffer_lookahead_source_last;
assign main_sdram_bankmachine0_cmd_buffer_sink_payload_we = main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we;
assign main_sdram_bankmachine0_cmd_buffer_sink_payload_addr = main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr;
assign main_sdram_bankmachine0_cmd_buffer_source_ready = (main_sdram_bankmachine0_req_wdata_ready | main_sdram_bankmachine0_req_rdata_valid);
assign main_sdram_bankmachine0_req_lock = (main_sdram_bankmachine0_cmd_buffer_lookahead_source_valid | main_sdram_bankmachine0_cmd_buffer_source_valid);
assign main_sdram_bankmachine0_row_hit = (main_sdram_bankmachine0_row == main_sdram_bankmachine0_cmd_buffer_source_payload_addr[21:9]);
assign main_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine0_row_col_n_addr_sel) begin
		main_sdram_bankmachine0_cmd_payload_a <= main_sdram_bankmachine0_cmd_buffer_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine0_cmd_payload_a <= ((main_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_sdram_bankmachine0_cmd_buffer_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine0_twtpcon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_cmd_payload_is_write);
assign main_sdram_bankmachine0_trccon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
assign main_sdram_bankmachine0_trascon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
always @(*) begin
	main_sdram_bankmachine0_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine0_cmd_buffer_lookahead_source_valid & main_sdram_bankmachine0_cmd_buffer_source_valid)) begin
		if ((main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr[21:9] != main_sdram_bankmachine0_cmd_buffer_source_payload_addr[21:9])) begin
			main_sdram_bankmachine0_auto_precharge <= (main_sdram_bankmachine0_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din = {main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we};
assign {main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr, main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we} = main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_sink_ready = main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_valid;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_first;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_last;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr = main_sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_valid = main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_first = main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_last = main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we = main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr = main_sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re = main_sdram_bankmachine0_cmd_buffer_lookahead_source_ready;
always @(*) begin
	main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine0_cmd_buffer_lookahead_replace) begin
		main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= (main_sdram_bankmachine0_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= main_sdram_bankmachine0_cmd_buffer_lookahead_produce;
	end
end
assign main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w = main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_we = (main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & (main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable | main_sdram_bankmachine0_cmd_buffer_lookahead_replace));
assign main_sdram_bankmachine0_cmd_buffer_lookahead_do_read = (main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable & main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re);
assign main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr = main_sdram_bankmachine0_cmd_buffer_lookahead_consume;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout = main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable = (main_sdram_bankmachine0_cmd_buffer_lookahead_level != 4'd8);
assign main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable = (main_sdram_bankmachine0_cmd_buffer_lookahead_level != 1'd0);
assign main_sdram_bankmachine0_cmd_buffer_sink_ready = ((~main_sdram_bankmachine0_cmd_buffer_source_valid) | main_sdram_bankmachine0_cmd_buffer_source_ready);
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
	main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
	main_sdram_bankmachine0_req_wdata_ready <= 1'd0;
	main_sdram_bankmachine0_req_rdata_valid <= 1'd0;
	main_sdram_bankmachine0_refresh_gnt <= 1'd0;
	main_sdram_bankmachine0_cmd_valid <= 1'd0;
	builder_bankmachine0_next_state <= 3'd0;
	main_sdram_bankmachine0_row_open <= 1'd0;
	main_sdram_bankmachine0_row_close <= 1'd0;
	main_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
	main_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
	main_sdram_bankmachine0_cmd_payload_we <= 1'd0;
	main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
	main_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
	builder_bankmachine0_next_state <= builder_bankmachine0_state;
	case (builder_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				main_sdram_bankmachine0_cmd_valid <= 1'd1;
				if (main_sdram_bankmachine0_cmd_ready) begin
					builder_bankmachine0_next_state <= 2'd3;
				end
				main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
				main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
				main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			end
			main_sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd2: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				builder_bankmachine0_next_state <= 2'd3;
			end
			main_sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
				main_sdram_bankmachine0_row_open <= 1'd1;
				main_sdram_bankmachine0_cmd_valid <= 1'd1;
				main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
				if (main_sdram_bankmachine0_cmd_ready) begin
					builder_bankmachine0_next_state <= 1'd0;
				end
				main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
			if (main_sdram_bankmachine0_twtpcon_ready) begin
				main_sdram_bankmachine0_refresh_gnt <= 1'd1;
			end
			main_sdram_bankmachine0_row_close <= 1'd1;
			main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			if ((~main_sdram_bankmachine0_refresh_req)) begin
				builder_bankmachine0_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
				builder_bankmachine0_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							main_sdram_bankmachine0_cmd_valid <= 1'd1;
							if (main_sdram_bankmachine0_cmd_buffer_source_payload_we) begin
								main_sdram_bankmachine0_req_wdata_ready <= main_sdram_bankmachine0_cmd_ready;
								main_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
								main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
							end else begin
								main_sdram_bankmachine0_req_rdata_valid <= main_sdram_bankmachine0_cmd_ready;
								main_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
							end
							main_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
							if ((main_sdram_bankmachine0_cmd_ready & main_sdram_bankmachine0_auto_precharge)) begin
								builder_bankmachine0_next_state <= 2'd2;
							end
						end else begin
							builder_bankmachine0_next_state <= 1'd1;
						end
					end else begin
						builder_bankmachine0_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine1_cmd_buffer_lookahead_sink_valid = main_sdram_bankmachine1_req_valid;
assign main_sdram_bankmachine1_req_ready = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_ready;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we = main_sdram_bankmachine1_req_we;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr = main_sdram_bankmachine1_req_addr;
assign main_sdram_bankmachine1_cmd_buffer_sink_valid = main_sdram_bankmachine1_cmd_buffer_lookahead_source_valid;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_ready = main_sdram_bankmachine1_cmd_buffer_sink_ready;
assign main_sdram_bankmachine1_cmd_buffer_sink_first = main_sdram_bankmachine1_cmd_buffer_lookahead_source_first;
assign main_sdram_bankmachine1_cmd_buffer_sink_last = main_sdram_bankmachine1_cmd_buffer_lookahead_source_last;
assign main_sdram_bankmachine1_cmd_buffer_sink_payload_we = main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we;
assign main_sdram_bankmachine1_cmd_buffer_sink_payload_addr = main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr;
assign main_sdram_bankmachine1_cmd_buffer_source_ready = (main_sdram_bankmachine1_req_wdata_ready | main_sdram_bankmachine1_req_rdata_valid);
assign main_sdram_bankmachine1_req_lock = (main_sdram_bankmachine1_cmd_buffer_lookahead_source_valid | main_sdram_bankmachine1_cmd_buffer_source_valid);
assign main_sdram_bankmachine1_row_hit = (main_sdram_bankmachine1_row == main_sdram_bankmachine1_cmd_buffer_source_payload_addr[21:9]);
assign main_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine1_row_col_n_addr_sel) begin
		main_sdram_bankmachine1_cmd_payload_a <= main_sdram_bankmachine1_cmd_buffer_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine1_cmd_payload_a <= ((main_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_sdram_bankmachine1_cmd_buffer_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine1_twtpcon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_cmd_payload_is_write);
assign main_sdram_bankmachine1_trccon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
assign main_sdram_bankmachine1_trascon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
always @(*) begin
	main_sdram_bankmachine1_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine1_cmd_buffer_lookahead_source_valid & main_sdram_bankmachine1_cmd_buffer_source_valid)) begin
		if ((main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr[21:9] != main_sdram_bankmachine1_cmd_buffer_source_payload_addr[21:9])) begin
			main_sdram_bankmachine1_auto_precharge <= (main_sdram_bankmachine1_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din = {main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we};
assign {main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr, main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we} = main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_sink_ready = main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_valid;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_first;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_last;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr = main_sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_valid = main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_first = main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_last = main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we = main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr = main_sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re = main_sdram_bankmachine1_cmd_buffer_lookahead_source_ready;
always @(*) begin
	main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine1_cmd_buffer_lookahead_replace) begin
		main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= (main_sdram_bankmachine1_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= main_sdram_bankmachine1_cmd_buffer_lookahead_produce;
	end
end
assign main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w = main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_we = (main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & (main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable | main_sdram_bankmachine1_cmd_buffer_lookahead_replace));
assign main_sdram_bankmachine1_cmd_buffer_lookahead_do_read = (main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable & main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re);
assign main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr = main_sdram_bankmachine1_cmd_buffer_lookahead_consume;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout = main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable = (main_sdram_bankmachine1_cmd_buffer_lookahead_level != 4'd8);
assign main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable = (main_sdram_bankmachine1_cmd_buffer_lookahead_level != 1'd0);
assign main_sdram_bankmachine1_cmd_buffer_sink_ready = ((~main_sdram_bankmachine1_cmd_buffer_source_valid) | main_sdram_bankmachine1_cmd_buffer_source_ready);
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
	main_sdram_bankmachine1_req_wdata_ready <= 1'd0;
	builder_bankmachine1_next_state <= 3'd0;
	main_sdram_bankmachine1_req_rdata_valid <= 1'd0;
	main_sdram_bankmachine1_refresh_gnt <= 1'd0;
	main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
	main_sdram_bankmachine1_cmd_valid <= 1'd0;
	main_sdram_bankmachine1_row_open <= 1'd0;
	main_sdram_bankmachine1_row_close <= 1'd0;
	main_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
	main_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
	main_sdram_bankmachine1_cmd_payload_we <= 1'd0;
	main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
	main_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
	builder_bankmachine1_next_state <= builder_bankmachine1_state;
	case (builder_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				main_sdram_bankmachine1_cmd_valid <= 1'd1;
				if (main_sdram_bankmachine1_cmd_ready) begin
					builder_bankmachine1_next_state <= 2'd3;
				end
				main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
				main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
				main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			end
			main_sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd2: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				builder_bankmachine1_next_state <= 2'd3;
			end
			main_sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
				main_sdram_bankmachine1_row_open <= 1'd1;
				main_sdram_bankmachine1_cmd_valid <= 1'd1;
				main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
				if (main_sdram_bankmachine1_cmd_ready) begin
					builder_bankmachine1_next_state <= 1'd0;
				end
				main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
			if (main_sdram_bankmachine1_twtpcon_ready) begin
				main_sdram_bankmachine1_refresh_gnt <= 1'd1;
			end
			main_sdram_bankmachine1_row_close <= 1'd1;
			main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			if ((~main_sdram_bankmachine1_refresh_req)) begin
				builder_bankmachine1_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
				builder_bankmachine1_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							main_sdram_bankmachine1_cmd_valid <= 1'd1;
							if (main_sdram_bankmachine1_cmd_buffer_source_payload_we) begin
								main_sdram_bankmachine1_req_wdata_ready <= main_sdram_bankmachine1_cmd_ready;
								main_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
								main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
							end else begin
								main_sdram_bankmachine1_req_rdata_valid <= main_sdram_bankmachine1_cmd_ready;
								main_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
							end
							main_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
							if ((main_sdram_bankmachine1_cmd_ready & main_sdram_bankmachine1_auto_precharge)) begin
								builder_bankmachine1_next_state <= 2'd2;
							end
						end else begin
							builder_bankmachine1_next_state <= 1'd1;
						end
					end else begin
						builder_bankmachine1_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine2_cmd_buffer_lookahead_sink_valid = main_sdram_bankmachine2_req_valid;
assign main_sdram_bankmachine2_req_ready = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_ready;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we = main_sdram_bankmachine2_req_we;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr = main_sdram_bankmachine2_req_addr;
assign main_sdram_bankmachine2_cmd_buffer_sink_valid = main_sdram_bankmachine2_cmd_buffer_lookahead_source_valid;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_ready = main_sdram_bankmachine2_cmd_buffer_sink_ready;
assign main_sdram_bankmachine2_cmd_buffer_sink_first = main_sdram_bankmachine2_cmd_buffer_lookahead_source_first;
assign main_sdram_bankmachine2_cmd_buffer_sink_last = main_sdram_bankmachine2_cmd_buffer_lookahead_source_last;
assign main_sdram_bankmachine2_cmd_buffer_sink_payload_we = main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we;
assign main_sdram_bankmachine2_cmd_buffer_sink_payload_addr = main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr;
assign main_sdram_bankmachine2_cmd_buffer_source_ready = (main_sdram_bankmachine2_req_wdata_ready | main_sdram_bankmachine2_req_rdata_valid);
assign main_sdram_bankmachine2_req_lock = (main_sdram_bankmachine2_cmd_buffer_lookahead_source_valid | main_sdram_bankmachine2_cmd_buffer_source_valid);
assign main_sdram_bankmachine2_row_hit = (main_sdram_bankmachine2_row == main_sdram_bankmachine2_cmd_buffer_source_payload_addr[21:9]);
assign main_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine2_row_col_n_addr_sel) begin
		main_sdram_bankmachine2_cmd_payload_a <= main_sdram_bankmachine2_cmd_buffer_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine2_cmd_payload_a <= ((main_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_sdram_bankmachine2_cmd_buffer_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine2_twtpcon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_cmd_payload_is_write);
assign main_sdram_bankmachine2_trccon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
assign main_sdram_bankmachine2_trascon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
always @(*) begin
	main_sdram_bankmachine2_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine2_cmd_buffer_lookahead_source_valid & main_sdram_bankmachine2_cmd_buffer_source_valid)) begin
		if ((main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr[21:9] != main_sdram_bankmachine2_cmd_buffer_source_payload_addr[21:9])) begin
			main_sdram_bankmachine2_auto_precharge <= (main_sdram_bankmachine2_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din = {main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we};
assign {main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr, main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we} = main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_sink_ready = main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_valid;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_first;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_last;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr = main_sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_valid = main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_first = main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_last = main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we = main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr = main_sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re = main_sdram_bankmachine2_cmd_buffer_lookahead_source_ready;
always @(*) begin
	main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine2_cmd_buffer_lookahead_replace) begin
		main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= (main_sdram_bankmachine2_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= main_sdram_bankmachine2_cmd_buffer_lookahead_produce;
	end
end
assign main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w = main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_we = (main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & (main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable | main_sdram_bankmachine2_cmd_buffer_lookahead_replace));
assign main_sdram_bankmachine2_cmd_buffer_lookahead_do_read = (main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable & main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re);
assign main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr = main_sdram_bankmachine2_cmd_buffer_lookahead_consume;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout = main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable = (main_sdram_bankmachine2_cmd_buffer_lookahead_level != 4'd8);
assign main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable = (main_sdram_bankmachine2_cmd_buffer_lookahead_level != 1'd0);
assign main_sdram_bankmachine2_cmd_buffer_sink_ready = ((~main_sdram_bankmachine2_cmd_buffer_source_valid) | main_sdram_bankmachine2_cmd_buffer_source_ready);
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
	main_sdram_bankmachine2_req_wdata_ready <= 1'd0;
	main_sdram_bankmachine2_req_rdata_valid <= 1'd0;
	main_sdram_bankmachine2_refresh_gnt <= 1'd0;
	main_sdram_bankmachine2_cmd_valid <= 1'd0;
	main_sdram_bankmachine2_row_open <= 1'd0;
	main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
	main_sdram_bankmachine2_row_close <= 1'd0;
	main_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
	main_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
	main_sdram_bankmachine2_cmd_payload_we <= 1'd0;
	builder_bankmachine2_next_state <= 3'd0;
	main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
	main_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
	builder_bankmachine2_next_state <= builder_bankmachine2_state;
	case (builder_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				main_sdram_bankmachine2_cmd_valid <= 1'd1;
				if (main_sdram_bankmachine2_cmd_ready) begin
					builder_bankmachine2_next_state <= 2'd3;
				end
				main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
				main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
				main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			end
			main_sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd2: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				builder_bankmachine2_next_state <= 2'd3;
			end
			main_sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
				main_sdram_bankmachine2_row_open <= 1'd1;
				main_sdram_bankmachine2_cmd_valid <= 1'd1;
				main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
				if (main_sdram_bankmachine2_cmd_ready) begin
					builder_bankmachine2_next_state <= 1'd0;
				end
				main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
			if (main_sdram_bankmachine2_twtpcon_ready) begin
				main_sdram_bankmachine2_refresh_gnt <= 1'd1;
			end
			main_sdram_bankmachine2_row_close <= 1'd1;
			main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			if ((~main_sdram_bankmachine2_refresh_req)) begin
				builder_bankmachine2_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
				builder_bankmachine2_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							main_sdram_bankmachine2_cmd_valid <= 1'd1;
							if (main_sdram_bankmachine2_cmd_buffer_source_payload_we) begin
								main_sdram_bankmachine2_req_wdata_ready <= main_sdram_bankmachine2_cmd_ready;
								main_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
								main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
							end else begin
								main_sdram_bankmachine2_req_rdata_valid <= main_sdram_bankmachine2_cmd_ready;
								main_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
							end
							main_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
							if ((main_sdram_bankmachine2_cmd_ready & main_sdram_bankmachine2_auto_precharge)) begin
								builder_bankmachine2_next_state <= 2'd2;
							end
						end else begin
							builder_bankmachine2_next_state <= 1'd1;
						end
					end else begin
						builder_bankmachine2_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine3_cmd_buffer_lookahead_sink_valid = main_sdram_bankmachine3_req_valid;
assign main_sdram_bankmachine3_req_ready = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_ready;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we = main_sdram_bankmachine3_req_we;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr = main_sdram_bankmachine3_req_addr;
assign main_sdram_bankmachine3_cmd_buffer_sink_valid = main_sdram_bankmachine3_cmd_buffer_lookahead_source_valid;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_ready = main_sdram_bankmachine3_cmd_buffer_sink_ready;
assign main_sdram_bankmachine3_cmd_buffer_sink_first = main_sdram_bankmachine3_cmd_buffer_lookahead_source_first;
assign main_sdram_bankmachine3_cmd_buffer_sink_last = main_sdram_bankmachine3_cmd_buffer_lookahead_source_last;
assign main_sdram_bankmachine3_cmd_buffer_sink_payload_we = main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we;
assign main_sdram_bankmachine3_cmd_buffer_sink_payload_addr = main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr;
assign main_sdram_bankmachine3_cmd_buffer_source_ready = (main_sdram_bankmachine3_req_wdata_ready | main_sdram_bankmachine3_req_rdata_valid);
assign main_sdram_bankmachine3_req_lock = (main_sdram_bankmachine3_cmd_buffer_lookahead_source_valid | main_sdram_bankmachine3_cmd_buffer_source_valid);
assign main_sdram_bankmachine3_row_hit = (main_sdram_bankmachine3_row == main_sdram_bankmachine3_cmd_buffer_source_payload_addr[21:9]);
assign main_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine3_row_col_n_addr_sel) begin
		main_sdram_bankmachine3_cmd_payload_a <= main_sdram_bankmachine3_cmd_buffer_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine3_cmd_payload_a <= ((main_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_sdram_bankmachine3_cmd_buffer_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine3_twtpcon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_cmd_payload_is_write);
assign main_sdram_bankmachine3_trccon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
assign main_sdram_bankmachine3_trascon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
always @(*) begin
	main_sdram_bankmachine3_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine3_cmd_buffer_lookahead_source_valid & main_sdram_bankmachine3_cmd_buffer_source_valid)) begin
		if ((main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr[21:9] != main_sdram_bankmachine3_cmd_buffer_source_payload_addr[21:9])) begin
			main_sdram_bankmachine3_auto_precharge <= (main_sdram_bankmachine3_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din = {main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we};
assign {main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr, main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we} = main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_sink_ready = main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_valid;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_first;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_last;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr = main_sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_valid = main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_first = main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_last = main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we = main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr = main_sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re = main_sdram_bankmachine3_cmd_buffer_lookahead_source_ready;
always @(*) begin
	main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine3_cmd_buffer_lookahead_replace) begin
		main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= (main_sdram_bankmachine3_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= main_sdram_bankmachine3_cmd_buffer_lookahead_produce;
	end
end
assign main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w = main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_we = (main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & (main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable | main_sdram_bankmachine3_cmd_buffer_lookahead_replace));
assign main_sdram_bankmachine3_cmd_buffer_lookahead_do_read = (main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable & main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re);
assign main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr = main_sdram_bankmachine3_cmd_buffer_lookahead_consume;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout = main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable = (main_sdram_bankmachine3_cmd_buffer_lookahead_level != 4'd8);
assign main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable = (main_sdram_bankmachine3_cmd_buffer_lookahead_level != 1'd0);
assign main_sdram_bankmachine3_cmd_buffer_sink_ready = ((~main_sdram_bankmachine3_cmd_buffer_source_valid) | main_sdram_bankmachine3_cmd_buffer_source_ready);
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
	main_sdram_bankmachine3_req_wdata_ready <= 1'd0;
	main_sdram_bankmachine3_req_rdata_valid <= 1'd0;
	main_sdram_bankmachine3_refresh_gnt <= 1'd0;
	main_sdram_bankmachine3_cmd_valid <= 1'd0;
	main_sdram_bankmachine3_row_open <= 1'd0;
	builder_bankmachine3_next_state <= 3'd0;
	main_sdram_bankmachine3_row_close <= 1'd0;
	main_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
	main_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
	main_sdram_bankmachine3_cmd_payload_we <= 1'd0;
	main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
	main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
	main_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
	builder_bankmachine3_next_state <= builder_bankmachine3_state;
	case (builder_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				main_sdram_bankmachine3_cmd_valid <= 1'd1;
				if (main_sdram_bankmachine3_cmd_ready) begin
					builder_bankmachine3_next_state <= 2'd3;
				end
				main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
				main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
				main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			end
			main_sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd2: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				builder_bankmachine3_next_state <= 2'd3;
			end
			main_sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
				main_sdram_bankmachine3_row_open <= 1'd1;
				main_sdram_bankmachine3_cmd_valid <= 1'd1;
				main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
				if (main_sdram_bankmachine3_cmd_ready) begin
					builder_bankmachine3_next_state <= 1'd0;
				end
				main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
			if (main_sdram_bankmachine3_twtpcon_ready) begin
				main_sdram_bankmachine3_refresh_gnt <= 1'd1;
			end
			main_sdram_bankmachine3_row_close <= 1'd1;
			main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			if ((~main_sdram_bankmachine3_refresh_req)) begin
				builder_bankmachine3_next_state <= 1'd0;
			end
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
				builder_bankmachine3_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							main_sdram_bankmachine3_cmd_valid <= 1'd1;
							if (main_sdram_bankmachine3_cmd_buffer_source_payload_we) begin
								main_sdram_bankmachine3_req_wdata_ready <= main_sdram_bankmachine3_cmd_ready;
								main_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
								main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
							end else begin
								main_sdram_bankmachine3_req_rdata_valid <= main_sdram_bankmachine3_cmd_ready;
								main_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
							end
							main_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
							if ((main_sdram_bankmachine3_cmd_ready & main_sdram_bankmachine3_auto_precharge)) begin
								builder_bankmachine3_next_state <= 2'd2;
							end
						end else begin
							builder_bankmachine3_next_state <= 1'd1;
						end
					end else begin
						builder_bankmachine3_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_sdram_choose_req_want_cmds = 1'd1;
assign main_sdram_trrdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_tfawcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_ras_allowed = (main_sdram_trrdcon_ready & main_sdram_tfawcon_ready);
assign main_sdram_tccdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_cmd_payload_is_write | main_sdram_choose_req_cmd_payload_is_read));
assign main_sdram_cas_allowed = main_sdram_tccdcon_ready;
assign main_sdram_twtrcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
assign main_sdram_read_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_read) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_read)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_read)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_read));
assign main_sdram_write_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_write) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_write)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_write)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_write));
assign main_sdram_max_time0 = (main_sdram_time0 == 1'd0);
assign main_sdram_max_time1 = (main_sdram_time1 == 1'd0);
assign main_sdram_bankmachine0_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine1_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine2_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine3_refresh_req = main_sdram_cmd_valid;
assign main_sdram_go_to_refresh = (((main_sdram_bankmachine0_refresh_gnt & main_sdram_bankmachine1_refresh_gnt) & main_sdram_bankmachine2_refresh_gnt) & main_sdram_bankmachine3_refresh_gnt);
assign main_sdram_interface_rdata = {main_sdram_dfi_p0_rddata};
assign {main_sdram_dfi_p0_wrdata} = main_sdram_interface_wdata;
assign {main_sdram_dfi_p0_wrdata_mask} = (~main_sdram_interface_wdata_we);
always @(*) begin
	main_sdram_choose_cmd_valids <= 4'd0;
	main_sdram_choose_cmd_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
end
assign main_sdram_choose_cmd_request = main_sdram_choose_cmd_valids;
assign main_sdram_choose_cmd_cmd_valid = builder_comb_rhs_array_muxed0;
assign main_sdram_choose_cmd_cmd_payload_a = builder_comb_rhs_array_muxed1;
assign main_sdram_choose_cmd_cmd_payload_ba = builder_comb_rhs_array_muxed2;
assign main_sdram_choose_cmd_cmd_payload_is_read = builder_comb_rhs_array_muxed3;
assign main_sdram_choose_cmd_cmd_payload_is_write = builder_comb_rhs_array_muxed4;
assign main_sdram_choose_cmd_cmd_payload_is_cmd = builder_comb_rhs_array_muxed5;
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_cas <= builder_comb_t_array_muxed0;
	end
end
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_ras <= builder_comb_t_array_muxed1;
	end
end
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_we <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_we <= builder_comb_t_array_muxed2;
	end
end
assign main_sdram_choose_cmd_ce = (main_sdram_choose_cmd_cmd_ready | (~main_sdram_choose_cmd_cmd_valid));
always @(*) begin
	main_sdram_choose_req_valids <= 4'd0;
	main_sdram_choose_req_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
end
assign main_sdram_choose_req_request = main_sdram_choose_req_valids;
assign main_sdram_choose_req_cmd_valid = builder_comb_rhs_array_muxed6;
assign main_sdram_choose_req_cmd_payload_a = builder_comb_rhs_array_muxed7;
assign main_sdram_choose_req_cmd_payload_ba = builder_comb_rhs_array_muxed8;
assign main_sdram_choose_req_cmd_payload_is_read = builder_comb_rhs_array_muxed9;
assign main_sdram_choose_req_cmd_payload_is_write = builder_comb_rhs_array_muxed10;
assign main_sdram_choose_req_cmd_payload_is_cmd = builder_comb_rhs_array_muxed11;
always @(*) begin
	main_sdram_choose_req_cmd_payload_cas <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_cas <= builder_comb_t_array_muxed3;
	end
end
always @(*) begin
	main_sdram_choose_req_cmd_payload_ras <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_ras <= builder_comb_t_array_muxed4;
	end
end
always @(*) begin
	main_sdram_choose_req_cmd_payload_we <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_we <= builder_comb_t_array_muxed5;
	end
end
always @(*) begin
	main_sdram_bankmachine0_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd0))) begin
		main_sdram_bankmachine0_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd0))) begin
		main_sdram_bankmachine0_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine1_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd1))) begin
		main_sdram_bankmachine1_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd1))) begin
		main_sdram_bankmachine1_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine2_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd2))) begin
		main_sdram_bankmachine2_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd2))) begin
		main_sdram_bankmachine2_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine3_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd3))) begin
		main_sdram_bankmachine3_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd3))) begin
		main_sdram_bankmachine3_cmd_ready <= 1'd1;
	end
end
assign main_sdram_choose_req_ce = (main_sdram_choose_req_cmd_ready | (~main_sdram_choose_req_cmd_valid));
assign main_sdram_dfi_p0_reset_n = 1'd1;
assign main_sdram_dfi_p0_cke = {1{main_sdram_steerer0}};
assign main_sdram_dfi_p0_odt = {1{main_sdram_steerer1}};
always @(*) begin
	main_sdram_cmd_ready <= 1'd0;
	main_sdram_choose_req_want_activates <= 1'd0;
	main_sdram_steerer_sel <= 2'd0;
	main_sdram_choose_req_cmd_ready <= 1'd0;
	main_sdram_en1 <= 1'd0;
	builder_multiplexer_next_state <= 3'd0;
	main_sdram_en0 <= 1'd0;
	main_sdram_choose_req_want_reads <= 1'd0;
	main_sdram_choose_req_want_writes <= 1'd0;
	main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
	builder_multiplexer_next_state <= builder_multiplexer_state;
	case (builder_multiplexer_state)
		1'd1: begin
			main_sdram_en1 <= 1'd1;
			main_sdram_choose_req_want_writes <= 1'd1;
			if (1'd1) begin
				main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
			end else begin
				main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
				main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
				main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
			end
			main_sdram_steerer_sel <= 1'd0;
			if (1'd1) begin
				main_sdram_steerer_sel <= 2'd2;
			end
			if (1'd1) begin
				main_sdram_steerer_sel <= 1'd1;
			end
			if (main_sdram_read_available) begin
				if (((~main_sdram_write_available) | main_sdram_max_time1)) begin
					builder_multiplexer_next_state <= 2'd3;
				end
			end
			if (main_sdram_go_to_refresh) begin
				builder_multiplexer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_sdram_steerer_sel <= 2'd3;
			main_sdram_cmd_ready <= 1'd1;
			if (main_sdram_cmd_last) begin
				builder_multiplexer_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (main_sdram_twtrcon_ready) begin
				builder_multiplexer_next_state <= 1'd0;
			end
		end
		3'd4: begin
			builder_multiplexer_next_state <= 3'd5;
		end
		3'd5: begin
			builder_multiplexer_next_state <= 1'd1;
		end
		default: begin
			main_sdram_en0 <= 1'd1;
			main_sdram_choose_req_want_reads <= 1'd1;
			if (1'd1) begin
				main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
			end else begin
				main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
				main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
				main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
			end
			main_sdram_steerer_sel <= 1'd0;
			if (1'd1) begin
				main_sdram_steerer_sel <= 2'd2;
			end
			if (1'd1) begin
				main_sdram_steerer_sel <= 1'd1;
			end
			if (main_sdram_write_available) begin
				if (((~main_sdram_read_available) | main_sdram_max_time0)) begin
					builder_multiplexer_next_state <= 3'd4;
				end
			end
			if (main_sdram_go_to_refresh) begin
				builder_multiplexer_next_state <= 2'd2;
			end
		end
	endcase
end
assign builder_roundrobin0_request = {(((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked1 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked0 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_roundrobin0_ce = ((~main_sdram_interface_bank0_valid) & (~main_sdram_interface_bank0_lock));
assign main_sdram_interface_bank0_addr = builder_comb_rhs_array_muxed12;
assign main_sdram_interface_bank0_we = builder_comb_rhs_array_muxed13;
assign main_sdram_interface_bank0_valid = builder_comb_rhs_array_muxed14;
assign builder_roundrobin1_request = {(((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked3 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked2 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_roundrobin1_ce = ((~main_sdram_interface_bank1_valid) & (~main_sdram_interface_bank1_lock));
assign main_sdram_interface_bank1_addr = builder_comb_rhs_array_muxed15;
assign main_sdram_interface_bank1_we = builder_comb_rhs_array_muxed16;
assign main_sdram_interface_bank1_valid = builder_comb_rhs_array_muxed17;
assign builder_roundrobin2_request = {(((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked5 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked4 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_roundrobin2_ce = ((~main_sdram_interface_bank2_valid) & (~main_sdram_interface_bank2_lock));
assign main_sdram_interface_bank2_addr = builder_comb_rhs_array_muxed18;
assign main_sdram_interface_bank2_we = builder_comb_rhs_array_muxed19;
assign main_sdram_interface_bank2_valid = builder_comb_rhs_array_muxed20;
assign builder_roundrobin3_request = {(((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked7 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked6 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_roundrobin3_ce = ((~main_sdram_interface_bank3_valid) & (~main_sdram_interface_bank3_lock));
assign main_sdram_interface_bank3_addr = builder_comb_rhs_array_muxed21;
assign main_sdram_interface_bank3_we = builder_comb_rhs_array_muxed22;
assign main_sdram_interface_bank3_valid = builder_comb_rhs_array_muxed23;
assign main_port_cmd_ready = ((((1'd0 | (((builder_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked0 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank0_ready)) | (((builder_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked2 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank1_ready)) | (((builder_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked4 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank2_ready)) | (((builder_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked6 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0)))))) & main_sdram_interface_bank3_ready));
assign main_litedramcrossbar_cmd_ready = ((((1'd0 | (((builder_roundrobin0_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked1 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank0_ready)) | (((builder_roundrobin1_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked3 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank1_ready)) | (((builder_roundrobin2_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked5 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank2_ready)) | (((builder_roundrobin3_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked7 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1)))))) & main_sdram_interface_bank3_ready));
assign main_port_wdata_ready = builder_new_master_wdata_ready0;
assign main_litedramcrossbar_wdata_ready = builder_new_master_wdata_ready1;
assign main_port_rdata_valid = builder_new_master_rdata_valid3;
assign main_litedramcrossbar_rdata_valid = builder_new_master_rdata_valid7;
always @(*) begin
	main_sdram_interface_wdata <= 16'd0;
	main_sdram_interface_wdata_we <= 2'd0;
	case ({builder_new_master_wdata_ready1, builder_new_master_wdata_ready0})
		1'd1: begin
			main_sdram_interface_wdata <= main_port_wdata_payload_data;
			main_sdram_interface_wdata_we <= main_port_wdata_payload_we;
		end
		2'd2: begin
			main_sdram_interface_wdata <= main_litedramcrossbar_wdata_payload_data;
			main_sdram_interface_wdata_we <= main_litedramcrossbar_wdata_payload_we;
		end
		default: begin
			main_sdram_interface_wdata <= 1'd0;
			main_sdram_interface_wdata_we <= 1'd0;
		end
	endcase
end
assign main_port_rdata_payload_data = main_sdram_interface_rdata;
assign main_litedramcrossbar_rdata_payload_data = main_sdram_interface_rdata;
assign main_data_port_adr = main_wb_sdram_adr[8:2];
always @(*) begin
	main_data_port_we <= 16'd0;
	main_data_port_dat_w <= 128'd0;
	if (main_write_from_slave) begin
		main_data_port_dat_w <= main_interface_dat_r;
		main_data_port_we <= {16{1'd1}};
	end else begin
		main_data_port_dat_w <= {4{main_wb_sdram_dat_w}};
		if ((((main_wb_sdram_cyc & main_wb_sdram_stb) & main_wb_sdram_we) & main_wb_sdram_ack)) begin
			main_data_port_we <= {({4{(main_wb_sdram_adr[1:0] == 2'd3)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 2'd2)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd1)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd0)}} & main_wb_sdram_sel)};
		end
	end
end
assign main_interface_dat_w = main_data_port_dat_r;
assign main_interface_sel = 16'd65535;
always @(*) begin
	main_wb_sdram_dat_r <= 32'd0;
	case (main_adr_offset_r)
		1'd0: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[31:0];
		end
		1'd1: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[63:32];
		end
		2'd2: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[95:64];
		end
		default: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[127:96];
		end
	endcase
end
assign {main_tag_do_dirty, main_tag_do_tag} = main_tag_port_dat_r;
assign main_tag_port_dat_w = {main_tag_di_dirty, main_tag_di_tag};
assign main_tag_port_adr = main_wb_sdram_adr[8:2];
assign main_tag_di_tag = main_wb_sdram_adr[29:9];
assign main_interface_adr = {main_tag_do_tag, main_wb_sdram_adr[8:2]};
always @(*) begin
	main_tag_di_dirty <= 1'd0;
	main_word_clr <= 1'd0;
	main_word_inc <= 1'd0;
	main_write_from_slave <= 1'd0;
	main_interface_cyc <= 1'd0;
	main_interface_stb <= 1'd0;
	main_tag_port_we <= 1'd0;
	main_interface_we <= 1'd0;
	builder_fullmemorywe_next_state <= 2'd0;
	main_wb_sdram_ack <= 1'd0;
	builder_fullmemorywe_next_state <= builder_fullmemorywe_state;
	case (builder_fullmemorywe_state)
		1'd1: begin
			main_word_clr <= 1'd1;
			if ((main_tag_do_tag == main_wb_sdram_adr[29:9])) begin
				main_wb_sdram_ack <= 1'd1;
				if (main_wb_sdram_we) begin
					main_tag_di_dirty <= 1'd1;
					main_tag_port_we <= 1'd1;
				end
				builder_fullmemorywe_next_state <= 1'd0;
			end else begin
				if (main_tag_do_dirty) begin
					builder_fullmemorywe_next_state <= 2'd2;
				end else begin
					main_tag_port_we <= 1'd1;
					main_word_clr <= 1'd1;
					builder_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			main_interface_stb <= 1'd1;
			main_interface_cyc <= 1'd1;
			main_interface_we <= 1'd1;
			if (main_interface_ack) begin
				main_word_inc <= 1'd1;
				if (1'd1) begin
					main_tag_port_we <= 1'd1;
					main_word_clr <= 1'd1;
					builder_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			main_interface_stb <= 1'd1;
			main_interface_cyc <= 1'd1;
			main_interface_we <= 1'd0;
			if (main_interface_ack) begin
				main_write_from_slave <= 1'd1;
				main_word_inc <= 1'd1;
				if (1'd1) begin
					builder_fullmemorywe_next_state <= 1'd1;
				end else begin
					builder_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		default: begin
			if ((main_wb_sdram_cyc & main_wb_sdram_stb)) begin
				builder_fullmemorywe_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_wishbone_bridge_cmd_payload_addr = (main_interface_adr - 27'd67108864);
assign main_wishbone_bridge_cmd_payload_we = main_interface_we;
assign main_wishbone_bridge_cmd_last = (~main_interface_we);
assign main_wishbone_bridge_flush = (~main_interface_cyc);
always @(*) begin
	main_wishbone_bridge_wdata_valid <= 1'd0;
	main_wishbone_bridge_wdata_valid <= (main_interface_stb & main_interface_we);
	if (1'd0) begin
		if ((~main_wishbone_bridge_is_ongoing)) begin
			main_wishbone_bridge_wdata_valid <= 1'd0;
		end
	end
end
assign main_wishbone_bridge_wdata_payload_data = main_interface_dat_w;
assign main_wishbone_bridge_wdata_payload_we = main_interface_sel;
assign main_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
	main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value <= 3'd0;
	main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value_ce <= 1'd0;
	main_wishbone_bridge_cmd_ready <= 1'd0;
	main_port_cmd_payload_we <= 1'd0;
	main_port_cmd_payload_addr <= 24'd0;
	builder_litedramwishbone2native_litedramnativeportconverter_next_state <= 1'd0;
	main_port_cmd_valid <= 1'd0;
	builder_litedramwishbone2native_litedramnativeportconverter_next_state <= builder_litedramwishbone2native_litedramnativeportconverter_state;
	case (builder_litedramwishbone2native_litedramnativeportconverter_state)
		1'd1: begin
			main_port_cmd_valid <= 1'd1;
			main_port_cmd_payload_we <= main_wishbone_bridge_cmd_payload_we;
			main_port_cmd_payload_addr <= ((main_wishbone_bridge_cmd_payload_addr * 4'd8) + main_wishbone_bridge_count);
			if (main_port_cmd_ready) begin
				main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value <= (main_wishbone_bridge_count + 1'd1);
				main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value_ce <= 1'd1;
				if ((main_wishbone_bridge_count == 3'd7)) begin
					main_wishbone_bridge_cmd_ready <= 1'd1;
					builder_litedramwishbone2native_litedramnativeportconverter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value <= 1'd0;
			main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value_ce <= 1'd1;
			if (main_wishbone_bridge_cmd_valid) begin
				builder_litedramwishbone2native_litedramnativeportconverter_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_wishbone_bridge_wdata_converter_converter_sink_valid = main_wishbone_bridge_wdata_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_sink_first = main_wishbone_bridge_wdata_converter_sink_first;
assign main_wishbone_bridge_wdata_converter_converter_sink_last = main_wishbone_bridge_wdata_converter_sink_last;
assign main_wishbone_bridge_wdata_converter_sink_ready = main_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[15:0] <= main_wishbone_bridge_wdata_converter_sink_payload_data[15:0];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[17:16] <= main_wishbone_bridge_wdata_converter_sink_payload_we[1:0];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[33:18] <= main_wishbone_bridge_wdata_converter_sink_payload_data[31:16];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:34] <= main_wishbone_bridge_wdata_converter_sink_payload_we[3:2];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[51:36] <= main_wishbone_bridge_wdata_converter_sink_payload_data[47:32];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[53:52] <= main_wishbone_bridge_wdata_converter_sink_payload_we[5:4];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[69:54] <= main_wishbone_bridge_wdata_converter_sink_payload_data[63:48];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:70] <= main_wishbone_bridge_wdata_converter_sink_payload_we[7:6];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[87:72] <= main_wishbone_bridge_wdata_converter_sink_payload_data[79:64];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[89:88] <= main_wishbone_bridge_wdata_converter_sink_payload_we[9:8];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[105:90] <= main_wishbone_bridge_wdata_converter_sink_payload_data[95:80];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:106] <= main_wishbone_bridge_wdata_converter_sink_payload_we[11:10];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[123:108] <= main_wishbone_bridge_wdata_converter_sink_payload_data[111:96];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[125:124] <= main_wishbone_bridge_wdata_converter_sink_payload_we[13:12];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[141:126] <= main_wishbone_bridge_wdata_converter_sink_payload_data[127:112];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:142] <= main_wishbone_bridge_wdata_converter_sink_payload_we[15:14];
end
assign main_wishbone_bridge_wdata_converter_source_valid = main_wishbone_bridge_wdata_converter_source_source_valid;
assign main_wishbone_bridge_wdata_converter_source_first = main_wishbone_bridge_wdata_converter_source_source_first;
assign main_wishbone_bridge_wdata_converter_source_last = main_wishbone_bridge_wdata_converter_source_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_ready = main_wishbone_bridge_wdata_converter_source_ready;
assign {main_wishbone_bridge_wdata_converter_source_payload_we, main_wishbone_bridge_wdata_converter_source_payload_data} = main_wishbone_bridge_wdata_converter_source_source_payload_data;
assign main_wishbone_bridge_wdata_converter_source_source_valid = main_wishbone_bridge_wdata_converter_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_ready = main_wishbone_bridge_wdata_converter_source_source_ready;
assign main_wishbone_bridge_wdata_converter_source_source_first = main_wishbone_bridge_wdata_converter_converter_source_first;
assign main_wishbone_bridge_wdata_converter_source_source_last = main_wishbone_bridge_wdata_converter_converter_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_payload_data = main_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_wdata_converter_converter_first = (main_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign main_wishbone_bridge_wdata_converter_converter_last = (main_wishbone_bridge_wdata_converter_converter_mux == 3'd7);
assign main_wishbone_bridge_wdata_converter_converter_source_valid = main_wishbone_bridge_wdata_converter_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_first = (main_wishbone_bridge_wdata_converter_converter_sink_first & main_wishbone_bridge_wdata_converter_converter_first);
assign main_wishbone_bridge_wdata_converter_converter_source_last = (main_wishbone_bridge_wdata_converter_converter_sink_last & main_wishbone_bridge_wdata_converter_converter_last);
assign main_wishbone_bridge_wdata_converter_converter_sink_ready = (main_wishbone_bridge_wdata_converter_converter_last & main_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
	main_wishbone_bridge_wdata_converter_converter_source_payload_data <= 18'd0;
	case (main_wishbone_bridge_wdata_converter_converter_mux)
		1'd0: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[17:0];
		end
		1'd1: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:18];
		end
		2'd2: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[53:36];
		end
		2'd3: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:54];
		end
		3'd4: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[89:72];
		end
		3'd5: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:90];
		end
		3'd6: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[125:108];
		end
		default: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:126];
		end
	endcase
end
assign main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = main_wishbone_bridge_wdata_converter_converter_last;
assign main_wishbone_bridge_wdata_converter_sink_valid = main_wishbone_bridge_wdata_valid;
assign main_wishbone_bridge_wdata_ready = main_wishbone_bridge_wdata_converter_sink_ready;
assign main_wishbone_bridge_wdata_converter_sink_first = main_wishbone_bridge_wdata_first;
assign main_wishbone_bridge_wdata_converter_sink_last = main_wishbone_bridge_wdata_last;
assign main_wishbone_bridge_wdata_converter_sink_payload_data = main_wishbone_bridge_wdata_payload_data;
assign main_wishbone_bridge_wdata_converter_sink_payload_we = main_wishbone_bridge_wdata_payload_we;
assign main_port_wdata_valid = main_wishbone_bridge_wdata_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_wishbone_bridge_wdata_converter_source_first;
assign main_port_wdata_last = main_wishbone_bridge_wdata_converter_source_last;
assign main_port_wdata_payload_data = main_wishbone_bridge_wdata_converter_source_payload_data;
assign main_port_wdata_payload_we = main_wishbone_bridge_wdata_converter_source_payload_we;
assign main_wishbone_bridge_rdata_converter_converter_sink_valid = main_wishbone_bridge_rdata_converter_sink_valid;
assign main_wishbone_bridge_rdata_converter_converter_sink_first = main_wishbone_bridge_rdata_converter_sink_first;
assign main_wishbone_bridge_rdata_converter_converter_sink_last = main_wishbone_bridge_rdata_converter_sink_last;
assign main_wishbone_bridge_rdata_converter_sink_ready = main_wishbone_bridge_rdata_converter_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_converter_sink_payload_data = {main_wishbone_bridge_rdata_converter_sink_payload_data};
assign main_wishbone_bridge_rdata_converter_source_valid = main_wishbone_bridge_rdata_converter_source_source_valid;
assign main_wishbone_bridge_rdata_converter_source_first = main_wishbone_bridge_rdata_converter_source_source_first;
assign main_wishbone_bridge_rdata_converter_source_last = main_wishbone_bridge_rdata_converter_source_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_ready = main_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
	main_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
	main_wishbone_bridge_rdata_converter_source_payload_data[15:0] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[15:0];
	main_wishbone_bridge_rdata_converter_source_payload_data[31:16] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[31:16];
	main_wishbone_bridge_rdata_converter_source_payload_data[47:32] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[47:32];
	main_wishbone_bridge_rdata_converter_source_payload_data[63:48] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[63:48];
	main_wishbone_bridge_rdata_converter_source_payload_data[79:64] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[79:64];
	main_wishbone_bridge_rdata_converter_source_payload_data[95:80] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[95:80];
	main_wishbone_bridge_rdata_converter_source_payload_data[111:96] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[111:96];
	main_wishbone_bridge_rdata_converter_source_payload_data[127:112] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[127:112];
end
assign main_wishbone_bridge_rdata_converter_source_source_valid = main_wishbone_bridge_rdata_converter_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_converter_source_ready = main_wishbone_bridge_rdata_converter_source_source_ready;
assign main_wishbone_bridge_rdata_converter_source_source_first = main_wishbone_bridge_rdata_converter_converter_source_first;
assign main_wishbone_bridge_rdata_converter_source_source_last = main_wishbone_bridge_rdata_converter_converter_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_payload_data = main_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_rdata_converter_converter_sink_ready = ((~main_wishbone_bridge_rdata_converter_converter_strobe_all) | main_wishbone_bridge_rdata_converter_converter_source_ready);
assign main_wishbone_bridge_rdata_converter_converter_source_valid = main_wishbone_bridge_rdata_converter_converter_strobe_all;
assign main_wishbone_bridge_rdata_converter_converter_load_part = (main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready);
assign main_wishbone_bridge_rdata_converter_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_wishbone_bridge_rdata_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_sink_first = main_port_rdata_first;
assign main_wishbone_bridge_rdata_converter_sink_last = main_port_rdata_last;
assign main_wishbone_bridge_rdata_converter_sink_payload_data = main_port_rdata_payload_data;
assign main_wishbone_bridge_rdata_valid = main_wishbone_bridge_rdata_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_source_ready = main_wishbone_bridge_rdata_ready;
assign main_wishbone_bridge_rdata_first = main_wishbone_bridge_rdata_converter_source_first;
assign main_wishbone_bridge_rdata_last = main_wishbone_bridge_rdata_converter_source_last;
assign main_wishbone_bridge_rdata_payload_data = main_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
	main_wishbone_bridge_cmd_valid <= 1'd0;
	builder_litedramwishbone2native_fsm_next_state <= 2'd0;
	main_interface_ack <= 1'd0;
	main_wishbone_bridge_is_ongoing <= 1'd0;
	main_interface_dat_r <= 128'd0;
	main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value <= 1'd0;
	main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce <= 1'd0;
	builder_litedramwishbone2native_fsm_next_state <= builder_litedramwishbone2native_fsm_state;
	case (builder_litedramwishbone2native_fsm_state)
		1'd1: begin
			main_wishbone_bridge_is_ongoing <= 1'd1;
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce <= 1'd1;
			if ((main_wishbone_bridge_wdata_valid & main_wishbone_bridge_wdata_ready)) begin
				main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
				builder_litedramwishbone2native_fsm_next_state <= 1'd0;
			end
		end
		2'd2: begin
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce <= 1'd1;
			if (main_wishbone_bridge_rdata_valid) begin
				main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
				main_interface_dat_r <= main_wishbone_bridge_rdata_payload_data;
				builder_litedramwishbone2native_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_wishbone_bridge_cmd_valid <= (main_interface_cyc & main_interface_stb);
			if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & main_interface_we)) begin
				builder_litedramwishbone2native_fsm_next_state <= 1'd1;
			end
			if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & (~main_interface_we))) begin
				builder_litedramwishbone2native_fsm_next_state <= 2'd2;
			end
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value <= 1'd0;
			main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce <= 1'd1;
		end
	endcase
end
assign main_sink_ready = 1'd1;
assign main_tmdsencoder0_d0 = main_sink_payload_r;
assign main_tmdsencoder0_c = {main_sink_payload_vsync, main_sink_payload_hsync};
assign main_tmdsencoder0_de = main_sink_payload_de;
assign main_tmdsencoder1_d0 = main_sink_payload_g;
assign main_tmdsencoder1_c = 1'd0;
assign main_tmdsencoder1_de = main_sink_payload_de;
assign main_tmdsencoder2_d0 = main_sink_payload_b;
assign main_tmdsencoder2_c = 1'd0;
assign main_tmdsencoder2_de = main_sink_payload_de;
assign main_tmdsencoder0_q_m8_n = ((main_tmdsencoder0_n1d > 3'd4) | ((main_tmdsencoder0_n1d == 3'd4) & (~main_tmdsencoder0_d1[0])));
assign main_videohdmi10to1serializer0_sink_sink_valid = 1'd1;
assign main_videohdmi10to1serializer0_sink_sink_payload_data = main_tmdsencoder0_out;
assign main_videohdmi10to1serializer0_sink_valid = main_videohdmi10to1serializer0_source_source_valid;
assign main_videohdmi10to1serializer0_source_source_ready = main_videohdmi10to1serializer0_sink_ready;
assign main_videohdmi10to1serializer0_sink_first = main_videohdmi10to1serializer0_source_source_first;
assign main_videohdmi10to1serializer0_sink_last = main_videohdmi10to1serializer0_source_source_last;
assign main_videohdmi10to1serializer0_sink_payload_data = main_videohdmi10to1serializer0_source_source_payload_data;
assign main_videohdmi10to1serializer0_source_ready = 1'd1;
assign main_videohdmi10to1serializer0_cdc_sink_valid = main_videohdmi10to1serializer0_sink_sink_valid;
assign main_videohdmi10to1serializer0_sink_sink_ready = main_videohdmi10to1serializer0_cdc_sink_ready;
assign main_videohdmi10to1serializer0_cdc_sink_first = main_videohdmi10to1serializer0_sink_sink_first;
assign main_videohdmi10to1serializer0_cdc_sink_last = main_videohdmi10to1serializer0_sink_sink_last;
assign main_videohdmi10to1serializer0_cdc_sink_payload_data = main_videohdmi10to1serializer0_sink_sink_payload_data;
assign main_videohdmi10to1serializer0_source_source_valid = main_videohdmi10to1serializer0_cdc_source_valid;
assign main_videohdmi10to1serializer0_cdc_source_ready = main_videohdmi10to1serializer0_source_source_ready;
assign main_videohdmi10to1serializer0_source_source_first = main_videohdmi10to1serializer0_cdc_source_first;
assign main_videohdmi10to1serializer0_source_source_last = main_videohdmi10to1serializer0_cdc_source_last;
assign main_videohdmi10to1serializer0_source_source_payload_data = main_videohdmi10to1serializer0_cdc_source_payload_data;
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_din = {main_videohdmi10to1serializer0_cdc_fifo_in_last, main_videohdmi10to1serializer0_cdc_fifo_in_first, main_videohdmi10to1serializer0_cdc_fifo_in_payload_data};
assign {main_videohdmi10to1serializer0_cdc_fifo_out_last, main_videohdmi10to1serializer0_cdc_fifo_out_first, main_videohdmi10to1serializer0_cdc_fifo_out_payload_data} = main_videohdmi10to1serializer0_cdc_asyncfifo0_dout;
assign main_videohdmi10to1serializer0_cdc_sink_ready = main_videohdmi10to1serializer0_cdc_asyncfifo0_writable;
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_we = main_videohdmi10to1serializer0_cdc_sink_valid;
assign main_videohdmi10to1serializer0_cdc_fifo_in_first = main_videohdmi10to1serializer0_cdc_sink_first;
assign main_videohdmi10to1serializer0_cdc_fifo_in_last = main_videohdmi10to1serializer0_cdc_sink_last;
assign main_videohdmi10to1serializer0_cdc_fifo_in_payload_data = main_videohdmi10to1serializer0_cdc_sink_payload_data;
assign main_videohdmi10to1serializer0_cdc_source_valid = main_videohdmi10to1serializer0_cdc_asyncfifo0_readable;
assign main_videohdmi10to1serializer0_cdc_source_first = main_videohdmi10to1serializer0_cdc_fifo_out_first;
assign main_videohdmi10to1serializer0_cdc_source_last = main_videohdmi10to1serializer0_cdc_fifo_out_last;
assign main_videohdmi10to1serializer0_cdc_source_payload_data = main_videohdmi10to1serializer0_cdc_fifo_out_payload_data;
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_re = main_videohdmi10to1serializer0_cdc_source_ready;
assign main_videohdmi10to1serializer0_cdc_graycounter0_ce = (main_videohdmi10to1serializer0_cdc_asyncfifo0_writable & main_videohdmi10to1serializer0_cdc_asyncfifo0_we);
assign main_videohdmi10to1serializer0_cdc_graycounter1_ce = (main_videohdmi10to1serializer0_cdc_asyncfifo0_readable & main_videohdmi10to1serializer0_cdc_asyncfifo0_re);
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_writable = (((main_videohdmi10to1serializer0_cdc_graycounter0_q[2] == main_videohdmi10to1serializer0_cdc_consume_wdomain[2]) | (main_videohdmi10to1serializer0_cdc_graycounter0_q[1] == main_videohdmi10to1serializer0_cdc_consume_wdomain[1])) | (main_videohdmi10to1serializer0_cdc_graycounter0_q[0] != main_videohdmi10to1serializer0_cdc_consume_wdomain[0]));
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_readable = (main_videohdmi10to1serializer0_cdc_graycounter1_q != main_videohdmi10to1serializer0_cdc_produce_rdomain);
assign main_videohdmi10to1serializer0_cdc_wrport_adr = main_videohdmi10to1serializer0_cdc_graycounter0_q_binary[1:0];
assign main_videohdmi10to1serializer0_cdc_wrport_dat_w = main_videohdmi10to1serializer0_cdc_asyncfifo0_din;
assign main_videohdmi10to1serializer0_cdc_wrport_we = main_videohdmi10to1serializer0_cdc_graycounter0_ce;
assign main_videohdmi10to1serializer0_cdc_rdport_adr = main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[1:0];
assign main_videohdmi10to1serializer0_cdc_asyncfifo0_dout = main_videohdmi10to1serializer0_cdc_rdport_dat_r;
always @(*) begin
	main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer0_cdc_graycounter0_ce) begin
		main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= (main_videohdmi10to1serializer0_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary <= main_videohdmi10to1serializer0_cdc_graycounter0_q_binary;
	end
end
assign main_videohdmi10to1serializer0_cdc_graycounter0_q_next = (main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary ^ main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer0_cdc_graycounter1_ce) begin
		main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= (main_videohdmi10to1serializer0_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary <= main_videohdmi10to1serializer0_cdc_graycounter1_q_binary;
	end
end
assign main_videohdmi10to1serializer0_cdc_graycounter1_q_next = (main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary ^ main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary[2:1]);
assign main_videohdmi10to1serializer0_sink_ready = (main_videohdmi10to1serializer0_level < 4'd10);
assign main_videohdmi10to1serializer0_source_valid = (main_videohdmi10to1serializer0_level >= 2'd2);
assign main_videohdmi10to1serializer0_i_inc = (main_videohdmi10to1serializer0_sink_valid & main_videohdmi10to1serializer0_sink_ready);
assign main_videohdmi10to1serializer0_o_inc = (main_videohdmi10to1serializer0_source_valid & main_videohdmi10to1serializer0_source_ready);
assign main_videohdmi10to1serializer0_i_data = {main_videohdmi10to1serializer0_sink_payload_data[0], main_videohdmi10to1serializer0_sink_payload_data[1], main_videohdmi10to1serializer0_sink_payload_data[2], main_videohdmi10to1serializer0_sink_payload_data[3], main_videohdmi10to1serializer0_sink_payload_data[4], main_videohdmi10to1serializer0_sink_payload_data[5], main_videohdmi10to1serializer0_sink_payload_data[6], main_videohdmi10to1serializer0_sink_payload_data[7], main_videohdmi10to1serializer0_sink_payload_data[8], main_videohdmi10to1serializer0_sink_payload_data[9]};
always @(*) begin
	main_videohdmi10to1serializer0_o_data <= 2'd0;
	case (main_videohdmi10to1serializer0_o_count)
		1'd0: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[19:18];
		end
		1'd1: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[17:16];
		end
		2'd2: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[15:14];
		end
		2'd3: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[13:12];
		end
		3'd4: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[11:10];
		end
		3'd5: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[9:8];
		end
		3'd6: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[7:6];
		end
		3'd7: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[5:4];
		end
		4'd8: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[3:2];
		end
		4'd9: begin
			main_videohdmi10to1serializer0_o_data <= main_videohdmi10to1serializer0_shift_register[1:0];
		end
	endcase
end
assign main_videohdmi10to1serializer0_source_payload_data = {main_videohdmi10to1serializer0_o_data[0], main_videohdmi10to1serializer0_o_data[1]};
assign main_tmdsencoder1_q_m8_n = ((main_tmdsencoder1_n1d > 3'd4) | ((main_tmdsencoder1_n1d == 3'd4) & (~main_tmdsencoder1_d1[0])));
assign main_videohdmi10to1serializer1_sink_sink_valid = 1'd1;
assign main_videohdmi10to1serializer1_sink_sink_payload_data = main_tmdsencoder1_out;
assign main_videohdmi10to1serializer1_sink_valid = main_videohdmi10to1serializer1_source_source_valid;
assign main_videohdmi10to1serializer1_source_source_ready = main_videohdmi10to1serializer1_sink_ready;
assign main_videohdmi10to1serializer1_sink_first = main_videohdmi10to1serializer1_source_source_first;
assign main_videohdmi10to1serializer1_sink_last = main_videohdmi10to1serializer1_source_source_last;
assign main_videohdmi10to1serializer1_sink_payload_data = main_videohdmi10to1serializer1_source_source_payload_data;
assign main_videohdmi10to1serializer1_source_ready = 1'd1;
assign main_videohdmi10to1serializer1_cdc_sink_valid = main_videohdmi10to1serializer1_sink_sink_valid;
assign main_videohdmi10to1serializer1_sink_sink_ready = main_videohdmi10to1serializer1_cdc_sink_ready;
assign main_videohdmi10to1serializer1_cdc_sink_first = main_videohdmi10to1serializer1_sink_sink_first;
assign main_videohdmi10to1serializer1_cdc_sink_last = main_videohdmi10to1serializer1_sink_sink_last;
assign main_videohdmi10to1serializer1_cdc_sink_payload_data = main_videohdmi10to1serializer1_sink_sink_payload_data;
assign main_videohdmi10to1serializer1_source_source_valid = main_videohdmi10to1serializer1_cdc_source_valid;
assign main_videohdmi10to1serializer1_cdc_source_ready = main_videohdmi10to1serializer1_source_source_ready;
assign main_videohdmi10to1serializer1_source_source_first = main_videohdmi10to1serializer1_cdc_source_first;
assign main_videohdmi10to1serializer1_source_source_last = main_videohdmi10to1serializer1_cdc_source_last;
assign main_videohdmi10to1serializer1_source_source_payload_data = main_videohdmi10to1serializer1_cdc_source_payload_data;
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_din = {main_videohdmi10to1serializer1_cdc_fifo_in_last, main_videohdmi10to1serializer1_cdc_fifo_in_first, main_videohdmi10to1serializer1_cdc_fifo_in_payload_data};
assign {main_videohdmi10to1serializer1_cdc_fifo_out_last, main_videohdmi10to1serializer1_cdc_fifo_out_first, main_videohdmi10to1serializer1_cdc_fifo_out_payload_data} = main_videohdmi10to1serializer1_cdc_asyncfifo1_dout;
assign main_videohdmi10to1serializer1_cdc_sink_ready = main_videohdmi10to1serializer1_cdc_asyncfifo1_writable;
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_we = main_videohdmi10to1serializer1_cdc_sink_valid;
assign main_videohdmi10to1serializer1_cdc_fifo_in_first = main_videohdmi10to1serializer1_cdc_sink_first;
assign main_videohdmi10to1serializer1_cdc_fifo_in_last = main_videohdmi10to1serializer1_cdc_sink_last;
assign main_videohdmi10to1serializer1_cdc_fifo_in_payload_data = main_videohdmi10to1serializer1_cdc_sink_payload_data;
assign main_videohdmi10to1serializer1_cdc_source_valid = main_videohdmi10to1serializer1_cdc_asyncfifo1_readable;
assign main_videohdmi10to1serializer1_cdc_source_first = main_videohdmi10to1serializer1_cdc_fifo_out_first;
assign main_videohdmi10to1serializer1_cdc_source_last = main_videohdmi10to1serializer1_cdc_fifo_out_last;
assign main_videohdmi10to1serializer1_cdc_source_payload_data = main_videohdmi10to1serializer1_cdc_fifo_out_payload_data;
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_re = main_videohdmi10to1serializer1_cdc_source_ready;
assign main_videohdmi10to1serializer1_cdc_graycounter2_ce = (main_videohdmi10to1serializer1_cdc_asyncfifo1_writable & main_videohdmi10to1serializer1_cdc_asyncfifo1_we);
assign main_videohdmi10to1serializer1_cdc_graycounter3_ce = (main_videohdmi10to1serializer1_cdc_asyncfifo1_readable & main_videohdmi10to1serializer1_cdc_asyncfifo1_re);
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_writable = (((main_videohdmi10to1serializer1_cdc_graycounter2_q[2] == main_videohdmi10to1serializer1_cdc_consume_wdomain[2]) | (main_videohdmi10to1serializer1_cdc_graycounter2_q[1] == main_videohdmi10to1serializer1_cdc_consume_wdomain[1])) | (main_videohdmi10to1serializer1_cdc_graycounter2_q[0] != main_videohdmi10to1serializer1_cdc_consume_wdomain[0]));
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_readable = (main_videohdmi10to1serializer1_cdc_graycounter3_q != main_videohdmi10to1serializer1_cdc_produce_rdomain);
assign main_videohdmi10to1serializer1_cdc_wrport_adr = main_videohdmi10to1serializer1_cdc_graycounter2_q_binary[1:0];
assign main_videohdmi10to1serializer1_cdc_wrport_dat_w = main_videohdmi10to1serializer1_cdc_asyncfifo1_din;
assign main_videohdmi10to1serializer1_cdc_wrport_we = main_videohdmi10to1serializer1_cdc_graycounter2_ce;
assign main_videohdmi10to1serializer1_cdc_rdport_adr = main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[1:0];
assign main_videohdmi10to1serializer1_cdc_asyncfifo1_dout = main_videohdmi10to1serializer1_cdc_rdport_dat_r;
always @(*) begin
	main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer1_cdc_graycounter2_ce) begin
		main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= (main_videohdmi10to1serializer1_cdc_graycounter2_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary <= main_videohdmi10to1serializer1_cdc_graycounter2_q_binary;
	end
end
assign main_videohdmi10to1serializer1_cdc_graycounter2_q_next = (main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary ^ main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary[2:1]);
always @(*) begin
	main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer1_cdc_graycounter3_ce) begin
		main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= (main_videohdmi10to1serializer1_cdc_graycounter3_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary <= main_videohdmi10to1serializer1_cdc_graycounter3_q_binary;
	end
end
assign main_videohdmi10to1serializer1_cdc_graycounter3_q_next = (main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary ^ main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary[2:1]);
assign main_videohdmi10to1serializer1_sink_ready = (main_videohdmi10to1serializer1_level < 4'd10);
assign main_videohdmi10to1serializer1_source_valid = (main_videohdmi10to1serializer1_level >= 2'd2);
assign main_videohdmi10to1serializer1_i_inc = (main_videohdmi10to1serializer1_sink_valid & main_videohdmi10to1serializer1_sink_ready);
assign main_videohdmi10to1serializer1_o_inc = (main_videohdmi10to1serializer1_source_valid & main_videohdmi10to1serializer1_source_ready);
assign main_videohdmi10to1serializer1_i_data = {main_videohdmi10to1serializer1_sink_payload_data[0], main_videohdmi10to1serializer1_sink_payload_data[1], main_videohdmi10to1serializer1_sink_payload_data[2], main_videohdmi10to1serializer1_sink_payload_data[3], main_videohdmi10to1serializer1_sink_payload_data[4], main_videohdmi10to1serializer1_sink_payload_data[5], main_videohdmi10to1serializer1_sink_payload_data[6], main_videohdmi10to1serializer1_sink_payload_data[7], main_videohdmi10to1serializer1_sink_payload_data[8], main_videohdmi10to1serializer1_sink_payload_data[9]};
always @(*) begin
	main_videohdmi10to1serializer1_o_data <= 2'd0;
	case (main_videohdmi10to1serializer1_o_count)
		1'd0: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[19:18];
		end
		1'd1: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[17:16];
		end
		2'd2: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[15:14];
		end
		2'd3: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[13:12];
		end
		3'd4: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[11:10];
		end
		3'd5: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[9:8];
		end
		3'd6: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[7:6];
		end
		3'd7: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[5:4];
		end
		4'd8: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[3:2];
		end
		4'd9: begin
			main_videohdmi10to1serializer1_o_data <= main_videohdmi10to1serializer1_shift_register[1:0];
		end
	endcase
end
assign main_videohdmi10to1serializer1_source_payload_data = {main_videohdmi10to1serializer1_o_data[0], main_videohdmi10to1serializer1_o_data[1]};
assign main_tmdsencoder2_q_m8_n = ((main_tmdsencoder2_n1d > 3'd4) | ((main_tmdsencoder2_n1d == 3'd4) & (~main_tmdsencoder2_d1[0])));
assign main_videohdmi10to1serializer2_sink_sink_valid = 1'd1;
assign main_videohdmi10to1serializer2_sink_sink_payload_data = main_tmdsencoder2_out;
assign main_videohdmi10to1serializer2_sink_valid = main_videohdmi10to1serializer2_source_source_valid;
assign main_videohdmi10to1serializer2_source_source_ready = main_videohdmi10to1serializer2_sink_ready;
assign main_videohdmi10to1serializer2_sink_first = main_videohdmi10to1serializer2_source_source_first;
assign main_videohdmi10to1serializer2_sink_last = main_videohdmi10to1serializer2_source_source_last;
assign main_videohdmi10to1serializer2_sink_payload_data = main_videohdmi10to1serializer2_source_source_payload_data;
assign main_videohdmi10to1serializer2_source_ready = 1'd1;
assign main_videohdmi10to1serializer2_cdc_sink_valid = main_videohdmi10to1serializer2_sink_sink_valid;
assign main_videohdmi10to1serializer2_sink_sink_ready = main_videohdmi10to1serializer2_cdc_sink_ready;
assign main_videohdmi10to1serializer2_cdc_sink_first = main_videohdmi10to1serializer2_sink_sink_first;
assign main_videohdmi10to1serializer2_cdc_sink_last = main_videohdmi10to1serializer2_sink_sink_last;
assign main_videohdmi10to1serializer2_cdc_sink_payload_data = main_videohdmi10to1serializer2_sink_sink_payload_data;
assign main_videohdmi10to1serializer2_source_source_valid = main_videohdmi10to1serializer2_cdc_source_valid;
assign main_videohdmi10to1serializer2_cdc_source_ready = main_videohdmi10to1serializer2_source_source_ready;
assign main_videohdmi10to1serializer2_source_source_first = main_videohdmi10to1serializer2_cdc_source_first;
assign main_videohdmi10to1serializer2_source_source_last = main_videohdmi10to1serializer2_cdc_source_last;
assign main_videohdmi10to1serializer2_source_source_payload_data = main_videohdmi10to1serializer2_cdc_source_payload_data;
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_din = {main_videohdmi10to1serializer2_cdc_fifo_in_last, main_videohdmi10to1serializer2_cdc_fifo_in_first, main_videohdmi10to1serializer2_cdc_fifo_in_payload_data};
assign {main_videohdmi10to1serializer2_cdc_fifo_out_last, main_videohdmi10to1serializer2_cdc_fifo_out_first, main_videohdmi10to1serializer2_cdc_fifo_out_payload_data} = main_videohdmi10to1serializer2_cdc_asyncfifo2_dout;
assign main_videohdmi10to1serializer2_cdc_sink_ready = main_videohdmi10to1serializer2_cdc_asyncfifo2_writable;
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_we = main_videohdmi10to1serializer2_cdc_sink_valid;
assign main_videohdmi10to1serializer2_cdc_fifo_in_first = main_videohdmi10to1serializer2_cdc_sink_first;
assign main_videohdmi10to1serializer2_cdc_fifo_in_last = main_videohdmi10to1serializer2_cdc_sink_last;
assign main_videohdmi10to1serializer2_cdc_fifo_in_payload_data = main_videohdmi10to1serializer2_cdc_sink_payload_data;
assign main_videohdmi10to1serializer2_cdc_source_valid = main_videohdmi10to1serializer2_cdc_asyncfifo2_readable;
assign main_videohdmi10to1serializer2_cdc_source_first = main_videohdmi10to1serializer2_cdc_fifo_out_first;
assign main_videohdmi10to1serializer2_cdc_source_last = main_videohdmi10to1serializer2_cdc_fifo_out_last;
assign main_videohdmi10to1serializer2_cdc_source_payload_data = main_videohdmi10to1serializer2_cdc_fifo_out_payload_data;
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_re = main_videohdmi10to1serializer2_cdc_source_ready;
assign main_videohdmi10to1serializer2_cdc_graycounter4_ce = (main_videohdmi10to1serializer2_cdc_asyncfifo2_writable & main_videohdmi10to1serializer2_cdc_asyncfifo2_we);
assign main_videohdmi10to1serializer2_cdc_graycounter5_ce = (main_videohdmi10to1serializer2_cdc_asyncfifo2_readable & main_videohdmi10to1serializer2_cdc_asyncfifo2_re);
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_writable = (((main_videohdmi10to1serializer2_cdc_graycounter4_q[2] == main_videohdmi10to1serializer2_cdc_consume_wdomain[2]) | (main_videohdmi10to1serializer2_cdc_graycounter4_q[1] == main_videohdmi10to1serializer2_cdc_consume_wdomain[1])) | (main_videohdmi10to1serializer2_cdc_graycounter4_q[0] != main_videohdmi10to1serializer2_cdc_consume_wdomain[0]));
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_readable = (main_videohdmi10to1serializer2_cdc_graycounter5_q != main_videohdmi10to1serializer2_cdc_produce_rdomain);
assign main_videohdmi10to1serializer2_cdc_wrport_adr = main_videohdmi10to1serializer2_cdc_graycounter4_q_binary[1:0];
assign main_videohdmi10to1serializer2_cdc_wrport_dat_w = main_videohdmi10to1serializer2_cdc_asyncfifo2_din;
assign main_videohdmi10to1serializer2_cdc_wrport_we = main_videohdmi10to1serializer2_cdc_graycounter4_ce;
assign main_videohdmi10to1serializer2_cdc_rdport_adr = main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[1:0];
assign main_videohdmi10to1serializer2_cdc_asyncfifo2_dout = main_videohdmi10to1serializer2_cdc_rdport_dat_r;
always @(*) begin
	main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer2_cdc_graycounter4_ce) begin
		main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= (main_videohdmi10to1serializer2_cdc_graycounter4_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary <= main_videohdmi10to1serializer2_cdc_graycounter4_q_binary;
	end
end
assign main_videohdmi10to1serializer2_cdc_graycounter4_q_next = (main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary ^ main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary[2:1]);
always @(*) begin
	main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= 3'd0;
	if (main_videohdmi10to1serializer2_cdc_graycounter5_ce) begin
		main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= (main_videohdmi10to1serializer2_cdc_graycounter5_q_binary + 1'd1);
	end else begin
		main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary <= main_videohdmi10to1serializer2_cdc_graycounter5_q_binary;
	end
end
assign main_videohdmi10to1serializer2_cdc_graycounter5_q_next = (main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary ^ main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary[2:1]);
assign main_videohdmi10to1serializer2_sink_ready = (main_videohdmi10to1serializer2_level < 4'd10);
assign main_videohdmi10to1serializer2_source_valid = (main_videohdmi10to1serializer2_level >= 2'd2);
assign main_videohdmi10to1serializer2_i_inc = (main_videohdmi10to1serializer2_sink_valid & main_videohdmi10to1serializer2_sink_ready);
assign main_videohdmi10to1serializer2_o_inc = (main_videohdmi10to1serializer2_source_valid & main_videohdmi10to1serializer2_source_ready);
assign main_videohdmi10to1serializer2_i_data = {main_videohdmi10to1serializer2_sink_payload_data[0], main_videohdmi10to1serializer2_sink_payload_data[1], main_videohdmi10to1serializer2_sink_payload_data[2], main_videohdmi10to1serializer2_sink_payload_data[3], main_videohdmi10to1serializer2_sink_payload_data[4], main_videohdmi10to1serializer2_sink_payload_data[5], main_videohdmi10to1serializer2_sink_payload_data[6], main_videohdmi10to1serializer2_sink_payload_data[7], main_videohdmi10to1serializer2_sink_payload_data[8], main_videohdmi10to1serializer2_sink_payload_data[9]};
always @(*) begin
	main_videohdmi10to1serializer2_o_data <= 2'd0;
	case (main_videohdmi10to1serializer2_o_count)
		1'd0: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[19:18];
		end
		1'd1: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[17:16];
		end
		2'd2: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[15:14];
		end
		2'd3: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[13:12];
		end
		3'd4: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[11:10];
		end
		3'd5: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[9:8];
		end
		3'd6: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[7:6];
		end
		3'd7: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[5:4];
		end
		4'd8: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[3:2];
		end
		4'd9: begin
			main_videohdmi10to1serializer2_o_data <= main_videohdmi10to1serializer2_shift_register[1:0];
		end
	endcase
end
assign main_videohdmi10to1serializer2_source_payload_data = {main_videohdmi10to1serializer2_o_data[0], main_videohdmi10to1serializer2_o_data[1]};
assign main_vtg_reset = (~main_vtg_enable);
assign main_vtg_source_payload_de = (main_vtg_hactive & main_vtg_vactive);
always @(*) begin
	main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 12'd0;
	main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd0;
	main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
	main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd0;
	builder_clockdomainsrenamer_next_state <= 1'd0;
	main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
	main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
	main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd0;
	main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd0;
	main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
	main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd0;
	main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= 12'd0;
	main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd0;
	main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= 12'd0;
	main_vtg_source_valid <= 1'd0;
	main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd0;
	main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 12'd0;
	main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd0;
	builder_clockdomainsrenamer_next_state <= builder_clockdomainsrenamer_state;
	case (builder_clockdomainsrenamer_state)
		1'd1: begin
			main_vtg_source_valid <= 1'd1;
			if (main_vtg_source_ready) begin
				main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= (main_vtg_source_payload_hcount + 1'd1);
				main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
				if ((main_vtg_source_payload_hcount == 1'd0)) begin
					main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd1;
					main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hres)) begin
					main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
					main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
					main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd1;
					main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_end)) begin
					main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
					main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hscan)) begin
					main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
					main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
					main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= (main_vtg_source_payload_vcount + 1'd1);
					main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
					if ((main_vtg_source_payload_vcount == 1'd0)) begin
						main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd1;
						main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vres)) begin
						main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
						main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vsync_start)) begin
						main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd1;
						main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vsync_end)) begin
						main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
						main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vscan)) begin
						main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
						main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
					end
				end
			end
		end
		default: begin
			main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
			main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
			main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
			main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
			main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= main_vtg_hres;
			main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd1;
			main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= main_vtg_vres;
			main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd1;
			main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
			main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
			main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
			main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
			builder_clockdomainsrenamer_next_state <= 1'd1;
		end
	endcase
end
assign main_vfb_conv_converter_sink_valid = main_vfb_dma_source_source_valid;
assign main_vfb_dma_source_source_ready = main_vfb_conv_converter_sink_ready;
assign main_vfb_conv_converter_sink_first = main_vfb_dma_source_source_first;
assign main_vfb_conv_converter_sink_last = main_vfb_dma_source_source_last;
assign main_vfb_conv_converter_sink_payload_data = main_vfb_dma_source_source_payload_data;
assign main_vfb_cdc_sink_sink_valid = main_vfb_conv_source_source_valid;
assign main_vfb_conv_source_source_ready = main_vfb_cdc_sink_sink_ready;
assign main_vfb_cdc_sink_sink_first = main_vfb_conv_source_source_first;
assign main_vfb_cdc_sink_sink_last = main_vfb_conv_source_source_last;
always @(*) begin
	main_vfb_cdc_sink_sink_payload_data <= 32'd0;
	main_vfb_cdc_sink_sink_payload_data <= main_vfb_conv_source_source_payload_data;
	main_vfb_cdc_sink_sink_payload_data[7:0] <= main_vfb_conv_source_source_payload_data[23:16];
	main_vfb_cdc_sink_sink_payload_data[23:16] <= main_vfb_conv_source_source_payload_data[7:0];
end
always @(*) begin
	main_vfb_cdc_source_source_ready <= 1'd0;
	main_vfb_vtg_sink_ready <= 1'd0;
	main_vfb_source_valid <= 1'd0;
	main_vfb_vtg_sink_ready <= 1'd1;
	if ((main_vfb_vtg_sink_valid & main_vfb_vtg_sink_payload_de)) begin
		main_vfb_source_valid <= main_vfb_cdc_source_source_valid;
		main_vfb_cdc_source_source_ready <= main_vfb_source_ready;
		main_vfb_vtg_sink_ready <= (main_vfb_source_valid & main_vfb_source_ready);
	end
end
assign main_vfb_source_payload_hsync = main_vfb_vtg_sink_payload_hsync;
assign main_vfb_source_payload_vsync = main_vfb_vtg_sink_payload_vsync;
assign main_vfb_source_payload_de = main_vfb_vtg_sink_payload_de;
assign main_vfb_source_payload_r = main_vfb_cdc_source_source_payload_data[23:16];
assign main_vfb_source_payload_g = main_vfb_cdc_source_source_payload_data[15:8];
assign main_vfb_source_payload_b = main_vfb_cdc_source_source_payload_data[7:0];
assign main_vfb_underflow = (~main_vfb_source_valid);
assign main_litedramcrossbar_cmd_payload_we = 1'd0;
assign main_litedramcrossbar_cmd_payload_addr = main_vfb_dma_sink_sink_payload_address;
assign main_litedramcrossbar_cmd_valid = ((main_vfb_dma_enable & main_vfb_dma_sink_sink_valid) & main_vfb_dma_request_enable);
assign main_vfb_dma_sink_sink_ready = ((main_vfb_dma_enable & main_litedramcrossbar_cmd_ready) & main_vfb_dma_request_enable);
assign main_vfb_dma_request_issued = (main_litedramcrossbar_cmd_valid & main_litedramcrossbar_cmd_ready);
assign main_vfb_dma_request_enable = (main_vfb_dma_rsv_level != 16'd32768);
assign main_vfb_dma_fifo_sink_valid = main_litedramcrossbar_rdata_valid;
assign main_litedramcrossbar_rdata_ready = main_vfb_dma_fifo_sink_ready;
assign main_vfb_dma_fifo_sink_first = main_litedramcrossbar_rdata_first;
assign main_vfb_dma_fifo_sink_last = main_litedramcrossbar_rdata_last;
assign main_vfb_dma_fifo_sink_payload_data = main_litedramcrossbar_rdata_payload_data;
assign main_vfb_dma_source_source_valid = main_vfb_dma_fifo_source_valid;
assign main_vfb_dma_source_source_first = main_vfb_dma_fifo_source_first;
assign main_vfb_dma_source_source_last = main_vfb_dma_fifo_source_last;
assign main_vfb_dma_source_source_payload_data = main_vfb_dma_fifo_source_payload_data;
assign main_vfb_dma_fifo_source_ready = (main_vfb_dma_source_source_ready | (~main_vfb_dma_enable));
assign main_vfb_dma_data_dequeued = (main_vfb_dma_fifo_source_valid & main_vfb_dma_fifo_source_ready);
assign main_vfb_dma_enable = main_vfb_enable_storage;
assign main_vfb_base = main_vfb_base_storage[31:1];
assign main_vfb_length = main_vfb_length_storage[31:1];
assign main_vfb_offset_status = main_vfb_offset;
assign main_vfb_reset = (~main_vfb_enable_storage);
assign main_vfb_dma_fifo_syncfifo_din = {main_vfb_dma_fifo_fifo_in_last, main_vfb_dma_fifo_fifo_in_first, main_vfb_dma_fifo_fifo_in_payload_data};
assign {main_vfb_dma_fifo_fifo_out_last, main_vfb_dma_fifo_fifo_out_first, main_vfb_dma_fifo_fifo_out_payload_data} = main_vfb_dma_fifo_syncfifo_dout;
assign main_vfb_dma_fifo_sink_ready = main_vfb_dma_fifo_syncfifo_writable;
assign main_vfb_dma_fifo_syncfifo_we = main_vfb_dma_fifo_sink_valid;
assign main_vfb_dma_fifo_fifo_in_first = main_vfb_dma_fifo_sink_first;
assign main_vfb_dma_fifo_fifo_in_last = main_vfb_dma_fifo_sink_last;
assign main_vfb_dma_fifo_fifo_in_payload_data = main_vfb_dma_fifo_sink_payload_data;
assign main_vfb_dma_fifo_source_valid = main_vfb_dma_fifo_readable;
assign main_vfb_dma_fifo_source_first = main_vfb_dma_fifo_fifo_out_first;
assign main_vfb_dma_fifo_source_last = main_vfb_dma_fifo_fifo_out_last;
assign main_vfb_dma_fifo_source_payload_data = main_vfb_dma_fifo_fifo_out_payload_data;
assign main_vfb_dma_fifo_re = main_vfb_dma_fifo_source_ready;
assign main_vfb_dma_fifo_syncfifo_re = (main_vfb_dma_fifo_syncfifo_readable & ((~main_vfb_dma_fifo_readable) | main_vfb_dma_fifo_re));
assign main_vfb_dma_fifo_level1 = (main_vfb_dma_fifo_level0 + main_vfb_dma_fifo_readable);
always @(*) begin
	main_vfb_dma_fifo_wrport_adr <= 15'd0;
	if (main_vfb_dma_fifo_replace) begin
		main_vfb_dma_fifo_wrport_adr <= (main_vfb_dma_fifo_produce - 1'd1);
	end else begin
		main_vfb_dma_fifo_wrport_adr <= main_vfb_dma_fifo_produce;
	end
end
assign main_vfb_dma_fifo_wrport_dat_w = main_vfb_dma_fifo_syncfifo_din;
assign main_vfb_dma_fifo_wrport_we = (main_vfb_dma_fifo_syncfifo_we & (main_vfb_dma_fifo_syncfifo_writable | main_vfb_dma_fifo_replace));
assign main_vfb_dma_fifo_do_read = (main_vfb_dma_fifo_syncfifo_readable & main_vfb_dma_fifo_syncfifo_re);
assign main_vfb_dma_fifo_rdport_adr = main_vfb_dma_fifo_consume;
assign main_vfb_dma_fifo_syncfifo_dout = main_vfb_dma_fifo_rdport_dat_r;
assign main_vfb_dma_fifo_rdport_re = main_vfb_dma_fifo_do_read;
assign main_vfb_dma_fifo_syncfifo_writable = (main_vfb_dma_fifo_level0 != 16'd32768);
assign main_vfb_dma_fifo_syncfifo_readable = (main_vfb_dma_fifo_level0 != 1'd0);
always @(*) begin
	main_vfb_done_status <= 1'd0;
	main_vfb_dma_sink_sink_last <= 1'd0;
	main_vfb_dma_sink_sink_payload_address <= 24'd0;
	builder_videoframebuffer_next_state <= 2'd0;
	main_vfb_offset_videoframebuffer_next_value <= 24'd0;
	main_vfb_offset_videoframebuffer_next_value_ce <= 1'd0;
	main_vfb_dma_sink_sink_valid <= 1'd0;
	builder_videoframebuffer_next_state <= builder_videoframebuffer_state;
	case (builder_videoframebuffer_state)
		1'd1: begin
			main_vfb_dma_sink_sink_valid <= 1'd1;
			main_vfb_dma_sink_sink_last <= (main_vfb_offset == (main_vfb_length - 1'd1));
			main_vfb_dma_sink_sink_payload_address <= (main_vfb_base + main_vfb_offset);
			if (main_vfb_dma_sink_sink_ready) begin
				main_vfb_offset_videoframebuffer_next_value <= (main_vfb_offset + 1'd1);
				main_vfb_offset_videoframebuffer_next_value_ce <= 1'd1;
				if (main_vfb_dma_sink_sink_last) begin
					if (main_vfb_loop_storage) begin
						main_vfb_offset_videoframebuffer_next_value <= 1'd0;
						main_vfb_offset_videoframebuffer_next_value_ce <= 1'd1;
					end else begin
						builder_videoframebuffer_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			main_vfb_done_status <= 1'd1;
		end
		default: begin
			main_vfb_offset_videoframebuffer_next_value <= 1'd0;
			main_vfb_offset_videoframebuffer_next_value_ce <= 1'd1;
			builder_videoframebuffer_next_state <= 1'd1;
		end
	endcase
end
assign main_vfb_conv_source_source_valid = main_vfb_conv_converter_source_valid;
assign main_vfb_conv_converter_source_ready = main_vfb_conv_source_source_ready;
assign main_vfb_conv_source_source_first = main_vfb_conv_converter_source_first;
assign main_vfb_conv_source_source_last = main_vfb_conv_converter_source_last;
assign main_vfb_conv_source_source_payload_data = main_vfb_conv_converter_source_payload_data;
assign main_vfb_conv_converter_sink_ready = ((~main_vfb_conv_converter_strobe_all) | main_vfb_conv_converter_source_ready);
assign main_vfb_conv_converter_source_valid = main_vfb_conv_converter_strobe_all;
assign main_vfb_conv_converter_load_part = (main_vfb_conv_converter_sink_valid & main_vfb_conv_converter_sink_ready);
assign main_vfb_cdc_cdc_sink_valid = main_vfb_cdc_sink_sink_valid;
assign main_vfb_cdc_sink_sink_ready = main_vfb_cdc_cdc_sink_ready;
assign main_vfb_cdc_cdc_sink_first = main_vfb_cdc_sink_sink_first;
assign main_vfb_cdc_cdc_sink_last = main_vfb_cdc_sink_sink_last;
assign main_vfb_cdc_cdc_sink_payload_data = main_vfb_cdc_sink_sink_payload_data;
assign main_vfb_cdc_source_source_valid = main_vfb_cdc_cdc_source_valid;
assign main_vfb_cdc_cdc_source_ready = main_vfb_cdc_source_source_ready;
assign main_vfb_cdc_source_source_first = main_vfb_cdc_cdc_source_first;
assign main_vfb_cdc_source_source_last = main_vfb_cdc_cdc_source_last;
assign main_vfb_cdc_source_source_payload_data = main_vfb_cdc_cdc_source_payload_data;
assign main_vfb_cdc_cdc_asyncfifo_din = {main_vfb_cdc_cdc_fifo_in_last, main_vfb_cdc_cdc_fifo_in_first, main_vfb_cdc_cdc_fifo_in_payload_data};
assign {main_vfb_cdc_cdc_fifo_out_last, main_vfb_cdc_cdc_fifo_out_first, main_vfb_cdc_cdc_fifo_out_payload_data} = main_vfb_cdc_cdc_asyncfifo_dout;
assign main_vfb_cdc_cdc_sink_ready = main_vfb_cdc_cdc_asyncfifo_writable;
assign main_vfb_cdc_cdc_asyncfifo_we = main_vfb_cdc_cdc_sink_valid;
assign main_vfb_cdc_cdc_fifo_in_first = main_vfb_cdc_cdc_sink_first;
assign main_vfb_cdc_cdc_fifo_in_last = main_vfb_cdc_cdc_sink_last;
assign main_vfb_cdc_cdc_fifo_in_payload_data = main_vfb_cdc_cdc_sink_payload_data;
assign main_vfb_cdc_cdc_source_valid = main_vfb_cdc_cdc_asyncfifo_readable;
assign main_vfb_cdc_cdc_source_first = main_vfb_cdc_cdc_fifo_out_first;
assign main_vfb_cdc_cdc_source_last = main_vfb_cdc_cdc_fifo_out_last;
assign main_vfb_cdc_cdc_source_payload_data = main_vfb_cdc_cdc_fifo_out_payload_data;
assign main_vfb_cdc_cdc_asyncfifo_re = main_vfb_cdc_cdc_source_ready;
assign main_vfb_cdc_cdc_graycounter0_ce = (main_vfb_cdc_cdc_asyncfifo_writable & main_vfb_cdc_cdc_asyncfifo_we);
assign main_vfb_cdc_cdc_graycounter1_ce = (main_vfb_cdc_cdc_asyncfifo_readable & main_vfb_cdc_cdc_asyncfifo_re);
assign main_vfb_cdc_cdc_asyncfifo_writable = (((main_vfb_cdc_cdc_graycounter0_q[2] == main_vfb_cdc_cdc_consume_wdomain[2]) | (main_vfb_cdc_cdc_graycounter0_q[1] == main_vfb_cdc_cdc_consume_wdomain[1])) | (main_vfb_cdc_cdc_graycounter0_q[0] != main_vfb_cdc_cdc_consume_wdomain[0]));
assign main_vfb_cdc_cdc_asyncfifo_readable = (main_vfb_cdc_cdc_graycounter1_q != main_vfb_cdc_cdc_produce_rdomain);
assign main_vfb_cdc_cdc_wrport_adr = main_vfb_cdc_cdc_graycounter0_q_binary[1:0];
assign main_vfb_cdc_cdc_wrport_dat_w = main_vfb_cdc_cdc_asyncfifo_din;
assign main_vfb_cdc_cdc_wrport_we = main_vfb_cdc_cdc_graycounter0_ce;
assign main_vfb_cdc_cdc_rdport_adr = main_vfb_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_vfb_cdc_cdc_asyncfifo_dout = main_vfb_cdc_cdc_rdport_dat_r;
always @(*) begin
	main_vfb_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
	if (main_vfb_cdc_cdc_graycounter0_ce) begin
		main_vfb_cdc_cdc_graycounter0_q_next_binary <= (main_vfb_cdc_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_vfb_cdc_cdc_graycounter0_q_next_binary <= main_vfb_cdc_cdc_graycounter0_q_binary;
	end
end
assign main_vfb_cdc_cdc_graycounter0_q_next = (main_vfb_cdc_cdc_graycounter0_q_next_binary ^ main_vfb_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	main_vfb_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
	if (main_vfb_cdc_cdc_graycounter1_ce) begin
		main_vfb_cdc_cdc_graycounter1_q_next_binary <= (main_vfb_cdc_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_vfb_cdc_cdc_graycounter1_q_next_binary <= main_vfb_cdc_cdc_graycounter1_q_binary;
	end
end
assign main_vfb_cdc_cdc_graycounter1_q_next = (main_vfb_cdc_cdc_graycounter1_q_next_binary ^ main_vfb_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign main_wait = (~main_done);
always @(*) begin
	user_led0 <= 1'd0;
	user_led1 <= 1'd0;
	user_led2 <= 1'd0;
	user_led3 <= 1'd0;
	user_led4 <= 1'd0;
	user_led5 <= 1'd0;
	user_led6 <= 1'd0;
	user_led7 <= 1'd0;
	if ((main_mode == 1'd1)) begin
		{user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= main_storage;
	end else begin
		{user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} <= main_chaser;
	end
end
assign main_done = (main_count == 1'd0);
assign card_detect_status0 = 1'd0;
assign sdpads_clk = ((((init_pads_out_payload_clk | cmdw_pads_out_payload_clk) | cmdr_pads_out_payload_clk) | dataw_pads_out_payload_clk) | datar_pads_out_payload_clk);
assign sdpads_cmd_oe = ((((init_pads_out_payload_cmd_oe | cmdw_pads_out_payload_cmd_oe) | cmdr_pads_out_payload_cmd_oe) | dataw_pads_out_payload_cmd_oe) | datar_pads_out_payload_cmd_oe);
assign sdpads_cmd_o = ((((init_pads_out_payload_cmd_o | cmdw_pads_out_payload_cmd_o) | cmdr_pads_out_payload_cmd_o) | dataw_pads_out_payload_cmd_o) | datar_pads_out_payload_cmd_o);
assign sdpads_data_oe = ((((init_pads_out_payload_data_oe | cmdw_pads_out_payload_data_oe) | cmdr_pads_out_payload_data_oe) | dataw_pads_out_payload_data_oe) | datar_pads_out_payload_data_oe);
assign sdpads_data_o = ((((init_pads_out_payload_data_o | cmdw_pads_out_payload_data_o) | cmdr_pads_out_payload_data_o) | dataw_pads_out_payload_data_o) | datar_pads_out_payload_data_o);
assign init_pads_out_ready = clocker_ce;
assign cmdw_pads_out_ready = clocker_ce;
assign cmdr_pads_out_ready = clocker_ce;
assign dataw_pads_out_ready = clocker_ce;
assign datar_pads_out_ready = clocker_ce;
assign clocker_clk_en = sdpads_clk;
assign init_pads_in_valid = sdpads_data_i_ce;
assign init_pads_in_payload_cmd_i = sdpads_cmd_i;
assign init_pads_in_payload_data_i = sdpads_data_i;
assign cmdw_pads_in_valid = sdpads_data_i_ce;
assign cmdw_pads_in_payload_cmd_i = sdpads_cmd_i;
assign cmdw_pads_in_payload_data_i = sdpads_data_i;
assign cmdr_pads_in_pads_in_valid = sdpads_data_i_ce;
assign cmdr_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign cmdr_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign dataw_pads_in_pads_in_valid = sdpads_data_i_ce;
assign dataw_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign dataw_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign datar_pads_in_pads_in_valid = sdpads_data_i_ce;
assign datar_pads_in_pads_in_payload_cmd_i = sdpads_cmd_i;
assign datar_pads_in_pads_in_payload_data_i = sdpads_data_i;
assign clocker_stop = (dataw_stop | datar_stop);
always @(*) begin
	clocker_clk1 <= 1'd0;
	case (clocker_storage)
		3'd4: begin
			clocker_clk1 <= clocker_clks[1];
		end
		4'd8: begin
			clocker_clk1 <= clocker_clks[2];
		end
		5'd16: begin
			clocker_clk1 <= clocker_clks[3];
		end
		6'd32: begin
			clocker_clk1 <= clocker_clks[4];
		end
		7'd64: begin
			clocker_clk1 <= clocker_clks[5];
		end
		8'd128: begin
			clocker_clk1 <= clocker_clks[6];
		end
		9'd256: begin
			clocker_clk1 <= clocker_clks[7];
		end
		default: begin
			clocker_clk1 <= clocker_clks[0];
		end
	endcase
end
assign clocker_ce = (clocker_clk1 & (~clocker_clk_d));
always @(*) begin
	clocker_ce_latched <= 1'd0;
	if (clocker_clk_d) begin
		clocker_ce_latched <= clocker_clk_en;
	end else begin
		clocker_ce_latched <= clocker_ce_delayed;
	end
end
assign clocker_clk0 = ((~clocker_clk1) & clocker_ce_latched);
always @(*) begin
	init_pads_out_payload_data_oe <= 1'd0;
	builder_sdphyinit_next_state <= 1'd0;
	init_count_sdphyinit_next_value <= 8'd0;
	init_pads_out_payload_clk <= 1'd0;
	init_count_sdphyinit_next_value_ce <= 1'd0;
	init_pads_out_payload_cmd_o <= 1'd0;
	init_pads_out_payload_cmd_oe <= 1'd0;
	init_pads_out_payload_data_o <= 4'd0;
	builder_sdphyinit_next_state <= builder_sdphyinit_state;
	case (builder_sdphyinit_state)
		1'd1: begin
			init_pads_out_payload_clk <= 1'd1;
			init_pads_out_payload_cmd_oe <= 1'd1;
			init_pads_out_payload_cmd_o <= 1'd1;
			init_pads_out_payload_data_oe <= 1'd1;
			init_pads_out_payload_data_o <= 4'd15;
			if (init_pads_out_ready) begin
				init_count_sdphyinit_next_value <= (init_count + 1'd1);
				init_count_sdphyinit_next_value_ce <= 1'd1;
				if ((init_count == 7'd79)) begin
					builder_sdphyinit_next_state <= 1'd0;
				end
			end
		end
		default: begin
			init_count_sdphyinit_next_value <= 1'd0;
			init_count_sdphyinit_next_value_ce <= 1'd1;
			if (init_initialize_re) begin
				builder_sdphyinit_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	cmdw_sink_ready <= 1'd0;
	builder_sdphycmdw_next_state <= 2'd0;
	cmdw_count_sdphycmdw_next_value <= 8'd0;
	cmdw_count_sdphycmdw_next_value_ce <= 1'd0;
	cmdw_done <= 1'd0;
	cmdw_pads_out_payload_clk <= 1'd0;
	cmdw_pads_out_payload_cmd_o <= 1'd0;
	cmdw_pads_out_payload_cmd_oe <= 1'd0;
	builder_sdphycmdw_next_state <= builder_sdphycmdw_state;
	case (builder_sdphycmdw_state)
		1'd1: begin
			cmdw_pads_out_payload_clk <= 1'd1;
			cmdw_pads_out_payload_cmd_oe <= 1'd1;
			case (cmdw_count)
				1'd0: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[7];
				end
				1'd1: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[6];
				end
				2'd2: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[5];
				end
				2'd3: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[4];
				end
				3'd4: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[3];
				end
				3'd5: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[2];
				end
				3'd6: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[1];
				end
				3'd7: begin
					cmdw_pads_out_payload_cmd_o <= cmdw_sink_payload_data[0];
				end
			endcase
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value <= (cmdw_count + 1'd1);
				cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
				if ((cmdw_count == 3'd7)) begin
					if ((cmdw_sink_last & (cmdw_sink_payload_cmd_type == 1'd0))) begin
						builder_sdphycmdw_next_state <= 2'd2;
					end else begin
						cmdw_sink_ready <= 1'd1;
						builder_sdphycmdw_next_state <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			cmdw_pads_out_payload_clk <= 1'd1;
			cmdw_pads_out_payload_cmd_oe <= 1'd1;
			cmdw_pads_out_payload_cmd_o <= 1'd1;
			if (cmdw_pads_out_ready) begin
				cmdw_count_sdphycmdw_next_value <= (cmdw_count + 1'd1);
				cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
				if ((cmdw_count == 3'd7)) begin
					cmdw_sink_ready <= 1'd1;
					builder_sdphycmdw_next_state <= 1'd0;
				end
			end
		end
		default: begin
			cmdw_count_sdphycmdw_next_value <= 1'd0;
			cmdw_count_sdphycmdw_next_value_ce <= 1'd1;
			if ((cmdw_sink_valid & cmdw_pads_out_ready)) begin
				builder_sdphycmdw_next_state <= 1'd1;
			end else begin
				cmdw_done <= 1'd1;
			end
		end
	endcase
end
assign cmdr_cmdr_pads_in_valid = cmdr_pads_in_pads_in_valid;
assign cmdr_pads_in_pads_in_ready = cmdr_cmdr_pads_in_ready;
assign cmdr_cmdr_pads_in_first = cmdr_pads_in_pads_in_first;
assign cmdr_cmdr_pads_in_last = cmdr_pads_in_pads_in_last;
assign cmdr_cmdr_pads_in_payload_clk = cmdr_pads_in_pads_in_payload_clk;
assign cmdr_cmdr_pads_in_payload_cmd_i = cmdr_pads_in_pads_in_payload_cmd_i;
assign cmdr_cmdr_pads_in_payload_cmd_o = cmdr_pads_in_pads_in_payload_cmd_o;
assign cmdr_cmdr_pads_in_payload_cmd_oe = cmdr_pads_in_pads_in_payload_cmd_oe;
assign cmdr_cmdr_pads_in_payload_data_i = cmdr_pads_in_pads_in_payload_data_i;
assign cmdr_cmdr_pads_in_payload_data_o = cmdr_pads_in_pads_in_payload_data_o;
assign cmdr_cmdr_pads_in_payload_data_oe = cmdr_pads_in_pads_in_payload_data_oe;
assign cmdr_cmdr_pads_in_payload_data_i_ce = cmdr_pads_in_pads_in_payload_data_i_ce;
assign cmdr_cmdr_start = (cmdr_cmdr_pads_in_payload_cmd_i == 1'd0);
assign cmdr_cmdr_converter_sink_valid = (cmdr_cmdr_pads_in_valid & (cmdr_cmdr_start | cmdr_cmdr_run));
assign cmdr_cmdr_converter_sink_payload_data = cmdr_cmdr_pads_in_payload_cmd_i;
assign cmdr_cmdr_buf_sink_valid = cmdr_cmdr_source_source_valid1;
assign cmdr_cmdr_source_source_ready1 = cmdr_cmdr_buf_sink_ready;
assign cmdr_cmdr_buf_sink_first = cmdr_cmdr_source_source_first1;
assign cmdr_cmdr_buf_sink_last = cmdr_cmdr_source_source_last1;
assign cmdr_cmdr_buf_sink_payload_data = cmdr_cmdr_source_source_payload_data1;
assign cmdr_cmdr_source_source_valid0 = cmdr_cmdr_buf_source_valid;
assign cmdr_cmdr_buf_source_ready = cmdr_cmdr_source_source_ready0;
assign cmdr_cmdr_source_source_first0 = cmdr_cmdr_buf_source_first;
assign cmdr_cmdr_source_source_last0 = cmdr_cmdr_buf_source_last;
assign cmdr_cmdr_source_source_payload_data0 = cmdr_cmdr_buf_source_payload_data;
assign cmdr_cmdr_source_source_valid1 = cmdr_cmdr_converter_source_valid;
assign cmdr_cmdr_converter_source_ready = cmdr_cmdr_source_source_ready1;
assign cmdr_cmdr_source_source_first1 = cmdr_cmdr_converter_source_first;
assign cmdr_cmdr_source_source_last1 = cmdr_cmdr_converter_source_last;
assign cmdr_cmdr_source_source_payload_data1 = cmdr_cmdr_converter_source_payload_data;
assign cmdr_cmdr_converter_sink_ready = ((~cmdr_cmdr_converter_strobe_all) | cmdr_cmdr_converter_source_ready);
assign cmdr_cmdr_converter_source_valid = cmdr_cmdr_converter_strobe_all;
assign cmdr_cmdr_converter_load_part = (cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready);
assign cmdr_cmdr_buf_sink_ready = ((~cmdr_cmdr_buf_source_valid) | cmdr_cmdr_buf_source_ready);
always @(*) begin
	cmdr_sink_ready <= 1'd0;
	builder_sdphycmdr_next_state <= 3'd0;
	cmdr_timeout_sdphycmdr_next_value0 <= 32'd0;
	cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd0;
	cmdr_count_sdphycmdr_next_value1 <= 8'd0;
	cmdr_count_sdphycmdr_next_value_ce1 <= 1'd0;
	cmdr_source_valid <= 1'd0;
	cmdr_busy_sdphycmdr_next_value2 <= 1'd0;
	cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd0;
	cmdr_source_last <= 1'd0;
	cmdr_source_payload_data <= 8'd0;
	cmdr_source_payload_status <= 3'd0;
	cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd0;
	cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd0;
	cmdr_pads_out_payload_clk <= 1'd0;
	cmdr_pads_out_payload_cmd_o <= 1'd0;
	cmdr_pads_out_payload_cmd_oe <= 1'd0;
	cmdr_cmdr_source_source_ready0 <= 1'd0;
	builder_sdphycmdr_next_state <= builder_sdphycmdr_state;
	case (builder_sdphycmdr_state)
		1'd1: begin
			cmdr_pads_out_payload_clk <= 1'd1;
			cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd0;
			cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd1;
			if (cmdr_cmdr_source_source_valid0) begin
				builder_sdphycmdr_next_state <= 2'd2;
			end
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
			if ((cmdr_timeout == 1'd0)) begin
				builder_sdphycmdr_next_state <= 3'd5;
			end
		end
		2'd2: begin
			cmdr_pads_out_payload_clk <= 1'd1;
			cmdr_source_valid <= cmdr_cmdr_source_source_valid0;
			cmdr_source_payload_status <= 1'd0;
			cmdr_source_last <= (cmdr_count == (cmdr_sink_payload_length - 1'd1));
			cmdr_source_payload_data <= cmdr_cmdr_source_source_payload_data0;
			if ((cmdr_cmdr_source_source_valid0 & cmdr_source_ready)) begin
				cmdr_cmdr_source_source_ready0 <= 1'd1;
				cmdr_count_sdphycmdr_next_value1 <= (cmdr_count + 1'd1);
				cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
				if (cmdr_source_last) begin
					cmdr_sink_ready <= 1'd1;
					if ((cmdr_sink_payload_cmd_type == 2'd3)) begin
						cmdr_source_valid <= 1'd0;
						cmdr_timeout_sdphycmdr_next_value0 <= 26'd50000000;
						cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
						builder_sdphycmdr_next_state <= 2'd3;
					end else begin
						if ((cmdr_sink_payload_data_type == 1'd0)) begin
							cmdr_count_sdphycmdr_next_value1 <= 1'd0;
							cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
							builder_sdphycmdr_next_state <= 3'd4;
						end else begin
							builder_sdphycmdr_next_state <= 1'd0;
						end
					end
				end
			end
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
			if ((cmdr_timeout == 1'd0)) begin
				builder_sdphycmdr_next_state <= 3'd5;
			end
		end
		2'd3: begin
			cmdr_pads_out_payload_clk <= 1'd1;
			if ((cmdr_pads_in_pads_in_valid & cmdr_pads_in_pads_in_payload_data_i[0])) begin
				cmdr_busy_sdphycmdr_next_value2 <= 1'd0;
				cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd1;
			end
			if ((~cmdr_busy)) begin
				cmdr_source_valid <= 1'd1;
				cmdr_source_last <= 1'd1;
				cmdr_source_payload_status <= 1'd0;
				if (cmdr_source_ready) begin
					cmdr_count_sdphycmdr_next_value1 <= 1'd0;
					cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
					builder_sdphycmdr_next_state <= 3'd4;
				end
			end
			cmdr_timeout_sdphycmdr_next_value0 <= (cmdr_timeout - 1'd1);
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
			if ((cmdr_timeout == 1'd0)) begin
				builder_sdphycmdr_next_state <= 3'd5;
			end
		end
		3'd4: begin
			cmdr_pads_out_payload_clk <= 1'd1;
			cmdr_pads_out_payload_cmd_oe <= 1'd1;
			cmdr_pads_out_payload_cmd_o <= 1'd1;
			if (cmdr_pads_out_ready) begin
				cmdr_count_sdphycmdr_next_value1 <= (cmdr_count + 1'd1);
				cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
				if ((cmdr_count == 3'd7)) begin
					builder_sdphycmdr_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			cmdr_sink_ready <= 1'd1;
			cmdr_source_valid <= 1'd1;
			cmdr_source_last <= 1'd1;
			cmdr_source_payload_status <= 1'd1;
			if (cmdr_source_ready) begin
				builder_sdphycmdr_next_state <= 1'd0;
			end
		end
		default: begin
			cmdr_timeout_sdphycmdr_next_value0 <= 26'd50000000;
			cmdr_timeout_sdphycmdr_next_value_ce0 <= 1'd1;
			cmdr_count_sdphycmdr_next_value1 <= 1'd0;
			cmdr_count_sdphycmdr_next_value_ce1 <= 1'd1;
			cmdr_busy_sdphycmdr_next_value2 <= 1'd1;
			cmdr_busy_sdphycmdr_next_value_ce2 <= 1'd1;
			if (((cmdr_sink_valid & cmdr_pads_out_ready) & cmdw_done)) begin
				cmdr_cmdr_reset_sdphycmdr_next_value3 <= 1'd1;
				cmdr_cmdr_reset_sdphycmdr_next_value_ce3 <= 1'd1;
				builder_sdphycmdr_next_state <= 1'd1;
			end
		end
	endcase
end
assign dataw_accepted0 = dataw_accepted1;
assign dataw_crc_error0 = dataw_crc_error1;
assign dataw_write_error0 = dataw_write_error1;
assign dataw_crc_pads_in_valid = dataw_pads_in_pads_in_valid;
assign dataw_crc_pads_in_ready = dataw_pads_in_pads_in_ready;
assign dataw_crc_pads_in_first = dataw_pads_in_pads_in_first;
assign dataw_crc_pads_in_last = dataw_pads_in_pads_in_last;
assign dataw_crc_pads_in_payload_clk = dataw_pads_in_pads_in_payload_clk;
assign dataw_crc_pads_in_payload_cmd_i = dataw_pads_in_pads_in_payload_cmd_i;
assign dataw_crc_pads_in_payload_cmd_o = dataw_pads_in_pads_in_payload_cmd_o;
assign dataw_crc_pads_in_payload_cmd_oe = dataw_pads_in_pads_in_payload_cmd_oe;
assign dataw_crc_pads_in_payload_data_i = dataw_pads_in_pads_in_payload_data_i;
assign dataw_crc_pads_in_payload_data_o = dataw_pads_in_pads_in_payload_data_o;
assign dataw_crc_pads_in_payload_data_oe = dataw_pads_in_pads_in_payload_data_oe;
assign dataw_crc_pads_in_payload_data_i_ce = dataw_pads_in_pads_in_payload_data_i_ce;
assign dataw_crc_start = (dataw_crc_pads_in_payload_data_i[0] == 1'd0);
assign dataw_crc_converter_sink_valid = (dataw_crc_pads_in_valid & dataw_crc_run);
assign dataw_crc_converter_sink_payload_data = dataw_crc_pads_in_payload_data_i[0];
assign dataw_crc_buf_sink_valid = dataw_crc_source_source_valid1;
assign dataw_crc_source_source_ready1 = dataw_crc_buf_sink_ready;
assign dataw_crc_buf_sink_first = dataw_crc_source_source_first1;
assign dataw_crc_buf_sink_last = dataw_crc_source_source_last1;
assign dataw_crc_buf_sink_payload_data = dataw_crc_source_source_payload_data1;
assign dataw_crc_source_source_valid0 = dataw_crc_buf_source_valid;
assign dataw_crc_buf_source_ready = dataw_crc_source_source_ready0;
assign dataw_crc_source_source_first0 = dataw_crc_buf_source_first;
assign dataw_crc_source_source_last0 = dataw_crc_buf_source_last;
assign dataw_crc_source_source_payload_data0 = dataw_crc_buf_source_payload_data;
assign dataw_crc_source_source_valid1 = dataw_crc_converter_source_valid;
assign dataw_crc_converter_source_ready = dataw_crc_source_source_ready1;
assign dataw_crc_source_source_first1 = dataw_crc_converter_source_first;
assign dataw_crc_source_source_last1 = dataw_crc_converter_source_last;
assign dataw_crc_source_source_payload_data1 = dataw_crc_converter_source_payload_data;
assign dataw_crc_converter_sink_ready = ((~dataw_crc_converter_strobe_all) | dataw_crc_converter_source_ready);
assign dataw_crc_converter_source_valid = dataw_crc_converter_strobe_all;
assign dataw_crc_converter_load_part = (dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready);
assign dataw_crc_buf_sink_ready = ((~dataw_crc_buf_source_valid) | dataw_crc_buf_source_ready);
always @(*) begin
	dataw_pads_out_payload_clk <= 1'd0;
	dataw_crc_reset <= 1'd0;
	dataw_pads_out_payload_cmd_o <= 1'd0;
	dataw_pads_out_payload_cmd_oe <= 1'd0;
	dataw_pads_out_payload_data_o <= 4'd0;
	dataw_pads_out_payload_data_oe <= 1'd0;
	builder_sdphydataw_next_state <= 3'd0;
	dataw_accepted1_sdphydataw_next_value0 <= 1'd0;
	dataw_sink_ready <= 1'd0;
	dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd0;
	dataw_crc_error1_sdphydataw_next_value1 <= 1'd0;
	dataw_stop <= 1'd0;
	dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd0;
	dataw_write_error1_sdphydataw_next_value2 <= 1'd0;
	dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd0;
	dataw_count_sdphydataw_next_value3 <= 8'd0;
	dataw_count_sdphydataw_next_value_ce3 <= 1'd0;
	builder_sdphydataw_next_state <= builder_sdphydataw_state;
	case (builder_sdphydataw_state)
		1'd1: begin
			dataw_pads_out_payload_clk <= 1'd1;
			dataw_pads_out_payload_cmd_oe <= 1'd1;
			dataw_pads_out_payload_cmd_o <= 1'd1;
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value3 <= (dataw_count + 1'd1);
				dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				if ((dataw_count == 3'd7)) begin
					dataw_count_sdphydataw_next_value3 <= 1'd0;
					dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
					builder_sdphydataw_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			dataw_pads_out_payload_clk <= 1'd1;
			dataw_pads_out_payload_data_oe <= 1'd1;
			dataw_pads_out_payload_data_o <= 1'd0;
			if (dataw_pads_out_ready) begin
				builder_sdphydataw_next_state <= 2'd3;
			end
		end
		2'd3: begin
			dataw_stop <= (~dataw_sink_valid);
			dataw_pads_out_payload_clk <= 1'd1;
			dataw_pads_out_payload_data_oe <= 1'd1;
			case (dataw_count)
				1'd0: begin
					dataw_pads_out_payload_data_o <= dataw_sink_payload_data[7:4];
				end
				1'd1: begin
					dataw_pads_out_payload_data_o <= dataw_sink_payload_data[3:0];
				end
			endcase
			if (dataw_pads_out_ready) begin
				dataw_count_sdphydataw_next_value3 <= (dataw_count + 1'd1);
				dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
				if ((dataw_count == 1'd1)) begin
					dataw_count_sdphydataw_next_value3 <= 1'd0;
					dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
					if (dataw_sink_last) begin
						builder_sdphydataw_next_state <= 3'd4;
					end else begin
						dataw_sink_ready <= 1'd1;
					end
				end
			end
		end
		3'd4: begin
			dataw_pads_out_payload_clk <= 1'd1;
			dataw_pads_out_payload_data_oe <= 1'd1;
			dataw_pads_out_payload_data_o <= 4'd15;
			if (dataw_pads_out_ready) begin
				dataw_crc_reset <= 1'd1;
				builder_sdphydataw_next_state <= 3'd5;
			end
		end
		3'd5: begin
			dataw_pads_out_payload_clk <= 1'd1;
			if (dataw_crc_source_source_valid0) begin
				dataw_accepted1_sdphydataw_next_value0 <= (dataw_crc_source_source_payload_data0[7:5] == 2'd2);
				dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd1;
				dataw_crc_error1_sdphydataw_next_value1 <= (dataw_crc_source_source_payload_data0[7:5] == 3'd5);
				dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd1;
				dataw_write_error1_sdphydataw_next_value2 <= (dataw_crc_source_source_payload_data0[7:5] == 3'd6);
				dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd1;
				builder_sdphydataw_next_state <= 3'd6;
			end
		end
		3'd6: begin
			dataw_pads_out_payload_clk <= 1'd1;
			if ((dataw_pads_in_pads_in_valid & dataw_pads_in_pads_in_payload_data_i[0])) begin
				dataw_sink_ready <= 1'd1;
				builder_sdphydataw_next_state <= 1'd0;
			end
		end
		default: begin
			dataw_accepted1_sdphydataw_next_value0 <= 1'd0;
			dataw_accepted1_sdphydataw_next_value_ce0 <= 1'd1;
			dataw_crc_error1_sdphydataw_next_value1 <= 1'd0;
			dataw_crc_error1_sdphydataw_next_value_ce1 <= 1'd1;
			dataw_write_error1_sdphydataw_next_value2 <= 1'd0;
			dataw_write_error1_sdphydataw_next_value_ce2 <= 1'd1;
			dataw_count_sdphydataw_next_value3 <= 1'd0;
			dataw_count_sdphydataw_next_value_ce3 <= 1'd1;
			if ((dataw_sink_valid & dataw_pads_out_ready)) begin
				builder_sdphydataw_next_state <= 1'd1;
			end
		end
	endcase
end
assign datar_datar_pads_in_valid = datar_pads_in_pads_in_valid;
assign datar_pads_in_pads_in_ready = datar_datar_pads_in_ready;
assign datar_datar_pads_in_first = datar_pads_in_pads_in_first;
assign datar_datar_pads_in_last = datar_pads_in_pads_in_last;
assign datar_datar_pads_in_payload_clk = datar_pads_in_pads_in_payload_clk;
assign datar_datar_pads_in_payload_cmd_i = datar_pads_in_pads_in_payload_cmd_i;
assign datar_datar_pads_in_payload_cmd_o = datar_pads_in_pads_in_payload_cmd_o;
assign datar_datar_pads_in_payload_cmd_oe = datar_pads_in_pads_in_payload_cmd_oe;
assign datar_datar_pads_in_payload_data_i = datar_pads_in_pads_in_payload_data_i;
assign datar_datar_pads_in_payload_data_o = datar_pads_in_pads_in_payload_data_o;
assign datar_datar_pads_in_payload_data_oe = datar_pads_in_pads_in_payload_data_oe;
assign datar_datar_pads_in_payload_data_i_ce = datar_pads_in_pads_in_payload_data_i_ce;
assign datar_datar_start = (datar_datar_pads_in_payload_data_i[3:0] == 1'd0);
assign datar_datar_converter_sink_valid = (datar_datar_pads_in_valid & datar_datar_run);
assign datar_datar_converter_sink_payload_data = datar_datar_pads_in_payload_data_i[3:0];
assign datar_datar_buf_sink_valid = datar_datar_source_source_valid1;
assign datar_datar_source_source_ready1 = datar_datar_buf_sink_ready;
assign datar_datar_buf_sink_first = datar_datar_source_source_first1;
assign datar_datar_buf_sink_last = datar_datar_source_source_last1;
assign datar_datar_buf_sink_payload_data = datar_datar_source_source_payload_data1;
assign datar_datar_source_source_valid0 = datar_datar_buf_source_valid;
assign datar_datar_buf_source_ready = datar_datar_source_source_ready0;
assign datar_datar_source_source_first0 = datar_datar_buf_source_first;
assign datar_datar_source_source_last0 = datar_datar_buf_source_last;
assign datar_datar_source_source_payload_data0 = datar_datar_buf_source_payload_data;
assign datar_datar_source_source_valid1 = datar_datar_converter_source_valid;
assign datar_datar_converter_source_ready = datar_datar_source_source_ready1;
assign datar_datar_source_source_first1 = datar_datar_converter_source_first;
assign datar_datar_source_source_last1 = datar_datar_converter_source_last;
assign datar_datar_source_source_payload_data1 = datar_datar_converter_source_payload_data;
assign datar_datar_converter_sink_ready = ((~datar_datar_converter_strobe_all) | datar_datar_converter_source_ready);
assign datar_datar_converter_source_valid = datar_datar_converter_strobe_all;
assign datar_datar_converter_load_part = (datar_datar_converter_sink_valid & datar_datar_converter_sink_ready);
assign datar_datar_buf_sink_ready = ((~datar_datar_buf_source_valid) | datar_datar_buf_source_ready);
always @(*) begin
	datar_pads_out_payload_clk <= 1'd0;
	builder_sdphydatar_next_state <= 3'd0;
	datar_count_sdphydatar_next_value0 <= 10'd0;
	datar_count_sdphydatar_next_value_ce0 <= 1'd0;
	datar_datar_source_source_ready0 <= 1'd0;
	datar_timeout_sdphydatar_next_value1 <= 32'd0;
	datar_timeout_sdphydatar_next_value_ce1 <= 1'd0;
	datar_datar_reset_sdphydatar_next_value2 <= 1'd0;
	datar_sink_ready <= 1'd0;
	datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd0;
	datar_source_valid <= 1'd0;
	datar_source_first <= 1'd0;
	datar_source_last <= 1'd0;
	datar_source_payload_data <= 8'd0;
	datar_source_payload_status <= 3'd0;
	datar_stop <= 1'd0;
	builder_sdphydatar_next_state <= builder_sdphydatar_state;
	case (builder_sdphydatar_state)
		1'd1: begin
			datar_pads_out_payload_clk <= 1'd1;
			datar_datar_reset_sdphydatar_next_value2 <= 1'd0;
			datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd1;
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
			if (datar_datar_source_source_valid0) begin
				builder_sdphydatar_next_state <= 2'd2;
			end
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
			if ((datar_timeout == 1'd0)) begin
				datar_sink_ready <= 1'd1;
				builder_sdphydatar_next_state <= 3'd4;
			end
		end
		2'd2: begin
			datar_pads_out_payload_clk <= 1'd1;
			datar_source_valid <= datar_datar_source_source_valid0;
			datar_source_payload_status <= 1'd0;
			datar_source_first <= (datar_count == 1'd0);
			datar_source_last <= (datar_count == ((datar_sink_payload_block_length + 4'd8) - 1'd1));
			datar_source_payload_data <= datar_datar_source_source_payload_data0;
			if (datar_source_valid) begin
				if (datar_source_ready) begin
					datar_datar_source_source_ready0 <= 1'd1;
					datar_count_sdphydatar_next_value0 <= (datar_count + 1'd1);
					datar_count_sdphydatar_next_value_ce0 <= 1'd1;
					if (datar_source_last) begin
						datar_sink_ready <= 1'd1;
						if (datar_sink_last) begin
							datar_count_sdphydatar_next_value0 <= 1'd0;
							datar_count_sdphydatar_next_value_ce0 <= 1'd1;
							builder_sdphydatar_next_state <= 2'd3;
						end else begin
							builder_sdphydatar_next_state <= 1'd0;
						end
					end
				end else begin
					datar_stop <= 1'd1;
				end
			end
			datar_timeout_sdphydatar_next_value1 <= (datar_timeout - 1'd1);
			datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
			if ((datar_timeout == 1'd0)) begin
				datar_sink_ready <= 1'd1;
				builder_sdphydatar_next_state <= 3'd4;
			end
		end
		2'd3: begin
			datar_pads_out_payload_clk <= 1'd1;
			if (datar_pads_out_ready) begin
				datar_count_sdphydatar_next_value0 <= (datar_count + 1'd1);
				datar_count_sdphydatar_next_value_ce0 <= 1'd1;
				if ((datar_count == 6'd39)) begin
					builder_sdphydatar_next_state <= 1'd0;
				end
			end
		end
		3'd4: begin
			datar_source_valid <= 1'd1;
			datar_source_payload_status <= 1'd1;
			datar_source_last <= 1'd1;
			if (datar_source_ready) begin
				builder_sdphydatar_next_state <= 1'd0;
			end
		end
		default: begin
			datar_count_sdphydatar_next_value0 <= 1'd0;
			datar_count_sdphydatar_next_value_ce0 <= 1'd1;
			if ((datar_sink_valid & datar_pads_out_ready)) begin
				datar_pads_out_payload_clk <= 1'd1;
				datar_timeout_sdphydatar_next_value1 <= 32'd50000000;
				datar_timeout_sdphydatar_next_value_ce1 <= 1'd1;
				datar_count_sdphydatar_next_value0 <= 1'd0;
				datar_count_sdphydatar_next_value_ce0 <= 1'd1;
				datar_datar_reset_sdphydatar_next_value2 <= 1'd1;
				datar_datar_reset_sdphydatar_next_value_ce2 <= 1'd1;
				builder_sdphydatar_next_state <= 1'd1;
			end
		end
	endcase
end
assign sdcore_crc16_inserter_sink_valid = sdcore_sink_sink_valid0;
assign sdcore_sink_sink_ready0 = sdcore_crc16_inserter_sink_ready;
assign sdcore_crc16_inserter_sink_first = sdcore_sink_sink_first0;
assign sdcore_crc16_inserter_sink_last = sdcore_sink_sink_last0;
assign sdcore_crc16_inserter_sink_payload_data = sdcore_sink_sink_payload_data0;
assign sdcore_source_source_valid0 = sdcore_source_source_valid1;
assign sdcore_source_source_ready1 = sdcore_source_source_ready0;
assign sdcore_source_source_first0 = sdcore_source_source_first1;
assign sdcore_source_source_last0 = sdcore_source_source_last1;
assign sdcore_source_source_payload_data0 = sdcore_source_source_payload_data1;
assign sdcore_cmd_type = sdcore_csrfield_cmd_type;
assign sdcore_data_type = sdcore_csrfield_data_type;
assign sdcore_cmd = sdcore_csrfield_cmd;
assign sdcore_csrfield_done0 = sdcore_cmd_done;
assign sdcore_csrfield_error0 = sdcore_cmd_error;
assign sdcore_csrfield_timeout0 = sdcore_cmd_timeout;
assign sdcore_csrfield_crc0 = 1'd0;
assign sdcore_csrfield_done1 = sdcore_data_done;
assign sdcore_csrfield_error1 = sdcore_data_error;
assign sdcore_csrfield_timeout1 = sdcore_data_timeout;
assign sdcore_csrfield_crc1 = 1'd0;
assign sdcore_crc7_inserter_din = {1'd0, 1'd1, sdcore_cmd, sdcore_cmd_argument_storage};
assign sdcore_crc7_inserter_reset = 1'd1;
assign sdcore_crc7_inserter_enable = 1'd1;
assign sdcore_crc7_inserter_reg1 = {sdcore_crc7_inserter_reg0[5], sdcore_crc7_inserter_reg0[4], sdcore_crc7_inserter_reg0[3], (sdcore_crc7_inserter_reg0[2] ^ (sdcore_crc7_inserter_din[39] ^ sdcore_crc7_inserter_reg0[6])), sdcore_crc7_inserter_reg0[1], sdcore_crc7_inserter_reg0[0], (sdcore_crc7_inserter_din[39] ^ sdcore_crc7_inserter_reg0[6])};
assign sdcore_crc7_inserter_reg2 = {sdcore_crc7_inserter_reg1[5], sdcore_crc7_inserter_reg1[4], sdcore_crc7_inserter_reg1[3], (sdcore_crc7_inserter_reg1[2] ^ (sdcore_crc7_inserter_din[38] ^ sdcore_crc7_inserter_reg1[6])), sdcore_crc7_inserter_reg1[1], sdcore_crc7_inserter_reg1[0], (sdcore_crc7_inserter_din[38] ^ sdcore_crc7_inserter_reg1[6])};
assign sdcore_crc7_inserter_reg3 = {sdcore_crc7_inserter_reg2[5], sdcore_crc7_inserter_reg2[4], sdcore_crc7_inserter_reg2[3], (sdcore_crc7_inserter_reg2[2] ^ (sdcore_crc7_inserter_din[37] ^ sdcore_crc7_inserter_reg2[6])), sdcore_crc7_inserter_reg2[1], sdcore_crc7_inserter_reg2[0], (sdcore_crc7_inserter_din[37] ^ sdcore_crc7_inserter_reg2[6])};
assign sdcore_crc7_inserter_reg4 = {sdcore_crc7_inserter_reg3[5], sdcore_crc7_inserter_reg3[4], sdcore_crc7_inserter_reg3[3], (sdcore_crc7_inserter_reg3[2] ^ (sdcore_crc7_inserter_din[36] ^ sdcore_crc7_inserter_reg3[6])), sdcore_crc7_inserter_reg3[1], sdcore_crc7_inserter_reg3[0], (sdcore_crc7_inserter_din[36] ^ sdcore_crc7_inserter_reg3[6])};
assign sdcore_crc7_inserter_reg5 = {sdcore_crc7_inserter_reg4[5], sdcore_crc7_inserter_reg4[4], sdcore_crc7_inserter_reg4[3], (sdcore_crc7_inserter_reg4[2] ^ (sdcore_crc7_inserter_din[35] ^ sdcore_crc7_inserter_reg4[6])), sdcore_crc7_inserter_reg4[1], sdcore_crc7_inserter_reg4[0], (sdcore_crc7_inserter_din[35] ^ sdcore_crc7_inserter_reg4[6])};
assign sdcore_crc7_inserter_reg6 = {sdcore_crc7_inserter_reg5[5], sdcore_crc7_inserter_reg5[4], sdcore_crc7_inserter_reg5[3], (sdcore_crc7_inserter_reg5[2] ^ (sdcore_crc7_inserter_din[34] ^ sdcore_crc7_inserter_reg5[6])), sdcore_crc7_inserter_reg5[1], sdcore_crc7_inserter_reg5[0], (sdcore_crc7_inserter_din[34] ^ sdcore_crc7_inserter_reg5[6])};
assign sdcore_crc7_inserter_reg7 = {sdcore_crc7_inserter_reg6[5], sdcore_crc7_inserter_reg6[4], sdcore_crc7_inserter_reg6[3], (sdcore_crc7_inserter_reg6[2] ^ (sdcore_crc7_inserter_din[33] ^ sdcore_crc7_inserter_reg6[6])), sdcore_crc7_inserter_reg6[1], sdcore_crc7_inserter_reg6[0], (sdcore_crc7_inserter_din[33] ^ sdcore_crc7_inserter_reg6[6])};
assign sdcore_crc7_inserter_reg8 = {sdcore_crc7_inserter_reg7[5], sdcore_crc7_inserter_reg7[4], sdcore_crc7_inserter_reg7[3], (sdcore_crc7_inserter_reg7[2] ^ (sdcore_crc7_inserter_din[32] ^ sdcore_crc7_inserter_reg7[6])), sdcore_crc7_inserter_reg7[1], sdcore_crc7_inserter_reg7[0], (sdcore_crc7_inserter_din[32] ^ sdcore_crc7_inserter_reg7[6])};
assign sdcore_crc7_inserter_reg9 = {sdcore_crc7_inserter_reg8[5], sdcore_crc7_inserter_reg8[4], sdcore_crc7_inserter_reg8[3], (sdcore_crc7_inserter_reg8[2] ^ (sdcore_crc7_inserter_din[31] ^ sdcore_crc7_inserter_reg8[6])), sdcore_crc7_inserter_reg8[1], sdcore_crc7_inserter_reg8[0], (sdcore_crc7_inserter_din[31] ^ sdcore_crc7_inserter_reg8[6])};
assign sdcore_crc7_inserter_reg10 = {sdcore_crc7_inserter_reg9[5], sdcore_crc7_inserter_reg9[4], sdcore_crc7_inserter_reg9[3], (sdcore_crc7_inserter_reg9[2] ^ (sdcore_crc7_inserter_din[30] ^ sdcore_crc7_inserter_reg9[6])), sdcore_crc7_inserter_reg9[1], sdcore_crc7_inserter_reg9[0], (sdcore_crc7_inserter_din[30] ^ sdcore_crc7_inserter_reg9[6])};
assign sdcore_crc7_inserter_reg11 = {sdcore_crc7_inserter_reg10[5], sdcore_crc7_inserter_reg10[4], sdcore_crc7_inserter_reg10[3], (sdcore_crc7_inserter_reg10[2] ^ (sdcore_crc7_inserter_din[29] ^ sdcore_crc7_inserter_reg10[6])), sdcore_crc7_inserter_reg10[1], sdcore_crc7_inserter_reg10[0], (sdcore_crc7_inserter_din[29] ^ sdcore_crc7_inserter_reg10[6])};
assign sdcore_crc7_inserter_reg12 = {sdcore_crc7_inserter_reg11[5], sdcore_crc7_inserter_reg11[4], sdcore_crc7_inserter_reg11[3], (sdcore_crc7_inserter_reg11[2] ^ (sdcore_crc7_inserter_din[28] ^ sdcore_crc7_inserter_reg11[6])), sdcore_crc7_inserter_reg11[1], sdcore_crc7_inserter_reg11[0], (sdcore_crc7_inserter_din[28] ^ sdcore_crc7_inserter_reg11[6])};
assign sdcore_crc7_inserter_reg13 = {sdcore_crc7_inserter_reg12[5], sdcore_crc7_inserter_reg12[4], sdcore_crc7_inserter_reg12[3], (sdcore_crc7_inserter_reg12[2] ^ (sdcore_crc7_inserter_din[27] ^ sdcore_crc7_inserter_reg12[6])), sdcore_crc7_inserter_reg12[1], sdcore_crc7_inserter_reg12[0], (sdcore_crc7_inserter_din[27] ^ sdcore_crc7_inserter_reg12[6])};
assign sdcore_crc7_inserter_reg14 = {sdcore_crc7_inserter_reg13[5], sdcore_crc7_inserter_reg13[4], sdcore_crc7_inserter_reg13[3], (sdcore_crc7_inserter_reg13[2] ^ (sdcore_crc7_inserter_din[26] ^ sdcore_crc7_inserter_reg13[6])), sdcore_crc7_inserter_reg13[1], sdcore_crc7_inserter_reg13[0], (sdcore_crc7_inserter_din[26] ^ sdcore_crc7_inserter_reg13[6])};
assign sdcore_crc7_inserter_reg15 = {sdcore_crc7_inserter_reg14[5], sdcore_crc7_inserter_reg14[4], sdcore_crc7_inserter_reg14[3], (sdcore_crc7_inserter_reg14[2] ^ (sdcore_crc7_inserter_din[25] ^ sdcore_crc7_inserter_reg14[6])), sdcore_crc7_inserter_reg14[1], sdcore_crc7_inserter_reg14[0], (sdcore_crc7_inserter_din[25] ^ sdcore_crc7_inserter_reg14[6])};
assign sdcore_crc7_inserter_reg16 = {sdcore_crc7_inserter_reg15[5], sdcore_crc7_inserter_reg15[4], sdcore_crc7_inserter_reg15[3], (sdcore_crc7_inserter_reg15[2] ^ (sdcore_crc7_inserter_din[24] ^ sdcore_crc7_inserter_reg15[6])), sdcore_crc7_inserter_reg15[1], sdcore_crc7_inserter_reg15[0], (sdcore_crc7_inserter_din[24] ^ sdcore_crc7_inserter_reg15[6])};
assign sdcore_crc7_inserter_reg17 = {sdcore_crc7_inserter_reg16[5], sdcore_crc7_inserter_reg16[4], sdcore_crc7_inserter_reg16[3], (sdcore_crc7_inserter_reg16[2] ^ (sdcore_crc7_inserter_din[23] ^ sdcore_crc7_inserter_reg16[6])), sdcore_crc7_inserter_reg16[1], sdcore_crc7_inserter_reg16[0], (sdcore_crc7_inserter_din[23] ^ sdcore_crc7_inserter_reg16[6])};
assign sdcore_crc7_inserter_reg18 = {sdcore_crc7_inserter_reg17[5], sdcore_crc7_inserter_reg17[4], sdcore_crc7_inserter_reg17[3], (sdcore_crc7_inserter_reg17[2] ^ (sdcore_crc7_inserter_din[22] ^ sdcore_crc7_inserter_reg17[6])), sdcore_crc7_inserter_reg17[1], sdcore_crc7_inserter_reg17[0], (sdcore_crc7_inserter_din[22] ^ sdcore_crc7_inserter_reg17[6])};
assign sdcore_crc7_inserter_reg19 = {sdcore_crc7_inserter_reg18[5], sdcore_crc7_inserter_reg18[4], sdcore_crc7_inserter_reg18[3], (sdcore_crc7_inserter_reg18[2] ^ (sdcore_crc7_inserter_din[21] ^ sdcore_crc7_inserter_reg18[6])), sdcore_crc7_inserter_reg18[1], sdcore_crc7_inserter_reg18[0], (sdcore_crc7_inserter_din[21] ^ sdcore_crc7_inserter_reg18[6])};
assign sdcore_crc7_inserter_reg20 = {sdcore_crc7_inserter_reg19[5], sdcore_crc7_inserter_reg19[4], sdcore_crc7_inserter_reg19[3], (sdcore_crc7_inserter_reg19[2] ^ (sdcore_crc7_inserter_din[20] ^ sdcore_crc7_inserter_reg19[6])), sdcore_crc7_inserter_reg19[1], sdcore_crc7_inserter_reg19[0], (sdcore_crc7_inserter_din[20] ^ sdcore_crc7_inserter_reg19[6])};
assign sdcore_crc7_inserter_reg21 = {sdcore_crc7_inserter_reg20[5], sdcore_crc7_inserter_reg20[4], sdcore_crc7_inserter_reg20[3], (sdcore_crc7_inserter_reg20[2] ^ (sdcore_crc7_inserter_din[19] ^ sdcore_crc7_inserter_reg20[6])), sdcore_crc7_inserter_reg20[1], sdcore_crc7_inserter_reg20[0], (sdcore_crc7_inserter_din[19] ^ sdcore_crc7_inserter_reg20[6])};
assign sdcore_crc7_inserter_reg22 = {sdcore_crc7_inserter_reg21[5], sdcore_crc7_inserter_reg21[4], sdcore_crc7_inserter_reg21[3], (sdcore_crc7_inserter_reg21[2] ^ (sdcore_crc7_inserter_din[18] ^ sdcore_crc7_inserter_reg21[6])), sdcore_crc7_inserter_reg21[1], sdcore_crc7_inserter_reg21[0], (sdcore_crc7_inserter_din[18] ^ sdcore_crc7_inserter_reg21[6])};
assign sdcore_crc7_inserter_reg23 = {sdcore_crc7_inserter_reg22[5], sdcore_crc7_inserter_reg22[4], sdcore_crc7_inserter_reg22[3], (sdcore_crc7_inserter_reg22[2] ^ (sdcore_crc7_inserter_din[17] ^ sdcore_crc7_inserter_reg22[6])), sdcore_crc7_inserter_reg22[1], sdcore_crc7_inserter_reg22[0], (sdcore_crc7_inserter_din[17] ^ sdcore_crc7_inserter_reg22[6])};
assign sdcore_crc7_inserter_reg24 = {sdcore_crc7_inserter_reg23[5], sdcore_crc7_inserter_reg23[4], sdcore_crc7_inserter_reg23[3], (sdcore_crc7_inserter_reg23[2] ^ (sdcore_crc7_inserter_din[16] ^ sdcore_crc7_inserter_reg23[6])), sdcore_crc7_inserter_reg23[1], sdcore_crc7_inserter_reg23[0], (sdcore_crc7_inserter_din[16] ^ sdcore_crc7_inserter_reg23[6])};
assign sdcore_crc7_inserter_reg25 = {sdcore_crc7_inserter_reg24[5], sdcore_crc7_inserter_reg24[4], sdcore_crc7_inserter_reg24[3], (sdcore_crc7_inserter_reg24[2] ^ (sdcore_crc7_inserter_din[15] ^ sdcore_crc7_inserter_reg24[6])), sdcore_crc7_inserter_reg24[1], sdcore_crc7_inserter_reg24[0], (sdcore_crc7_inserter_din[15] ^ sdcore_crc7_inserter_reg24[6])};
assign sdcore_crc7_inserter_reg26 = {sdcore_crc7_inserter_reg25[5], sdcore_crc7_inserter_reg25[4], sdcore_crc7_inserter_reg25[3], (sdcore_crc7_inserter_reg25[2] ^ (sdcore_crc7_inserter_din[14] ^ sdcore_crc7_inserter_reg25[6])), sdcore_crc7_inserter_reg25[1], sdcore_crc7_inserter_reg25[0], (sdcore_crc7_inserter_din[14] ^ sdcore_crc7_inserter_reg25[6])};
assign sdcore_crc7_inserter_reg27 = {sdcore_crc7_inserter_reg26[5], sdcore_crc7_inserter_reg26[4], sdcore_crc7_inserter_reg26[3], (sdcore_crc7_inserter_reg26[2] ^ (sdcore_crc7_inserter_din[13] ^ sdcore_crc7_inserter_reg26[6])), sdcore_crc7_inserter_reg26[1], sdcore_crc7_inserter_reg26[0], (sdcore_crc7_inserter_din[13] ^ sdcore_crc7_inserter_reg26[6])};
assign sdcore_crc7_inserter_reg28 = {sdcore_crc7_inserter_reg27[5], sdcore_crc7_inserter_reg27[4], sdcore_crc7_inserter_reg27[3], (sdcore_crc7_inserter_reg27[2] ^ (sdcore_crc7_inserter_din[12] ^ sdcore_crc7_inserter_reg27[6])), sdcore_crc7_inserter_reg27[1], sdcore_crc7_inserter_reg27[0], (sdcore_crc7_inserter_din[12] ^ sdcore_crc7_inserter_reg27[6])};
assign sdcore_crc7_inserter_reg29 = {sdcore_crc7_inserter_reg28[5], sdcore_crc7_inserter_reg28[4], sdcore_crc7_inserter_reg28[3], (sdcore_crc7_inserter_reg28[2] ^ (sdcore_crc7_inserter_din[11] ^ sdcore_crc7_inserter_reg28[6])), sdcore_crc7_inserter_reg28[1], sdcore_crc7_inserter_reg28[0], (sdcore_crc7_inserter_din[11] ^ sdcore_crc7_inserter_reg28[6])};
assign sdcore_crc7_inserter_reg30 = {sdcore_crc7_inserter_reg29[5], sdcore_crc7_inserter_reg29[4], sdcore_crc7_inserter_reg29[3], (sdcore_crc7_inserter_reg29[2] ^ (sdcore_crc7_inserter_din[10] ^ sdcore_crc7_inserter_reg29[6])), sdcore_crc7_inserter_reg29[1], sdcore_crc7_inserter_reg29[0], (sdcore_crc7_inserter_din[10] ^ sdcore_crc7_inserter_reg29[6])};
assign sdcore_crc7_inserter_reg31 = {sdcore_crc7_inserter_reg30[5], sdcore_crc7_inserter_reg30[4], sdcore_crc7_inserter_reg30[3], (sdcore_crc7_inserter_reg30[2] ^ (sdcore_crc7_inserter_din[9] ^ sdcore_crc7_inserter_reg30[6])), sdcore_crc7_inserter_reg30[1], sdcore_crc7_inserter_reg30[0], (sdcore_crc7_inserter_din[9] ^ sdcore_crc7_inserter_reg30[6])};
assign sdcore_crc7_inserter_reg32 = {sdcore_crc7_inserter_reg31[5], sdcore_crc7_inserter_reg31[4], sdcore_crc7_inserter_reg31[3], (sdcore_crc7_inserter_reg31[2] ^ (sdcore_crc7_inserter_din[8] ^ sdcore_crc7_inserter_reg31[6])), sdcore_crc7_inserter_reg31[1], sdcore_crc7_inserter_reg31[0], (sdcore_crc7_inserter_din[8] ^ sdcore_crc7_inserter_reg31[6])};
assign sdcore_crc7_inserter_reg33 = {sdcore_crc7_inserter_reg32[5], sdcore_crc7_inserter_reg32[4], sdcore_crc7_inserter_reg32[3], (sdcore_crc7_inserter_reg32[2] ^ (sdcore_crc7_inserter_din[7] ^ sdcore_crc7_inserter_reg32[6])), sdcore_crc7_inserter_reg32[1], sdcore_crc7_inserter_reg32[0], (sdcore_crc7_inserter_din[7] ^ sdcore_crc7_inserter_reg32[6])};
assign sdcore_crc7_inserter_reg34 = {sdcore_crc7_inserter_reg33[5], sdcore_crc7_inserter_reg33[4], sdcore_crc7_inserter_reg33[3], (sdcore_crc7_inserter_reg33[2] ^ (sdcore_crc7_inserter_din[6] ^ sdcore_crc7_inserter_reg33[6])), sdcore_crc7_inserter_reg33[1], sdcore_crc7_inserter_reg33[0], (sdcore_crc7_inserter_din[6] ^ sdcore_crc7_inserter_reg33[6])};
assign sdcore_crc7_inserter_reg35 = {sdcore_crc7_inserter_reg34[5], sdcore_crc7_inserter_reg34[4], sdcore_crc7_inserter_reg34[3], (sdcore_crc7_inserter_reg34[2] ^ (sdcore_crc7_inserter_din[5] ^ sdcore_crc7_inserter_reg34[6])), sdcore_crc7_inserter_reg34[1], sdcore_crc7_inserter_reg34[0], (sdcore_crc7_inserter_din[5] ^ sdcore_crc7_inserter_reg34[6])};
assign sdcore_crc7_inserter_reg36 = {sdcore_crc7_inserter_reg35[5], sdcore_crc7_inserter_reg35[4], sdcore_crc7_inserter_reg35[3], (sdcore_crc7_inserter_reg35[2] ^ (sdcore_crc7_inserter_din[4] ^ sdcore_crc7_inserter_reg35[6])), sdcore_crc7_inserter_reg35[1], sdcore_crc7_inserter_reg35[0], (sdcore_crc7_inserter_din[4] ^ sdcore_crc7_inserter_reg35[6])};
assign sdcore_crc7_inserter_reg37 = {sdcore_crc7_inserter_reg36[5], sdcore_crc7_inserter_reg36[4], sdcore_crc7_inserter_reg36[3], (sdcore_crc7_inserter_reg36[2] ^ (sdcore_crc7_inserter_din[3] ^ sdcore_crc7_inserter_reg36[6])), sdcore_crc7_inserter_reg36[1], sdcore_crc7_inserter_reg36[0], (sdcore_crc7_inserter_din[3] ^ sdcore_crc7_inserter_reg36[6])};
assign sdcore_crc7_inserter_reg38 = {sdcore_crc7_inserter_reg37[5], sdcore_crc7_inserter_reg37[4], sdcore_crc7_inserter_reg37[3], (sdcore_crc7_inserter_reg37[2] ^ (sdcore_crc7_inserter_din[2] ^ sdcore_crc7_inserter_reg37[6])), sdcore_crc7_inserter_reg37[1], sdcore_crc7_inserter_reg37[0], (sdcore_crc7_inserter_din[2] ^ sdcore_crc7_inserter_reg37[6])};
assign sdcore_crc7_inserter_reg39 = {sdcore_crc7_inserter_reg38[5], sdcore_crc7_inserter_reg38[4], sdcore_crc7_inserter_reg38[3], (sdcore_crc7_inserter_reg38[2] ^ (sdcore_crc7_inserter_din[1] ^ sdcore_crc7_inserter_reg38[6])), sdcore_crc7_inserter_reg38[1], sdcore_crc7_inserter_reg38[0], (sdcore_crc7_inserter_din[1] ^ sdcore_crc7_inserter_reg38[6])};
assign sdcore_crc7_inserter_reg40 = {sdcore_crc7_inserter_reg39[5], sdcore_crc7_inserter_reg39[4], sdcore_crc7_inserter_reg39[3], (sdcore_crc7_inserter_reg39[2] ^ (sdcore_crc7_inserter_din[0] ^ sdcore_crc7_inserter_reg39[6])), sdcore_crc7_inserter_reg39[1], sdcore_crc7_inserter_reg39[0], (sdcore_crc7_inserter_din[0] ^ sdcore_crc7_inserter_reg39[6])};
always @(*) begin
	sdcore_crc7_inserter_crc <= 7'd0;
	if (sdcore_crc7_inserter_enable) begin
		sdcore_crc7_inserter_crc <= sdcore_crc7_inserter_reg40;
	end else begin
		sdcore_crc7_inserter_crc <= sdcore_crc7_inserter_reg0;
	end
end
assign sdcore_crc16_inserter_crc0_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc0_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc0_din <= 2'd0;
	sdcore_crc16_inserter_crc0_din[0] <= sdcore_crc16_inserter_sink_payload_data[0];
	sdcore_crc16_inserter_crc0_din[1] <= sdcore_crc16_inserter_sink_payload_data[4];
end
assign sdcore_crc16_inserter_crc1_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc1_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc1_din <= 2'd0;
	sdcore_crc16_inserter_crc1_din[0] <= sdcore_crc16_inserter_sink_payload_data[1];
	sdcore_crc16_inserter_crc1_din[1] <= sdcore_crc16_inserter_sink_payload_data[5];
end
assign sdcore_crc16_inserter_crc2_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc2_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc2_din <= 2'd0;
	sdcore_crc16_inserter_crc2_din[0] <= sdcore_crc16_inserter_sink_payload_data[2];
	sdcore_crc16_inserter_crc2_din[1] <= sdcore_crc16_inserter_sink_payload_data[6];
end
assign sdcore_crc16_inserter_crc3_reset = ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready) & sdcore_crc16_inserter_source_last);
assign sdcore_crc16_inserter_crc3_enable = (sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready);
always @(*) begin
	sdcore_crc16_inserter_crc3_din <= 2'd0;
	sdcore_crc16_inserter_crc3_din[0] <= sdcore_crc16_inserter_sink_payload_data[3];
	sdcore_crc16_inserter_crc3_din[1] <= sdcore_crc16_inserter_sink_payload_data[7];
end
assign sdcore_crc16_inserter_crc0_reg1 = {sdcore_crc16_inserter_crc0_reg0[14], sdcore_crc16_inserter_crc0_reg0[13], sdcore_crc16_inserter_crc0_reg0[12], (sdcore_crc16_inserter_crc0_reg0[11] ^ (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])), sdcore_crc16_inserter_crc0_reg0[10], sdcore_crc16_inserter_crc0_reg0[9], sdcore_crc16_inserter_crc0_reg0[8], sdcore_crc16_inserter_crc0_reg0[7], sdcore_crc16_inserter_crc0_reg0[6], sdcore_crc16_inserter_crc0_reg0[5], (sdcore_crc16_inserter_crc0_reg0[4] ^ (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])), sdcore_crc16_inserter_crc0_reg0[3], sdcore_crc16_inserter_crc0_reg0[2], sdcore_crc16_inserter_crc0_reg0[1], sdcore_crc16_inserter_crc0_reg0[0], (sdcore_crc16_inserter_crc0_din[1] ^ sdcore_crc16_inserter_crc0_reg0[15])};
assign sdcore_crc16_inserter_crc0_reg2 = {sdcore_crc16_inserter_crc0_reg1[14], sdcore_crc16_inserter_crc0_reg1[13], sdcore_crc16_inserter_crc0_reg1[12], (sdcore_crc16_inserter_crc0_reg1[11] ^ (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])), sdcore_crc16_inserter_crc0_reg1[10], sdcore_crc16_inserter_crc0_reg1[9], sdcore_crc16_inserter_crc0_reg1[8], sdcore_crc16_inserter_crc0_reg1[7], sdcore_crc16_inserter_crc0_reg1[6], sdcore_crc16_inserter_crc0_reg1[5], (sdcore_crc16_inserter_crc0_reg1[4] ^ (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])), sdcore_crc16_inserter_crc0_reg1[3], sdcore_crc16_inserter_crc0_reg1[2], sdcore_crc16_inserter_crc0_reg1[1], sdcore_crc16_inserter_crc0_reg1[0], (sdcore_crc16_inserter_crc0_din[0] ^ sdcore_crc16_inserter_crc0_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc0_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc0_enable) begin
		sdcore_crc16_inserter_crc0_crc <= sdcore_crc16_inserter_crc0_reg2;
	end else begin
		sdcore_crc16_inserter_crc0_crc <= sdcore_crc16_inserter_crc0_reg0;
	end
end
assign sdcore_crc16_inserter_crc1_reg1 = {sdcore_crc16_inserter_crc1_reg0[14], sdcore_crc16_inserter_crc1_reg0[13], sdcore_crc16_inserter_crc1_reg0[12], (sdcore_crc16_inserter_crc1_reg0[11] ^ (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])), sdcore_crc16_inserter_crc1_reg0[10], sdcore_crc16_inserter_crc1_reg0[9], sdcore_crc16_inserter_crc1_reg0[8], sdcore_crc16_inserter_crc1_reg0[7], sdcore_crc16_inserter_crc1_reg0[6], sdcore_crc16_inserter_crc1_reg0[5], (sdcore_crc16_inserter_crc1_reg0[4] ^ (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])), sdcore_crc16_inserter_crc1_reg0[3], sdcore_crc16_inserter_crc1_reg0[2], sdcore_crc16_inserter_crc1_reg0[1], sdcore_crc16_inserter_crc1_reg0[0], (sdcore_crc16_inserter_crc1_din[1] ^ sdcore_crc16_inserter_crc1_reg0[15])};
assign sdcore_crc16_inserter_crc1_reg2 = {sdcore_crc16_inserter_crc1_reg1[14], sdcore_crc16_inserter_crc1_reg1[13], sdcore_crc16_inserter_crc1_reg1[12], (sdcore_crc16_inserter_crc1_reg1[11] ^ (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])), sdcore_crc16_inserter_crc1_reg1[10], sdcore_crc16_inserter_crc1_reg1[9], sdcore_crc16_inserter_crc1_reg1[8], sdcore_crc16_inserter_crc1_reg1[7], sdcore_crc16_inserter_crc1_reg1[6], sdcore_crc16_inserter_crc1_reg1[5], (sdcore_crc16_inserter_crc1_reg1[4] ^ (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])), sdcore_crc16_inserter_crc1_reg1[3], sdcore_crc16_inserter_crc1_reg1[2], sdcore_crc16_inserter_crc1_reg1[1], sdcore_crc16_inserter_crc1_reg1[0], (sdcore_crc16_inserter_crc1_din[0] ^ sdcore_crc16_inserter_crc1_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc1_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc1_enable) begin
		sdcore_crc16_inserter_crc1_crc <= sdcore_crc16_inserter_crc1_reg2;
	end else begin
		sdcore_crc16_inserter_crc1_crc <= sdcore_crc16_inserter_crc1_reg0;
	end
end
assign sdcore_crc16_inserter_crc2_reg1 = {sdcore_crc16_inserter_crc2_reg0[14], sdcore_crc16_inserter_crc2_reg0[13], sdcore_crc16_inserter_crc2_reg0[12], (sdcore_crc16_inserter_crc2_reg0[11] ^ (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])), sdcore_crc16_inserter_crc2_reg0[10], sdcore_crc16_inserter_crc2_reg0[9], sdcore_crc16_inserter_crc2_reg0[8], sdcore_crc16_inserter_crc2_reg0[7], sdcore_crc16_inserter_crc2_reg0[6], sdcore_crc16_inserter_crc2_reg0[5], (sdcore_crc16_inserter_crc2_reg0[4] ^ (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])), sdcore_crc16_inserter_crc2_reg0[3], sdcore_crc16_inserter_crc2_reg0[2], sdcore_crc16_inserter_crc2_reg0[1], sdcore_crc16_inserter_crc2_reg0[0], (sdcore_crc16_inserter_crc2_din[1] ^ sdcore_crc16_inserter_crc2_reg0[15])};
assign sdcore_crc16_inserter_crc2_reg2 = {sdcore_crc16_inserter_crc2_reg1[14], sdcore_crc16_inserter_crc2_reg1[13], sdcore_crc16_inserter_crc2_reg1[12], (sdcore_crc16_inserter_crc2_reg1[11] ^ (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])), sdcore_crc16_inserter_crc2_reg1[10], sdcore_crc16_inserter_crc2_reg1[9], sdcore_crc16_inserter_crc2_reg1[8], sdcore_crc16_inserter_crc2_reg1[7], sdcore_crc16_inserter_crc2_reg1[6], sdcore_crc16_inserter_crc2_reg1[5], (sdcore_crc16_inserter_crc2_reg1[4] ^ (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])), sdcore_crc16_inserter_crc2_reg1[3], sdcore_crc16_inserter_crc2_reg1[2], sdcore_crc16_inserter_crc2_reg1[1], sdcore_crc16_inserter_crc2_reg1[0], (sdcore_crc16_inserter_crc2_din[0] ^ sdcore_crc16_inserter_crc2_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc2_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc2_enable) begin
		sdcore_crc16_inserter_crc2_crc <= sdcore_crc16_inserter_crc2_reg2;
	end else begin
		sdcore_crc16_inserter_crc2_crc <= sdcore_crc16_inserter_crc2_reg0;
	end
end
assign sdcore_crc16_inserter_crc3_reg1 = {sdcore_crc16_inserter_crc3_reg0[14], sdcore_crc16_inserter_crc3_reg0[13], sdcore_crc16_inserter_crc3_reg0[12], (sdcore_crc16_inserter_crc3_reg0[11] ^ (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])), sdcore_crc16_inserter_crc3_reg0[10], sdcore_crc16_inserter_crc3_reg0[9], sdcore_crc16_inserter_crc3_reg0[8], sdcore_crc16_inserter_crc3_reg0[7], sdcore_crc16_inserter_crc3_reg0[6], sdcore_crc16_inserter_crc3_reg0[5], (sdcore_crc16_inserter_crc3_reg0[4] ^ (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])), sdcore_crc16_inserter_crc3_reg0[3], sdcore_crc16_inserter_crc3_reg0[2], sdcore_crc16_inserter_crc3_reg0[1], sdcore_crc16_inserter_crc3_reg0[0], (sdcore_crc16_inserter_crc3_din[1] ^ sdcore_crc16_inserter_crc3_reg0[15])};
assign sdcore_crc16_inserter_crc3_reg2 = {sdcore_crc16_inserter_crc3_reg1[14], sdcore_crc16_inserter_crc3_reg1[13], sdcore_crc16_inserter_crc3_reg1[12], (sdcore_crc16_inserter_crc3_reg1[11] ^ (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])), sdcore_crc16_inserter_crc3_reg1[10], sdcore_crc16_inserter_crc3_reg1[9], sdcore_crc16_inserter_crc3_reg1[8], sdcore_crc16_inserter_crc3_reg1[7], sdcore_crc16_inserter_crc3_reg1[6], sdcore_crc16_inserter_crc3_reg1[5], (sdcore_crc16_inserter_crc3_reg1[4] ^ (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])), sdcore_crc16_inserter_crc3_reg1[3], sdcore_crc16_inserter_crc3_reg1[2], sdcore_crc16_inserter_crc3_reg1[1], sdcore_crc16_inserter_crc3_reg1[0], (sdcore_crc16_inserter_crc3_din[0] ^ sdcore_crc16_inserter_crc3_reg1[15])};
always @(*) begin
	sdcore_crc16_inserter_crc3_crc <= 16'd0;
	if (sdcore_crc16_inserter_crc3_enable) begin
		sdcore_crc16_inserter_crc3_crc <= sdcore_crc16_inserter_crc3_reg2;
	end else begin
		sdcore_crc16_inserter_crc3_crc <= sdcore_crc16_inserter_crc3_reg0;
	end
end
always @(*) begin
	sdcore_crc16_inserter_sink_ready <= 1'd0;
	builder_sdcore_crc16inserter_next_state <= 1'd0;
	sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= 3'd0;
	sdcore_crc16_inserter_source_valid <= 1'd0;
	sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd0;
	sdcore_crc16_inserter_source_first <= 1'd0;
	sdcore_crc16_inserter_source_last <= 1'd0;
	sdcore_crc16_inserter_source_payload_data <= 8'd0;
	builder_sdcore_crc16inserter_next_state <= builder_sdcore_crc16inserter_state;
	case (builder_sdcore_crc16inserter_state)
		1'd1: begin
			sdcore_crc16_inserter_source_valid <= 1'd1;
			sdcore_crc16_inserter_source_last <= (sdcore_crc16_inserter_count == 3'd7);
			case (sdcore_crc16_inserter_count)
				1'd0: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[14];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[14];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[14];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[14];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[15];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[15];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[15];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[15];
				end
				1'd1: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[12];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[12];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[12];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[12];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[13];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[13];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[13];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[13];
				end
				2'd2: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[10];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[10];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[10];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[10];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[11];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[11];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[11];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[11];
				end
				2'd3: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[8];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[8];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[8];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[8];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[9];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[9];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[9];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[9];
				end
				3'd4: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[6];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[6];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[6];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[6];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[7];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[7];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[7];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[7];
				end
				3'd5: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[4];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[4];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[4];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[4];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[5];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[5];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[5];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[5];
				end
				3'd6: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[2];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[2];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[2];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[2];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[3];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[3];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[3];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[3];
				end
				3'd7: begin
					sdcore_crc16_inserter_source_payload_data[0] <= sdcore_crc16_inserter_crc0_crc[0];
					sdcore_crc16_inserter_source_payload_data[1] <= sdcore_crc16_inserter_crc1_crc[0];
					sdcore_crc16_inserter_source_payload_data[2] <= sdcore_crc16_inserter_crc2_crc[0];
					sdcore_crc16_inserter_source_payload_data[3] <= sdcore_crc16_inserter_crc3_crc[0];
					sdcore_crc16_inserter_source_payload_data[4] <= sdcore_crc16_inserter_crc0_crc[1];
					sdcore_crc16_inserter_source_payload_data[5] <= sdcore_crc16_inserter_crc1_crc[1];
					sdcore_crc16_inserter_source_payload_data[6] <= sdcore_crc16_inserter_crc2_crc[1];
					sdcore_crc16_inserter_source_payload_data[7] <= sdcore_crc16_inserter_crc3_crc[1];
				end
			endcase
			if ((sdcore_crc16_inserter_source_valid & sdcore_crc16_inserter_source_ready)) begin
				sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= (sdcore_crc16_inserter_count + 1'd1);
				sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd1;
				if (sdcore_crc16_inserter_source_last) begin
					builder_sdcore_crc16inserter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value <= 1'd0;
			sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce <= 1'd1;
			sdcore_crc16_inserter_source_valid <= sdcore_crc16_inserter_sink_valid;
			sdcore_crc16_inserter_sink_ready <= sdcore_crc16_inserter_source_ready;
			sdcore_crc16_inserter_source_first <= sdcore_crc16_inserter_sink_first;
			sdcore_crc16_inserter_source_payload_data <= sdcore_crc16_inserter_sink_payload_data;
			sdcore_crc16_inserter_source_last <= 1'd0;
			if ((sdcore_crc16_inserter_sink_valid & sdcore_crc16_inserter_sink_ready)) begin
				if (sdcore_crc16_inserter_sink_last) begin
					builder_sdcore_crc16inserter_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign sdcore_fifo_sink_valid = sdcore_sink_sink_valid1;
assign sdcore_sink_sink_ready1 = sdcore_fifo_sink_ready;
assign sdcore_fifo_sink_first = sdcore_sink_sink_first1;
assign sdcore_fifo_sink_last = sdcore_sink_sink_last1;
assign sdcore_fifo_sink_payload_data = sdcore_sink_sink_payload_data1;
assign sdcore_source_source_first1 = sdcore_fifo_source_first;
assign sdcore_source_source_last1 = sdcore_fifo_source_last;
assign sdcore_source_source_payload_data1 = sdcore_fifo_source_payload_data;
assign sdcore_source_source_valid1 = (sdcore_fifo_level >= 4'd8);
assign sdcore_fifo_source_ready = (sdcore_source_source_valid1 & sdcore_source_source_ready1);
assign sdcore_fifo_reset = ((sdcore_sink_sink_valid1 & sdcore_sink_sink_ready1) & sdcore_sink_sink_last1);
assign sdcore_fifo_syncfifo_din = {sdcore_fifo_fifo_in_last, sdcore_fifo_fifo_in_first, sdcore_fifo_fifo_in_payload_data};
assign {sdcore_fifo_fifo_out_last, sdcore_fifo_fifo_out_first, sdcore_fifo_fifo_out_payload_data} = sdcore_fifo_syncfifo_dout;
assign sdcore_fifo_sink_ready = sdcore_fifo_syncfifo_writable;
assign sdcore_fifo_syncfifo_we = sdcore_fifo_sink_valid;
assign sdcore_fifo_fifo_in_first = sdcore_fifo_sink_first;
assign sdcore_fifo_fifo_in_last = sdcore_fifo_sink_last;
assign sdcore_fifo_fifo_in_payload_data = sdcore_fifo_sink_payload_data;
assign sdcore_fifo_source_valid = sdcore_fifo_syncfifo_readable;
assign sdcore_fifo_source_first = sdcore_fifo_fifo_out_first;
assign sdcore_fifo_source_last = sdcore_fifo_fifo_out_last;
assign sdcore_fifo_source_payload_data = sdcore_fifo_fifo_out_payload_data;
assign sdcore_fifo_syncfifo_re = sdcore_fifo_source_ready;
always @(*) begin
	sdcore_fifo_wrport_adr <= 3'd0;
	if (sdcore_fifo_replace) begin
		sdcore_fifo_wrport_adr <= (sdcore_fifo_produce - 1'd1);
	end else begin
		sdcore_fifo_wrport_adr <= sdcore_fifo_produce;
	end
end
assign sdcore_fifo_wrport_dat_w = sdcore_fifo_syncfifo_din;
assign sdcore_fifo_wrport_we = (sdcore_fifo_syncfifo_we & (sdcore_fifo_syncfifo_writable | sdcore_fifo_replace));
assign sdcore_fifo_do_read = (sdcore_fifo_syncfifo_readable & sdcore_fifo_syncfifo_re);
assign sdcore_fifo_rdport_adr = sdcore_fifo_consume;
assign sdcore_fifo_syncfifo_dout = sdcore_fifo_rdport_dat_r;
assign sdcore_fifo_syncfifo_writable = (sdcore_fifo_level != 4'd8);
assign sdcore_fifo_syncfifo_readable = (sdcore_fifo_level != 1'd0);
always @(*) begin
	sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd0;
	sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd0;
	cmdr_sink_valid <= 1'd0;
	sdcore_data_error_sdcore_fsm_next_value6 <= 1'd0;
	sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd0;
	cmdr_sink_payload_cmd_type <= 2'd0;
	cmdr_sink_payload_data_type <= 2'd0;
	sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd0;
	cmdr_sink_payload_length <= 8'd0;
	sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd0;
	cmdr_source_ready <= 1'd0;
	dataw_sink_valid <= 1'd0;
	dataw_sink_first <= 1'd0;
	dataw_sink_last <= 1'd0;
	dataw_sink_payload_data <= 8'd0;
	cmdw_sink_valid <= 1'd0;
	datar_sink_valid <= 1'd0;
	cmdw_sink_last <= 1'd0;
	datar_sink_last <= 1'd0;
	cmdw_sink_payload_data <= 8'd0;
	datar_sink_payload_block_length <= 10'd0;
	cmdw_sink_payload_cmd_type <= 2'd0;
	sdcore_cmd_response_status_sdcore_fsm_next_value8 <= 128'd0;
	datar_source_ready <= 1'd0;
	sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 <= 1'd0;
	sdcore_crc16_inserter_source_ready <= 1'd0;
	sdcore_sink_sink_valid1 <= 1'd0;
	sdcore_sink_sink_first1 <= 1'd0;
	sdcore_sink_sink_last1 <= 1'd0;
	sdcore_sink_sink_payload_data1 <= 8'd0;
	builder_sdcore_fsm_next_state <= 3'd0;
	sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd0;
	sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd0;
	sdcore_data_done_sdcore_fsm_next_value1 <= 1'd0;
	sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd0;
	sdcore_cmd_count_sdcore_fsm_next_value2 <= 3'd0;
	sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd0;
	sdcore_data_count_sdcore_fsm_next_value3 <= 32'd0;
	sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd0;
	sdcore_cmd_error_sdcore_fsm_next_value4 <= 1'd0;
	sdcore_cmd_error_sdcore_fsm_next_value_ce4 <= 1'd0;
	builder_sdcore_fsm_next_state <= builder_sdcore_fsm_state;
	case (builder_sdcore_fsm_state)
		1'd1: begin
			cmdw_sink_valid <= 1'd1;
			cmdw_sink_last <= (sdcore_cmd_count == 3'd5);
			cmdw_sink_payload_cmd_type <= sdcore_cmd_type;
			case (sdcore_cmd_count)
				1'd0: begin
					cmdw_sink_payload_data <= {1'd0, 1'd1, sdcore_cmd};
				end
				1'd1: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[31:24];
				end
				2'd2: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[23:16];
				end
				2'd3: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[15:8];
				end
				3'd4: begin
					cmdw_sink_payload_data <= sdcore_cmd_argument_storage[7:0];
				end
				3'd5: begin
					cmdw_sink_payload_data <= {sdcore_crc7_inserter_crc, 1'd1};
				end
			endcase
			if (cmdw_sink_ready) begin
				sdcore_cmd_count_sdcore_fsm_next_value2 <= (sdcore_cmd_count + 1'd1);
				sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd1;
				if (cmdw_sink_last) begin
					if ((sdcore_cmd_type == 1'd0)) begin
						builder_sdcore_fsm_next_state <= 1'd0;
					end else begin
						builder_sdcore_fsm_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			cmdr_sink_valid <= 1'd1;
			cmdr_sink_payload_cmd_type <= sdcore_cmd_type;
			cmdr_sink_payload_data_type <= sdcore_data_type;
			if ((sdcore_cmd_type == 2'd2)) begin
				cmdr_sink_payload_length <= 5'd18;
			end else begin
				cmdr_sink_payload_length <= 3'd6;
			end
			cmdr_source_ready <= 1'd1;
			if (cmdr_source_valid) begin
				if ((cmdr_source_payload_status == 1'd1)) begin
					sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd1;
					sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd1;
					builder_sdcore_fsm_next_state <= 1'd0;
				end else begin
					if (cmdr_source_last) begin
						if ((sdcore_data_type == 2'd2)) begin
							builder_sdcore_fsm_next_state <= 2'd3;
						end else begin
							if ((sdcore_data_type == 1'd1)) begin
								builder_sdcore_fsm_next_state <= 3'd4;
							end else begin
								builder_sdcore_fsm_next_state <= 1'd0;
							end
						end
					end else begin
						sdcore_cmd_response_status_sdcore_fsm_next_value8 <= {sdcore_cmd_response_status, cmdr_source_payload_data};
						sdcore_cmd_response_status_sdcore_fsm_next_value_ce8 <= 1'd1;
					end
				end
			end
		end
		2'd3: begin
			dataw_sink_valid <= sdcore_crc16_inserter_source_valid;
			sdcore_crc16_inserter_source_ready <= dataw_sink_ready;
			dataw_sink_first <= sdcore_crc16_inserter_source_first;
			dataw_sink_last <= sdcore_crc16_inserter_source_last;
			dataw_sink_payload_data <= sdcore_crc16_inserter_source_payload_data;
			if (((dataw_sink_valid & dataw_sink_ready) & dataw_sink_last)) begin
				sdcore_data_count_sdcore_fsm_next_value3 <= (sdcore_data_count + 1'd1);
				sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
				if ((sdcore_data_count == (sdcore_block_count_storage - 1'd1))) begin
					builder_sdcore_fsm_next_state <= 1'd0;
				end
			end
			datar_source_ready <= 1'd1;
			if (datar_source_valid) begin
				if ((datar_source_payload_status != 2'd2)) begin
					sdcore_data_error_sdcore_fsm_next_value6 <= 1'd1;
					sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd1;
				end
			end
		end
		3'd4: begin
			datar_sink_valid <= 1'd1;
			datar_sink_payload_block_length <= sdcore_block_length_storage;
			datar_sink_last <= (sdcore_data_count == (sdcore_block_count_storage - 1'd1));
			if (datar_source_valid) begin
				if ((datar_source_payload_status == 1'd0)) begin
					sdcore_sink_sink_valid1 <= datar_source_valid;
					datar_source_ready <= sdcore_sink_sink_ready1;
					sdcore_sink_sink_first1 <= datar_source_first;
					sdcore_sink_sink_last1 <= datar_source_last;
					sdcore_sink_sink_payload_data1 <= datar_source_payload_data;
					if ((datar_source_last & datar_source_ready)) begin
						sdcore_data_count_sdcore_fsm_next_value3 <= (sdcore_data_count + 1'd1);
						sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
						if ((sdcore_data_count == (sdcore_block_count_storage - 1'd1))) begin
							builder_sdcore_fsm_next_state <= 1'd0;
						end
					end
				end else begin
					if ((datar_source_payload_status == 1'd1)) begin
						sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd1;
						sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd1;
						datar_source_ready <= 1'd1;
						builder_sdcore_fsm_next_state <= 1'd0;
					end
				end
			end
		end
		default: begin
			sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd1;
			sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd1;
			sdcore_data_done_sdcore_fsm_next_value1 <= 1'd1;
			sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd1;
			sdcore_cmd_count_sdcore_fsm_next_value2 <= 1'd0;
			sdcore_cmd_count_sdcore_fsm_next_value_ce2 <= 1'd1;
			sdcore_data_count_sdcore_fsm_next_value3 <= 1'd0;
			sdcore_data_count_sdcore_fsm_next_value_ce3 <= 1'd1;
			if (sdcore_cmd_send_re) begin
				sdcore_cmd_done_sdcore_fsm_next_value0 <= 1'd0;
				sdcore_cmd_done_sdcore_fsm_next_value_ce0 <= 1'd1;
				sdcore_cmd_error_sdcore_fsm_next_value4 <= 1'd0;
				sdcore_cmd_error_sdcore_fsm_next_value_ce4 <= 1'd1;
				sdcore_cmd_timeout_sdcore_fsm_next_value5 <= 1'd0;
				sdcore_cmd_timeout_sdcore_fsm_next_value_ce5 <= 1'd1;
				sdcore_data_done_sdcore_fsm_next_value1 <= 1'd0;
				sdcore_data_done_sdcore_fsm_next_value_ce1 <= 1'd1;
				sdcore_data_error_sdcore_fsm_next_value6 <= 1'd0;
				sdcore_data_error_sdcore_fsm_next_value_ce6 <= 1'd1;
				sdcore_data_timeout_sdcore_fsm_next_value7 <= 1'd0;
				sdcore_data_timeout_sdcore_fsm_next_value_ce7 <= 1'd1;
				builder_sdcore_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign sdblock2mem_start = (sdblock2mem_sink_sink_valid0 & sdblock2mem_sink_sink_first);
always @(*) begin
	sdblock2mem_fifo_sink_valid <= 1'd0;
	sdblock2mem_fifo_sink_first <= 1'd0;
	sdblock2mem_sink_sink_ready0 <= 1'd0;
	sdblock2mem_fifo_sink_last <= 1'd0;
	sdblock2mem_fifo_sink_payload_data <= 8'd0;
	if ((sdblock2mem_wishbonedmawriter_enable_storage & (sdblock2mem_start | sdblock2mem_connect))) begin
		sdblock2mem_fifo_sink_valid <= sdblock2mem_sink_sink_valid0;
		sdblock2mem_sink_sink_ready0 <= sdblock2mem_fifo_sink_ready;
		sdblock2mem_fifo_sink_first <= sdblock2mem_sink_sink_first;
		sdblock2mem_fifo_sink_last <= sdblock2mem_sink_sink_last0;
		sdblock2mem_fifo_sink_payload_data <= sdblock2mem_sink_sink_payload_data0;
	end else begin
		sdblock2mem_sink_sink_ready0 <= 1'd1;
	end
end
assign sdblock2mem_converter_sink_valid = sdblock2mem_fifo_source_valid;
assign sdblock2mem_fifo_source_ready = sdblock2mem_converter_sink_ready;
assign sdblock2mem_converter_sink_first = sdblock2mem_fifo_source_first;
assign sdblock2mem_converter_sink_last = sdblock2mem_fifo_source_last;
assign sdblock2mem_converter_sink_payload_data = sdblock2mem_fifo_source_payload_data;
assign sdblock2mem_wishbonedmawriter_sink_valid = sdblock2mem_source_source_valid;
assign sdblock2mem_source_source_ready = sdblock2mem_wishbonedmawriter_sink_ready;
assign sdblock2mem_wishbonedmawriter_sink_first = sdblock2mem_source_source_first;
assign sdblock2mem_wishbonedmawriter_sink_last = sdblock2mem_source_source_last;
assign sdblock2mem_wishbonedmawriter_sink_payload_data = sdblock2mem_source_source_payload_data;
assign sdblock2mem_fifo_syncfifo_din = {sdblock2mem_fifo_fifo_in_last, sdblock2mem_fifo_fifo_in_first, sdblock2mem_fifo_fifo_in_payload_data};
assign {sdblock2mem_fifo_fifo_out_last, sdblock2mem_fifo_fifo_out_first, sdblock2mem_fifo_fifo_out_payload_data} = sdblock2mem_fifo_syncfifo_dout;
assign sdblock2mem_fifo_sink_ready = sdblock2mem_fifo_syncfifo_writable;
assign sdblock2mem_fifo_syncfifo_we = sdblock2mem_fifo_sink_valid;
assign sdblock2mem_fifo_fifo_in_first = sdblock2mem_fifo_sink_first;
assign sdblock2mem_fifo_fifo_in_last = sdblock2mem_fifo_sink_last;
assign sdblock2mem_fifo_fifo_in_payload_data = sdblock2mem_fifo_sink_payload_data;
assign sdblock2mem_fifo_source_valid = sdblock2mem_fifo_readable;
assign sdblock2mem_fifo_source_first = sdblock2mem_fifo_fifo_out_first;
assign sdblock2mem_fifo_source_last = sdblock2mem_fifo_fifo_out_last;
assign sdblock2mem_fifo_source_payload_data = sdblock2mem_fifo_fifo_out_payload_data;
assign sdblock2mem_fifo_re = sdblock2mem_fifo_source_ready;
assign sdblock2mem_fifo_syncfifo_re = (sdblock2mem_fifo_syncfifo_readable & ((~sdblock2mem_fifo_readable) | sdblock2mem_fifo_re));
assign sdblock2mem_fifo_level1 = (sdblock2mem_fifo_level0 + sdblock2mem_fifo_readable);
always @(*) begin
	sdblock2mem_fifo_wrport_adr <= 9'd0;
	if (sdblock2mem_fifo_replace) begin
		sdblock2mem_fifo_wrport_adr <= (sdblock2mem_fifo_produce - 1'd1);
	end else begin
		sdblock2mem_fifo_wrport_adr <= sdblock2mem_fifo_produce;
	end
end
assign sdblock2mem_fifo_wrport_dat_w = sdblock2mem_fifo_syncfifo_din;
assign sdblock2mem_fifo_wrport_we = (sdblock2mem_fifo_syncfifo_we & (sdblock2mem_fifo_syncfifo_writable | sdblock2mem_fifo_replace));
assign sdblock2mem_fifo_do_read = (sdblock2mem_fifo_syncfifo_readable & sdblock2mem_fifo_syncfifo_re);
assign sdblock2mem_fifo_rdport_adr = sdblock2mem_fifo_consume;
assign sdblock2mem_fifo_syncfifo_dout = sdblock2mem_fifo_rdport_dat_r;
assign sdblock2mem_fifo_rdport_re = sdblock2mem_fifo_do_read;
assign sdblock2mem_fifo_syncfifo_writable = (sdblock2mem_fifo_level0 != 10'd512);
assign sdblock2mem_fifo_syncfifo_readable = (sdblock2mem_fifo_level0 != 1'd0);
assign sdblock2mem_source_source_valid = sdblock2mem_converter_source_valid;
assign sdblock2mem_converter_source_ready = sdblock2mem_source_source_ready;
assign sdblock2mem_source_source_first = sdblock2mem_converter_source_first;
assign sdblock2mem_source_source_last = sdblock2mem_converter_source_last;
assign sdblock2mem_source_source_payload_data = sdblock2mem_converter_source_payload_data;
assign sdblock2mem_converter_sink_ready = ((~sdblock2mem_converter_strobe_all) | sdblock2mem_converter_source_ready);
assign sdblock2mem_converter_source_valid = sdblock2mem_converter_strobe_all;
assign sdblock2mem_converter_load_part = (sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready);
assign interface0_bus_stb = sdblock2mem_sink_sink_valid1;
assign interface0_bus_cyc = sdblock2mem_sink_sink_valid1;
assign interface0_bus_we = 1'd1;
assign interface0_bus_sel = 4'd15;
assign interface0_bus_adr = sdblock2mem_sink_sink_payload_address;
assign interface0_bus_dat_w = {sdblock2mem_sink_sink_payload_data1[7:0], sdblock2mem_sink_sink_payload_data1[15:8], sdblock2mem_sink_sink_payload_data1[23:16], sdblock2mem_sink_sink_payload_data1[31:24]};
assign sdblock2mem_sink_sink_ready1 = interface0_bus_ack;
assign sdblock2mem_wishbonedmawriter_base = sdblock2mem_wishbonedmawriter_base_storage[63:2];
assign sdblock2mem_wishbonedmawriter_length = sdblock2mem_wishbonedmawriter_length_storage[31:2];
assign sdblock2mem_wishbonedmawriter_offset_status = sdblock2mem_wishbonedmawriter_offset;
assign sdblock2mem_wishbonedmawriter_reset = (~sdblock2mem_wishbonedmawriter_enable_storage);
always @(*) begin
	sdblock2mem_sink_sink_last1 <= 1'd0;
	sdblock2mem_sink_sink_payload_address <= 32'd0;
	sdblock2mem_sink_sink_payload_data1 <= 32'd0;
	sdblock2mem_wishbonedmawriter_done_status <= 1'd0;
	builder_sdblock2memdma_next_state <= 2'd0;
	sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value <= 32'd0;
	sdblock2mem_wishbonedmawriter_sink_ready <= 1'd0;
	sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce <= 1'd0;
	sdblock2mem_sink_sink_valid1 <= 1'd0;
	builder_sdblock2memdma_next_state <= builder_sdblock2memdma_state;
	case (builder_sdblock2memdma_state)
		1'd1: begin
			sdblock2mem_sink_sink_valid1 <= sdblock2mem_wishbonedmawriter_sink_valid;
			sdblock2mem_sink_sink_last1 <= (sdblock2mem_wishbonedmawriter_offset == (sdblock2mem_wishbonedmawriter_length - 1'd1));
			sdblock2mem_sink_sink_payload_address <= (sdblock2mem_wishbonedmawriter_base + sdblock2mem_wishbonedmawriter_offset);
			sdblock2mem_sink_sink_payload_data1 <= sdblock2mem_wishbonedmawriter_sink_payload_data;
			sdblock2mem_wishbonedmawriter_sink_ready <= sdblock2mem_sink_sink_ready1;
			if ((sdblock2mem_wishbonedmawriter_sink_valid & sdblock2mem_wishbonedmawriter_sink_ready)) begin
				sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value <= (sdblock2mem_wishbonedmawriter_offset + 1'd1);
				sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce <= 1'd1;
				if (sdblock2mem_sink_sink_last1) begin
					if (sdblock2mem_wishbonedmawriter_loop_storage) begin
						sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value <= 1'd0;
						sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce <= 1'd1;
					end else begin
						builder_sdblock2memdma_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			sdblock2mem_wishbonedmawriter_done_status <= 1'd1;
		end
		default: begin
			sdblock2mem_wishbonedmawriter_sink_ready <= 1'd1;
			sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value <= 1'd0;
			sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce <= 1'd1;
			builder_sdblock2memdma_next_state <= 1'd1;
		end
	endcase
end
assign sdmem2block_converter_sink_valid = sdmem2block_dma_source_valid;
assign sdmem2block_dma_source_ready = sdmem2block_converter_sink_ready;
assign sdmem2block_converter_sink_first = sdmem2block_dma_source_first;
assign sdmem2block_converter_sink_last = sdmem2block_dma_source_last;
assign sdmem2block_converter_sink_payload_data = sdmem2block_dma_source_payload_data;
assign sdmem2block_fifo_sink_valid = sdmem2block_source_source_valid1;
assign sdmem2block_source_source_ready1 = sdmem2block_fifo_sink_ready;
assign sdmem2block_fifo_sink_first = sdmem2block_source_source_first1;
assign sdmem2block_fifo_sink_last = sdmem2block_source_source_last1;
assign sdmem2block_fifo_sink_payload_data = sdmem2block_source_source_payload_data1;
assign sdmem2block_source_source_valid0 = sdmem2block_fifo_source_valid;
assign sdmem2block_fifo_source_ready = sdmem2block_source_source_ready0;
assign sdmem2block_source_source_first0 = sdmem2block_fifo_source_first;
assign sdmem2block_source_source_payload_data0 = sdmem2block_fifo_source_payload_data;
always @(*) begin
	sdmem2block_source_source_last0 <= 1'd0;
	sdmem2block_source_source_last0 <= sdmem2block_fifo_source_last;
	if ((sdmem2block_count == 9'd511)) begin
		sdmem2block_source_source_last0 <= 1'd1;
	end
end
assign sdmem2block_dma_base = sdmem2block_dma_base_storage[63:2];
assign sdmem2block_dma_length = sdmem2block_dma_length_storage[31:2];
assign sdmem2block_dma_offset_status = sdmem2block_dma_offset;
assign sdmem2block_dma_reset = (~sdmem2block_dma_enable_storage);
always @(*) begin
	sdmem2block_dma_sink_ready <= 1'd0;
	interface1_bus_sel <= 4'd0;
	interface1_bus_cyc <= 1'd0;
	interface1_bus_stb <= 1'd0;
	builder_sdmem2blockdma_fsm_next_state <= 1'd0;
	sdmem2block_dma_source_valid <= 1'd0;
	sdmem2block_dma_data_sdmem2blockdma_fsm_next_value <= 32'd0;
	interface1_bus_we <= 1'd0;
	sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce <= 1'd0;
	sdmem2block_dma_source_last <= 1'd0;
	sdmem2block_dma_source_payload_data <= 32'd0;
	interface1_bus_adr <= 32'd0;
	builder_sdmem2blockdma_fsm_next_state <= builder_sdmem2blockdma_fsm_state;
	case (builder_sdmem2blockdma_fsm_state)
		1'd1: begin
			sdmem2block_dma_source_valid <= 1'd1;
			sdmem2block_dma_source_last <= sdmem2block_dma_sink_last;
			sdmem2block_dma_source_payload_data <= sdmem2block_dma_data;
			if (sdmem2block_dma_source_ready) begin
				sdmem2block_dma_sink_ready <= 1'd1;
				builder_sdmem2blockdma_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			interface1_bus_stb <= sdmem2block_dma_sink_valid;
			interface1_bus_cyc <= sdmem2block_dma_sink_valid;
			interface1_bus_we <= 1'd0;
			interface1_bus_sel <= 4'd15;
			interface1_bus_adr <= sdmem2block_dma_sink_payload_address;
			if ((interface1_bus_stb & interface1_bus_ack)) begin
				sdmem2block_dma_data_sdmem2blockdma_fsm_next_value <= {interface1_bus_dat_r[7:0], interface1_bus_dat_r[15:8], interface1_bus_dat_r[23:16], interface1_bus_dat_r[31:24]};
				sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce <= 1'd1;
				builder_sdmem2blockdma_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	sdmem2block_dma_sink_valid <= 1'd0;
	sdmem2block_dma_done_status <= 1'd0;
	sdmem2block_dma_sink_last <= 1'd0;
	sdmem2block_dma_sink_payload_address <= 32'd0;
	builder_sdmem2blockdma_resetinserter_next_state <= 2'd0;
	sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 32'd0;
	sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd0;
	builder_sdmem2blockdma_resetinserter_next_state <= builder_sdmem2blockdma_resetinserter_state;
	case (builder_sdmem2blockdma_resetinserter_state)
		1'd1: begin
			sdmem2block_dma_sink_valid <= 1'd1;
			sdmem2block_dma_sink_last <= (sdmem2block_dma_offset == (sdmem2block_dma_length - 1'd1));
			sdmem2block_dma_sink_payload_address <= (sdmem2block_dma_base + sdmem2block_dma_offset);
			if (sdmem2block_dma_sink_ready) begin
				sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= (sdmem2block_dma_offset + 1'd1);
				sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
				if (sdmem2block_dma_sink_last) begin
					if (sdmem2block_dma_loop_storage) begin
						sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 1'd0;
						sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
					end else begin
						builder_sdmem2blockdma_resetinserter_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			sdmem2block_dma_done_status <= 1'd1;
		end
		default: begin
			sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value <= 1'd0;
			sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce <= 1'd1;
			builder_sdmem2blockdma_resetinserter_next_state <= 1'd1;
		end
	endcase
end
assign sdmem2block_source_source_valid1 = sdmem2block_converter_source_valid;
assign sdmem2block_converter_source_ready = sdmem2block_source_source_ready1;
assign sdmem2block_source_source_first1 = sdmem2block_converter_source_first;
assign sdmem2block_source_source_last1 = sdmem2block_converter_source_last;
assign sdmem2block_source_source_payload_data1 = sdmem2block_converter_source_payload_data;
assign sdmem2block_converter_first = (sdmem2block_converter_mux == 1'd0);
assign sdmem2block_converter_last = (sdmem2block_converter_mux == 2'd3);
assign sdmem2block_converter_source_valid = sdmem2block_converter_sink_valid;
assign sdmem2block_converter_source_first = (sdmem2block_converter_sink_first & sdmem2block_converter_first);
assign sdmem2block_converter_source_last = (sdmem2block_converter_sink_last & sdmem2block_converter_last);
assign sdmem2block_converter_sink_ready = (sdmem2block_converter_last & sdmem2block_converter_source_ready);
always @(*) begin
	sdmem2block_converter_source_payload_data <= 8'd0;
	case (sdmem2block_converter_mux)
		1'd0: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[31:24];
		end
		1'd1: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[23:16];
		end
		2'd2: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[15:8];
		end
		default: begin
			sdmem2block_converter_source_payload_data <= sdmem2block_converter_sink_payload_data[7:0];
		end
	endcase
end
assign sdmem2block_converter_source_payload_valid_token_count = sdmem2block_converter_last;
assign sdmem2block_fifo_syncfifo_din = {sdmem2block_fifo_fifo_in_last, sdmem2block_fifo_fifo_in_first, sdmem2block_fifo_fifo_in_payload_data};
assign {sdmem2block_fifo_fifo_out_last, sdmem2block_fifo_fifo_out_first, sdmem2block_fifo_fifo_out_payload_data} = sdmem2block_fifo_syncfifo_dout;
assign sdmem2block_fifo_sink_ready = sdmem2block_fifo_syncfifo_writable;
assign sdmem2block_fifo_syncfifo_we = sdmem2block_fifo_sink_valid;
assign sdmem2block_fifo_fifo_in_first = sdmem2block_fifo_sink_first;
assign sdmem2block_fifo_fifo_in_last = sdmem2block_fifo_sink_last;
assign sdmem2block_fifo_fifo_in_payload_data = sdmem2block_fifo_sink_payload_data;
assign sdmem2block_fifo_source_valid = sdmem2block_fifo_readable;
assign sdmem2block_fifo_source_first = sdmem2block_fifo_fifo_out_first;
assign sdmem2block_fifo_source_last = sdmem2block_fifo_fifo_out_last;
assign sdmem2block_fifo_source_payload_data = sdmem2block_fifo_fifo_out_payload_data;
assign sdmem2block_fifo_re = sdmem2block_fifo_source_ready;
assign sdmem2block_fifo_syncfifo_re = (sdmem2block_fifo_syncfifo_readable & ((~sdmem2block_fifo_readable) | sdmem2block_fifo_re));
assign sdmem2block_fifo_level1 = (sdmem2block_fifo_level0 + sdmem2block_fifo_readable);
always @(*) begin
	sdmem2block_fifo_wrport_adr <= 9'd0;
	if (sdmem2block_fifo_replace) begin
		sdmem2block_fifo_wrport_adr <= (sdmem2block_fifo_produce - 1'd1);
	end else begin
		sdmem2block_fifo_wrport_adr <= sdmem2block_fifo_produce;
	end
end
assign sdmem2block_fifo_wrport_dat_w = sdmem2block_fifo_syncfifo_din;
assign sdmem2block_fifo_wrport_we = (sdmem2block_fifo_syncfifo_we & (sdmem2block_fifo_syncfifo_writable | sdmem2block_fifo_replace));
assign sdmem2block_fifo_do_read = (sdmem2block_fifo_syncfifo_readable & sdmem2block_fifo_syncfifo_re);
assign sdmem2block_fifo_rdport_adr = sdmem2block_fifo_consume;
assign sdmem2block_fifo_syncfifo_dout = sdmem2block_fifo_rdport_dat_r;
assign sdmem2block_fifo_rdport_re = sdmem2block_fifo_do_read;
assign sdmem2block_fifo_syncfifo_writable = (sdmem2block_fifo_level0 != 10'd512);
assign sdmem2block_fifo_syncfifo_readable = (sdmem2block_fifo_level0 != 1'd0);
assign eventmanager_card_detect0 = card_detect_status1;
assign eventmanager_card_detect1 = card_detect_pending;
always @(*) begin
	card_detect_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[0])) begin
		card_detect_clear <= 1'd1;
	end
end
assign eventmanager_block2mem_dma0 = block2mem_dma_status;
assign eventmanager_block2mem_dma1 = block2mem_dma_pending;
always @(*) begin
	block2mem_dma_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[1])) begin
		block2mem_dma_clear <= 1'd1;
	end
end
assign eventmanager_mem2block_dma0 = mem2block_dma_status;
assign eventmanager_mem2block_dma1 = mem2block_dma_pending;
always @(*) begin
	mem2block_dma_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[2])) begin
		mem2block_dma_clear <= 1'd1;
	end
end
assign eventmanager_cmd_done0 = cmd_done_status;
assign eventmanager_cmd_done1 = cmd_done_pending;
always @(*) begin
	cmd_done_clear <= 1'd0;
	if ((eventmanager_pending_re & eventmanager_pending_r[3])) begin
		cmd_done_clear <= 1'd1;
	end
end
assign sdirq_irq = ((((eventmanager_pending_status[0] & eventmanager_enable_storage[0]) | (eventmanager_pending_status[1] & eventmanager_enable_storage[1])) | (eventmanager_pending_status[2] & eventmanager_enable_storage[2])) | (eventmanager_pending_status[3] & eventmanager_enable_storage[3]));
assign card_detect_status1 = 1'd0;
assign block2mem_dma_status = 1'd0;
assign mem2block_dma_status = 1'd0;
assign cmd_done_status = cmd_done_trigger;
assign cmd_done_pending = cmd_done_trigger;
always @(*) begin
	builder_soclinux_adr_next_value_ce1 <= 1'd0;
	builder_soclinux_we_next_value2 <= 1'd0;
	builder_soclinux_wishbone_ack <= 1'd0;
	builder_soclinux_we_next_value_ce2 <= 1'd0;
	builder_next_state <= 2'd0;
	builder_soclinux_dat_w_next_value0 <= 32'd0;
	builder_soclinux_dat_w_next_value_ce0 <= 1'd0;
	builder_soclinux_wishbone_dat_r <= 32'd0;
	builder_soclinux_adr_next_value1 <= 14'd0;
	builder_next_state <= builder_state;
	case (builder_state)
		1'd1: begin
			builder_soclinux_adr_next_value1 <= 1'd0;
			builder_soclinux_adr_next_value_ce1 <= 1'd1;
			builder_soclinux_we_next_value2 <= 1'd0;
			builder_soclinux_we_next_value_ce2 <= 1'd1;
			builder_next_state <= 2'd2;
		end
		2'd2: begin
			builder_soclinux_wishbone_ack <= 1'd1;
			builder_soclinux_wishbone_dat_r <= builder_soclinux_dat_r;
			builder_next_state <= 1'd0;
		end
		default: begin
			builder_soclinux_dat_w_next_value0 <= builder_soclinux_wishbone_dat_w;
			builder_soclinux_dat_w_next_value_ce0 <= 1'd1;
			if ((builder_soclinux_wishbone_cyc & builder_soclinux_wishbone_stb)) begin
				builder_soclinux_adr_next_value1 <= builder_soclinux_wishbone_adr;
				builder_soclinux_adr_next_value_ce1 <= 1'd1;
				builder_soclinux_we_next_value2 <= (builder_soclinux_wishbone_we & (builder_soclinux_wishbone_sel != 1'd0));
				builder_soclinux_we_next_value_ce2 <= 1'd1;
				builder_next_state <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_comb_rhs_array_muxed24;
assign builder_shared_dat_w = builder_comb_rhs_array_muxed25;
assign builder_shared_sel = builder_comb_rhs_array_muxed26;
assign builder_shared_cyc = builder_comb_rhs_array_muxed27;
assign builder_shared_stb = builder_comb_rhs_array_muxed28;
assign builder_shared_we = builder_comb_rhs_array_muxed29;
assign builder_shared_cti = builder_comb_rhs_array_muxed30;
assign builder_shared_bte = builder_comb_rhs_array_muxed31;
assign main_soclinux_pbus_dat_r = builder_shared_dat_r;
assign interface0_bus_dat_r = builder_shared_dat_r;
assign interface1_bus_dat_r = builder_shared_dat_r;
assign main_soclinux_pbus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign interface0_bus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign interface1_bus_ack = (builder_shared_ack & (builder_grant == 2'd2));
assign main_soclinux_pbus_err = (builder_shared_err & (builder_grant == 1'd0));
assign interface0_bus_err = (builder_shared_err & (builder_grant == 1'd1));
assign interface1_bus_err = (builder_shared_err & (builder_grant == 2'd2));
assign builder_request = {interface1_bus_cyc, interface0_bus_cyc, main_soclinux_pbus_cyc};
always @(*) begin
	builder_slave_sel <= 6'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:20] == 10'd963);
	builder_slave_sel[1] <= (builder_shared_adr[29:14] == 16'd61441);
	builder_slave_sel[2] <= (builder_shared_adr[29:14] == 1'd0);
	builder_slave_sel[3] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[4] <= (builder_shared_adr[29:23] == 6'd32);
	builder_slave_sel[5] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_soclinux_plicbus_adr = builder_shared_adr;
assign main_soclinux_plicbus_dat_w = builder_shared_dat_w;
assign main_soclinux_plicbus_sel = builder_shared_sel;
assign main_soclinux_plicbus_stb = builder_shared_stb;
assign main_soclinux_plicbus_we = builder_shared_we;
assign main_soclinux_plicbus_cti = builder_shared_cti;
assign main_soclinux_plicbus_bte = builder_shared_bte;
assign main_soclinux_clintbus_adr = builder_shared_adr;
assign main_soclinux_clintbus_dat_w = builder_shared_dat_w;
assign main_soclinux_clintbus_sel = builder_shared_sel;
assign main_soclinux_clintbus_stb = builder_shared_stb;
assign main_soclinux_clintbus_we = builder_shared_we;
assign main_soclinux_clintbus_cti = builder_shared_cti;
assign main_soclinux_clintbus_bte = builder_shared_bte;
assign main_soclinux_soclinux_ram_bus_adr = builder_shared_adr;
assign main_soclinux_soclinux_ram_bus_dat_w = builder_shared_dat_w;
assign main_soclinux_soclinux_ram_bus_sel = builder_shared_sel;
assign main_soclinux_soclinux_ram_bus_stb = builder_shared_stb;
assign main_soclinux_soclinux_ram_bus_we = builder_shared_we;
assign main_soclinux_soclinux_ram_bus_cti = builder_shared_cti;
assign main_soclinux_soclinux_ram_bus_bte = builder_shared_bte;
assign main_soclinux_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_soclinux_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_soclinux_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_soclinux_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_soclinux_ram_bus_ram_bus_we = builder_shared_we;
assign main_soclinux_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_soclinux_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_wb_sdram_adr = builder_shared_adr;
assign main_wb_sdram_dat_w = builder_shared_dat_w;
assign main_wb_sdram_sel = builder_shared_sel;
assign main_wb_sdram_stb = builder_shared_stb;
assign main_wb_sdram_we = builder_shared_we;
assign main_wb_sdram_cti = builder_shared_cti;
assign main_wb_sdram_bte = builder_shared_bte;
assign builder_soclinux_wishbone_adr = builder_shared_adr;
assign builder_soclinux_wishbone_dat_w = builder_shared_dat_w;
assign builder_soclinux_wishbone_sel = builder_shared_sel;
assign builder_soclinux_wishbone_stb = builder_shared_stb;
assign builder_soclinux_wishbone_we = builder_shared_we;
assign builder_soclinux_wishbone_cti = builder_shared_cti;
assign builder_soclinux_wishbone_bte = builder_shared_bte;
assign main_soclinux_plicbus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_soclinux_clintbus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_soclinux_soclinux_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign main_soclinux_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign main_wb_sdram_cyc = (builder_shared_cyc & builder_slave_sel[4]);
assign builder_soclinux_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[5]);
assign builder_shared_err = (((((main_soclinux_plicbus_err | main_soclinux_clintbus_err) | main_soclinux_soclinux_ram_bus_err) | main_soclinux_ram_bus_ram_bus_err) | main_wb_sdram_err) | builder_soclinux_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_shared_ack <= 1'd0;
	builder_error <= 1'd0;
	builder_shared_dat_r <= 32'd0;
	builder_shared_ack <= (((((main_soclinux_plicbus_ack | main_soclinux_clintbus_ack) | main_soclinux_soclinux_ram_bus_ack) | main_soclinux_ram_bus_ram_bus_ack) | main_wb_sdram_ack) | builder_soclinux_wishbone_ack);
	builder_shared_dat_r <= (((((({32{builder_slave_sel_r[0]}} & main_soclinux_plicbus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_soclinux_clintbus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_soclinux_soclinux_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & main_soclinux_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[4]}} & main_wb_sdram_dat_r)) | ({32{builder_slave_sel_r[5]}} & builder_soclinux_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
		builder_shared_ack <= 1'd1;
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	main_soclinux_soc_rst <= 1'd0;
	if (main_soclinux_reset_re) begin
		main_soclinux_soc_rst <= main_soclinux_reset_storage[0];
	end
end
assign main_soclinux_cpu_rst = main_soclinux_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_soclinux_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_soclinux_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_soclinux_bus_errors_status[31:0];
assign main_soclinux_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[4:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
	builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
		builder_csr_bankarray_csrbank1_out0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage[7:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank2_dma_base1_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_base1_we <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_base1_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank2_dma_base1_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_base1_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_base0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_base0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_base0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_dma_base0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_base0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_length0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_length0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_length0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_dma_length0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_length0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_dma_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_done_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_done_re <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_done_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_dma_done_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_done_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_loop0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_loop0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_loop0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_dma_loop0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_loop0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_offset_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_dma_offset_we <= 1'd0;
	builder_csr_bankarray_csrbank2_dma_offset_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_dma_offset_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_dma_offset_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_dma_base1_w = sdblock2mem_wishbonedmawriter_base_storage[63:32];
assign builder_csr_bankarray_csrbank2_dma_base0_w = sdblock2mem_wishbonedmawriter_base_storage[31:0];
assign builder_csr_bankarray_csrbank2_dma_length0_w = sdblock2mem_wishbonedmawriter_length_storage[31:0];
assign builder_csr_bankarray_csrbank2_dma_enable0_w = sdblock2mem_wishbonedmawriter_enable_storage;
assign builder_csr_bankarray_csrbank2_dma_done_w = sdblock2mem_wishbonedmawriter_done_status;
assign sdblock2mem_wishbonedmawriter_done_we = builder_csr_bankarray_csrbank2_dma_done_we;
assign builder_csr_bankarray_csrbank2_dma_loop0_w = sdblock2mem_wishbonedmawriter_loop_storage;
assign builder_csr_bankarray_csrbank2_dma_offset_w = sdblock2mem_wishbonedmawriter_offset_status[31:0];
assign sdblock2mem_wishbonedmawriter_offset_we = builder_csr_bankarray_csrbank2_dma_offset_we;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd6);
assign builder_csr_bankarray_csrbank3_cmd_argument0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_argument0_re <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_argument0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank3_cmd_argument0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_argument0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_command0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[13:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_command0_re <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_command0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank3_cmd_command0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_command0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_send0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_send0_we <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_send0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank3_cmd_send0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_send0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_response3_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_response3_re <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_response3_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank3_cmd_response3_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_response3_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_response2_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_response2_re <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_response2_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank3_cmd_response2_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_response2_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_response1_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_response1_we <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_response1_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank3_cmd_response1_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_response1_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_response0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_response0_we <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_response0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank3_cmd_response0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_response0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_event_r = builder_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_cmd_event_re <= 1'd0;
	builder_csr_bankarray_csrbank3_cmd_event_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank3_cmd_event_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_cmd_event_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_data_event_r = builder_csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_data_event_re <= 1'd0;
	builder_csr_bankarray_csrbank3_data_event_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csr_bankarray_csrbank3_data_event_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_data_event_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_block_length0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[9:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_block_length0_we <= 1'd0;
	builder_csr_bankarray_csrbank3_block_length0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csr_bankarray_csrbank3_block_length0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_block_length0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_block_count0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_block_count0_re <= 1'd0;
	builder_csr_bankarray_csrbank3_block_count0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csr_bankarray_csrbank3_block_count0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_block_count0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_cmd_argument0_w = sdcore_cmd_argument_storage[31:0];
assign sdcore_csrfield_cmd_type = sdcore_cmd_command_storage[1:0];
assign sdcore_csrfield_data_type = sdcore_cmd_command_storage[6:5];
assign sdcore_csrfield_cmd = sdcore_cmd_command_storage[13:8];
assign builder_csr_bankarray_csrbank3_cmd_command0_w = sdcore_cmd_command_storage[13:0];
assign builder_csr_bankarray_csrbank3_cmd_send0_w = sdcore_cmd_send_storage;
assign builder_csr_bankarray_csrbank3_cmd_response3_w = sdcore_cmd_response_status[127:96];
assign builder_csr_bankarray_csrbank3_cmd_response2_w = sdcore_cmd_response_status[95:64];
assign builder_csr_bankarray_csrbank3_cmd_response1_w = sdcore_cmd_response_status[63:32];
assign builder_csr_bankarray_csrbank3_cmd_response0_w = sdcore_cmd_response_status[31:0];
assign sdcore_cmd_response_we = builder_csr_bankarray_csrbank3_cmd_response0_we;
always @(*) begin
	sdcore_cmd_event_status <= 4'd0;
	sdcore_cmd_event_status[0] <= sdcore_csrfield_done0;
	sdcore_cmd_event_status[1] <= sdcore_csrfield_error0;
	sdcore_cmd_event_status[2] <= sdcore_csrfield_timeout0;
	sdcore_cmd_event_status[3] <= sdcore_csrfield_crc0;
end
assign builder_csr_bankarray_csrbank3_cmd_event_w = sdcore_cmd_event_status[3:0];
assign sdcore_cmd_event_we = builder_csr_bankarray_csrbank3_cmd_event_we;
always @(*) begin
	sdcore_data_event_status <= 4'd0;
	sdcore_data_event_status[0] <= sdcore_csrfield_done1;
	sdcore_data_event_status[1] <= sdcore_csrfield_error1;
	sdcore_data_event_status[2] <= sdcore_csrfield_timeout1;
	sdcore_data_event_status[3] <= sdcore_csrfield_crc1;
end
assign builder_csr_bankarray_csrbank3_data_event_w = sdcore_data_event_status[3:0];
assign sdcore_data_event_we = builder_csr_bankarray_csrbank3_data_event_we;
assign builder_csr_bankarray_csrbank3_block_length0_w = sdcore_block_length_storage[9:0];
assign builder_csr_bankarray_csrbank3_block_count0_w = sdcore_block_count_storage[31:0];
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd7);
assign builder_csr_bankarray_csrbank4_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_status_we <= 1'd0;
	builder_csr_bankarray_csrbank4_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank4_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_status_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_pending_re <= 1'd0;
	builder_csr_bankarray_csrbank4_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank4_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_pending_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank4_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_enable0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	eventmanager_status_status <= 4'd0;
	eventmanager_status_status[0] <= eventmanager_card_detect0;
	eventmanager_status_status[1] <= eventmanager_block2mem_dma0;
	eventmanager_status_status[2] <= eventmanager_mem2block_dma0;
	eventmanager_status_status[3] <= eventmanager_cmd_done0;
end
assign builder_csr_bankarray_csrbank4_status_w = eventmanager_status_status[3:0];
assign eventmanager_status_we = builder_csr_bankarray_csrbank4_status_we;
always @(*) begin
	eventmanager_pending_status <= 4'd0;
	eventmanager_pending_status[0] <= eventmanager_card_detect1;
	eventmanager_pending_status[1] <= eventmanager_block2mem_dma1;
	eventmanager_pending_status[2] <= eventmanager_mem2block_dma1;
	eventmanager_pending_status[3] <= eventmanager_cmd_done1;
end
assign builder_csr_bankarray_csrbank4_pending_w = eventmanager_pending_status[3:0];
assign eventmanager_pending_we = builder_csr_bankarray_csrbank4_pending_we;
assign eventmanager_card_detect2 = eventmanager_enable_storage[0];
assign eventmanager_block2mem_dma2 = eventmanager_enable_storage[1];
assign eventmanager_mem2block_dma2 = eventmanager_enable_storage[2];
assign eventmanager_cmd_done2 = eventmanager_enable_storage[3];
assign builder_csr_bankarray_csrbank4_enable0_w = eventmanager_enable_storage[3:0];
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 4'd8);
assign builder_csr_bankarray_csrbank5_dma_base1_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_base1_re <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_base1_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank5_dma_base1_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_base1_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_base0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_base0_we <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_base0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank5_dma_base0_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_base0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_length0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_length0_re <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_length0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank5_dma_length0_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_length0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank5_dma_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_enable0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_done_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_done_we <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_done_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank5_dma_done_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_done_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_loop0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_loop0_re <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_loop0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank5_dma_loop0_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_loop0_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_offset_r = builder_csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank5_dma_offset_we <= 1'd0;
	builder_csr_bankarray_csrbank5_dma_offset_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank5_dma_offset_re <= builder_csr_bankarray_interface5_bank_bus_we;
		builder_csr_bankarray_csrbank5_dma_offset_we <= (~builder_csr_bankarray_interface5_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank5_dma_base1_w = sdmem2block_dma_base_storage[63:32];
assign builder_csr_bankarray_csrbank5_dma_base0_w = sdmem2block_dma_base_storage[31:0];
assign builder_csr_bankarray_csrbank5_dma_length0_w = sdmem2block_dma_length_storage[31:0];
assign builder_csr_bankarray_csrbank5_dma_enable0_w = sdmem2block_dma_enable_storage;
assign builder_csr_bankarray_csrbank5_dma_done_w = sdmem2block_dma_done_status;
assign sdmem2block_dma_done_we = builder_csr_bankarray_csrbank5_dma_done_we;
assign builder_csr_bankarray_csrbank5_dma_loop0_w = sdmem2block_dma_loop_storage;
assign builder_csr_bankarray_csrbank5_dma_offset_w = sdmem2block_dma_offset_status[31:0];
assign sdmem2block_dma_offset_we = builder_csr_bankarray_csrbank5_dma_offset_we;
assign builder_csr_bankarray_csrbank6_sel = (builder_csr_bankarray_interface6_bank_bus_adr[13:9] == 4'd9);
assign builder_csr_bankarray_csrbank6_card_detect_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank6_card_detect_we <= 1'd0;
	builder_csr_bankarray_csrbank6_card_detect_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank6_card_detect_re <= builder_csr_bankarray_interface6_bank_bus_we;
		builder_csr_bankarray_csrbank6_card_detect_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank6_clocker_divider0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[8:0];
always @(*) begin
	builder_csr_bankarray_csrbank6_clocker_divider0_re <= 1'd0;
	builder_csr_bankarray_csrbank6_clocker_divider0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank6_clocker_divider0_re <= builder_csr_bankarray_interface6_bank_bus_we;
		builder_csr_bankarray_csrbank6_clocker_divider0_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
	end
end
assign init_initialize_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	init_initialize_we <= 1'd0;
	init_initialize_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		init_initialize_re <= builder_csr_bankarray_interface6_bank_bus_we;
		init_initialize_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank6_dataw_status_r = builder_csr_bankarray_interface6_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csr_bankarray_csrbank6_dataw_status_re <= 1'd0;
	builder_csr_bankarray_csrbank6_dataw_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank6_dataw_status_re <= builder_csr_bankarray_interface6_bank_bus_we;
		builder_csr_bankarray_csrbank6_dataw_status_we <= (~builder_csr_bankarray_interface6_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank6_card_detect_w = card_detect_status0;
assign card_detect_we = builder_csr_bankarray_csrbank6_card_detect_we;
assign builder_csr_bankarray_csrbank6_clocker_divider0_w = clocker_storage[8:0];
always @(*) begin
	dataw_status <= 3'd0;
	dataw_status[0] <= dataw_accepted0;
	dataw_status[1] <= dataw_crc_error0;
	dataw_status[2] <= dataw_write_error0;
end
assign builder_csr_bankarray_csrbank6_dataw_status_w = dataw_status[2:0];
assign dataw_we = builder_csr_bankarray_csrbank6_dataw_status_we;
assign builder_csr_bankarray_csrbank7_sel = (builder_csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd10);
assign builder_csr_bankarray_csrbank7_dfii_control0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_control0_re <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_control0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank7_dfii_control0_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_control0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank7_dfii_pi0_command0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[5:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_pi0_command0_re <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_pi0_command0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank7_dfii_pi0_command0_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_pi0_command0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign main_sdram_command_issue_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	main_sdram_command_issue_we <= 1'd0;
	main_sdram_command_issue_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		main_sdram_command_issue_re <= builder_csr_bankarray_interface7_bank_bus_we;
		main_sdram_command_issue_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank7_dfii_pi0_address0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[12:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_pi0_address0_we <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_pi0_address0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank7_dfii_pi0_address0_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_pi0_address0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_re <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_we <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank7_dfii_pi0_rddata_r = builder_csr_bankarray_interface7_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csr_bankarray_csrbank7_dfii_pi0_rddata_we <= 1'd0;
	builder_csr_bankarray_csrbank7_dfii_pi0_rddata_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank7_dfii_pi0_rddata_re <= builder_csr_bankarray_interface7_bank_bus_we;
		builder_csr_bankarray_csrbank7_dfii_pi0_rddata_we <= (~builder_csr_bankarray_interface7_bank_bus_we);
	end
end
assign main_sdram_sel = main_sdram_storage[0];
assign main_sdram_cke1 = main_sdram_storage[1];
assign main_sdram_odt = main_sdram_storage[2];
assign main_sdram_reset_n = main_sdram_storage[3];
assign builder_csr_bankarray_csrbank7_dfii_control0_w = main_sdram_storage[3:0];
assign main_sdram_csrfield_cs = main_sdram_command_storage[0];
assign main_sdram_csrfield_we = main_sdram_command_storage[1];
assign main_sdram_csrfield_cas = main_sdram_command_storage[2];
assign main_sdram_csrfield_ras = main_sdram_command_storage[3];
assign main_sdram_csrfield_wren = main_sdram_command_storage[4];
assign main_sdram_csrfield_rden = main_sdram_command_storage[5];
assign builder_csr_bankarray_csrbank7_dfii_pi0_command0_w = main_sdram_command_storage[5:0];
assign builder_csr_bankarray_csrbank7_dfii_pi0_address0_w = main_sdram_address_storage[12:0];
assign builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_w = main_sdram_baddress_storage[1:0];
assign builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_w = main_sdram_wrdata_storage[15:0];
assign builder_csr_bankarray_csrbank7_dfii_pi0_rddata_w = main_sdram_rddata_status[15:0];
assign main_sdram_rddata_we = builder_csr_bankarray_csrbank7_dfii_pi0_rddata_we;
assign builder_csr_bankarray_csrbank8_sel = (builder_csr_bankarray_interface8_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank8_load0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank8_load0_re <= 1'd0;
	builder_csr_bankarray_csrbank8_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank8_load0_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_load0_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_reload0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank8_reload0_we <= 1'd0;
	builder_csr_bankarray_csrbank8_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank8_reload0_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_reload0_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_en0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank8_en0_we <= 1'd0;
	builder_csr_bankarray_csrbank8_en0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank8_en0_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_en0_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_update_value0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank8_update_value0_re <= 1'd0;
	builder_csr_bankarray_csrbank8_update_value0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank8_update_value0_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_update_value0_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_value_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank8_value_we <= 1'd0;
	builder_csr_bankarray_csrbank8_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank8_value_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_value_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_ev_status_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank8_ev_status_we <= 1'd0;
	builder_csr_bankarray_csrbank8_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank8_ev_status_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_ev_status_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_ev_pending_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank8_ev_pending_re <= 1'd0;
	builder_csr_bankarray_csrbank8_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank8_ev_pending_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_ev_pending_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_ev_enable0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank8_ev_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank8_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank8_ev_enable0_re <= builder_csr_bankarray_interface8_bank_bus_we;
		builder_csr_bankarray_csrbank8_ev_enable0_we <= (~builder_csr_bankarray_interface8_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank8_load0_w = main_soclinux_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank8_reload0_w = main_soclinux_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank8_en0_w = main_soclinux_timer_en_storage;
assign builder_csr_bankarray_csrbank8_update_value0_w = main_soclinux_timer_update_value_storage;
assign builder_csr_bankarray_csrbank8_value_w = main_soclinux_timer_value_status[31:0];
assign main_soclinux_timer_value_we = builder_csr_bankarray_csrbank8_value_we;
assign main_soclinux_timer_status_status = main_soclinux_timer_zero0;
assign builder_csr_bankarray_csrbank8_ev_status_w = main_soclinux_timer_status_status;
assign main_soclinux_timer_status_we = builder_csr_bankarray_csrbank8_ev_status_we;
assign main_soclinux_timer_pending_status = main_soclinux_timer_zero1;
assign builder_csr_bankarray_csrbank8_ev_pending_w = main_soclinux_timer_pending_status;
assign main_soclinux_timer_pending_we = builder_csr_bankarray_csrbank8_ev_pending_we;
assign main_soclinux_timer_zero2 = main_soclinux_timer_enable_storage;
assign builder_csr_bankarray_csrbank8_ev_enable0_w = main_soclinux_timer_enable_storage;
assign builder_csr_bankarray_csrbank9_sel = (builder_csr_bankarray_interface9_bank_bus_adr[13:9] == 2'd2);
assign main_soclinux_uart_rxtx_r = builder_csr_bankarray_interface9_bank_bus_dat_w[7:0];
always @(*) begin
	main_soclinux_uart_rxtx_re <= 1'd0;
	main_soclinux_uart_rxtx_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd0))) begin
		main_soclinux_uart_rxtx_re <= builder_csr_bankarray_interface9_bank_bus_we;
		main_soclinux_uart_rxtx_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_txfull_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank9_txfull_we <= 1'd0;
	builder_csr_bankarray_csrbank9_txfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank9_txfull_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_txfull_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_rxempty_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank9_rxempty_re <= 1'd0;
	builder_csr_bankarray_csrbank9_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank9_rxempty_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_rxempty_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_ev_status_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank9_ev_status_re <= 1'd0;
	builder_csr_bankarray_csrbank9_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank9_ev_status_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_ev_status_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_ev_pending_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank9_ev_pending_we <= 1'd0;
	builder_csr_bankarray_csrbank9_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank9_ev_pending_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_ev_pending_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_ev_enable0_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank9_ev_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank9_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank9_ev_enable0_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_ev_enable0_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_txempty_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank9_txempty_re <= 1'd0;
	builder_csr_bankarray_csrbank9_txempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank9_txempty_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_txempty_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_rxfull_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank9_rxfull_we <= 1'd0;
	builder_csr_bankarray_csrbank9_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank9_rxfull_re <= builder_csr_bankarray_interface9_bank_bus_we;
		builder_csr_bankarray_csrbank9_rxfull_we <= (~builder_csr_bankarray_interface9_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank9_txfull_w = main_soclinux_uart_txfull_status;
assign main_soclinux_uart_txfull_we = builder_csr_bankarray_csrbank9_txfull_we;
assign builder_csr_bankarray_csrbank9_rxempty_w = main_soclinux_uart_rxempty_status;
assign main_soclinux_uart_rxempty_we = builder_csr_bankarray_csrbank9_rxempty_we;
always @(*) begin
	main_soclinux_uart_status_status <= 2'd0;
	main_soclinux_uart_status_status[0] <= main_soclinux_uart_tx0;
	main_soclinux_uart_status_status[1] <= main_soclinux_uart_rx0;
end
assign builder_csr_bankarray_csrbank9_ev_status_w = main_soclinux_uart_status_status[1:0];
assign main_soclinux_uart_status_we = builder_csr_bankarray_csrbank9_ev_status_we;
always @(*) begin
	main_soclinux_uart_pending_status <= 2'd0;
	main_soclinux_uart_pending_status[0] <= main_soclinux_uart_tx1;
	main_soclinux_uart_pending_status[1] <= main_soclinux_uart_rx1;
end
assign builder_csr_bankarray_csrbank9_ev_pending_w = main_soclinux_uart_pending_status[1:0];
assign main_soclinux_uart_pending_we = builder_csr_bankarray_csrbank9_ev_pending_we;
assign main_soclinux_uart_tx2 = main_soclinux_uart_enable_storage[0];
assign main_soclinux_uart_rx2 = main_soclinux_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank9_ev_enable0_w = main_soclinux_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank9_txempty_w = main_soclinux_uart_txempty_status;
assign main_soclinux_uart_txempty_we = builder_csr_bankarray_csrbank9_txempty_we;
assign builder_csr_bankarray_csrbank9_rxfull_w = main_soclinux_uart_rxfull_status;
assign main_soclinux_uart_rxfull_we = builder_csr_bankarray_csrbank9_rxfull_we;
assign builder_csr_bankarray_csrbank10_sel = (builder_csr_bankarray_interface10_bank_bus_adr[13:9] == 4'd11);
assign builder_csr_bankarray_csrbank10_dma_base0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_base0_we <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_base0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank10_dma_base0_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_base0_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_length0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_length0_re <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_length0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank10_dma_length0_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_length0_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_enable0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_enable0_re <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank10_dma_enable0_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_enable0_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_done_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_done_we <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_done_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank10_dma_done_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_done_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_loop0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_loop0_re <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_loop0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank10_dma_loop0_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_loop0_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_offset_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank10_dma_offset_re <= 1'd0;
	builder_csr_bankarray_csrbank10_dma_offset_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank10_dma_offset_re <= builder_csr_bankarray_interface10_bank_bus_we;
		builder_csr_bankarray_csrbank10_dma_offset_we <= (~builder_csr_bankarray_interface10_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank10_dma_base0_w = main_vfb_base_storage[31:0];
assign builder_csr_bankarray_csrbank10_dma_length0_w = main_vfb_length_storage[31:0];
assign builder_csr_bankarray_csrbank10_dma_enable0_w = main_vfb_enable_storage;
assign builder_csr_bankarray_csrbank10_dma_done_w = main_vfb_done_status;
assign main_vfb_done_we = builder_csr_bankarray_csrbank10_dma_done_we;
assign builder_csr_bankarray_csrbank10_dma_loop0_w = main_vfb_loop_storage;
assign builder_csr_bankarray_csrbank10_dma_offset_w = main_vfb_offset_status[31:0];
assign main_vfb_offset_we = builder_csr_bankarray_csrbank10_dma_offset_we;
assign builder_csr_bankarray_csrbank11_sel = (builder_csr_bankarray_interface11_bank_bus_adr[13:9] == 4'd12);
assign builder_csr_bankarray_csrbank11_enable0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank11_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank11_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank11_enable0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_enable0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_hres0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_hres0_re <= 1'd0;
	builder_csr_bankarray_csrbank11_hres0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank11_hres0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_hres0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_hsync_start0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_hsync_start0_we <= 1'd0;
	builder_csr_bankarray_csrbank11_hsync_start0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank11_hsync_start0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_hsync_start0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_hsync_end0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_hsync_end0_we <= 1'd0;
	builder_csr_bankarray_csrbank11_hsync_end0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank11_hsync_end0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_hsync_end0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_hscan0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_hscan0_re <= 1'd0;
	builder_csr_bankarray_csrbank11_hscan0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank11_hscan0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_hscan0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_vres0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_vres0_we <= 1'd0;
	builder_csr_bankarray_csrbank11_vres0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank11_vres0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_vres0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_vsync_start0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_vsync_start0_re <= 1'd0;
	builder_csr_bankarray_csrbank11_vsync_start0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank11_vsync_start0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_vsync_start0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_vsync_end0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_vsync_end0_re <= 1'd0;
	builder_csr_bankarray_csrbank11_vsync_end0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank11_vsync_end0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_vsync_end0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_vscan0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank11_vscan0_we <= 1'd0;
	builder_csr_bankarray_csrbank11_vscan0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csr_bankarray_csrbank11_vscan0_re <= builder_csr_bankarray_interface11_bank_bus_we;
		builder_csr_bankarray_csrbank11_vscan0_we <= (~builder_csr_bankarray_interface11_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank11_enable0_w = main_vtg_enable_storage;
assign builder_csr_bankarray_csrbank11_hres0_w = main_vtg_hres_storage[11:0];
assign builder_csr_bankarray_csrbank11_hsync_start0_w = main_vtg_hsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank11_hsync_end0_w = main_vtg_hsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank11_hscan0_w = main_vtg_hscan_storage[11:0];
assign builder_csr_bankarray_csrbank11_vres0_w = main_vtg_vres_storage[11:0];
assign builder_csr_bankarray_csrbank11_vsync_start0_w = main_vtg_vsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank11_vsync_end0_w = main_vtg_vsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank11_vscan0_w = main_vtg_vscan_storage[11:0];
assign builder_csr_interconnect_adr = builder_soclinux_adr;
assign builder_csr_interconnect_we = builder_soclinux_we;
assign builder_csr_interconnect_dat_w = builder_soclinux_dat_w;
assign builder_soclinux_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface7_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface8_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface9_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface10_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface11_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface7_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface8_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface9_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface10_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface11_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface7_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface8_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface9_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface10_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface11_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_interface6_bank_bus_dat_r) | builder_csr_bankarray_interface7_bank_bus_dat_r) | builder_csr_bankarray_interface8_bank_bus_dat_r) | builder_csr_bankarray_interface9_bank_bus_dat_r) | builder_csr_bankarray_interface10_bank_bus_dat_r) | builder_csr_bankarray_interface11_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	builder_comb_rhs_array_muxed0 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[0];
		end
		1'd1: begin
			builder_comb_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[1];
		end
		2'd2: begin
			builder_comb_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[2];
		end
		default: begin
			builder_comb_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[3];
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed1 <= 13'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed1 <= main_sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed1 <= main_sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed1 <= main_sdram_bankmachine2_cmd_payload_a;
		end
		default: begin
			builder_comb_rhs_array_muxed1 <= main_sdram_bankmachine3_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed2 <= 2'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed2 <= main_sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed2 <= main_sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed2 <= main_sdram_bankmachine2_cmd_payload_ba;
		end
		default: begin
			builder_comb_rhs_array_muxed2 <= main_sdram_bankmachine3_cmd_payload_ba;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed3 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed3 <= main_sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed3 <= main_sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed3 <= main_sdram_bankmachine2_cmd_payload_is_read;
		end
		default: begin
			builder_comb_rhs_array_muxed3 <= main_sdram_bankmachine3_cmd_payload_is_read;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed4 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed4 <= main_sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed4 <= main_sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed4 <= main_sdram_bankmachine2_cmd_payload_is_write;
		end
		default: begin
			builder_comb_rhs_array_muxed4 <= main_sdram_bankmachine3_cmd_payload_is_write;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed5 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed5 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed5 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed5 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
		end
		default: begin
			builder_comb_rhs_array_muxed5 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed0 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_t_array_muxed0 <= main_sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			builder_comb_t_array_muxed0 <= main_sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			builder_comb_t_array_muxed0 <= main_sdram_bankmachine2_cmd_payload_cas;
		end
		default: begin
			builder_comb_t_array_muxed0 <= main_sdram_bankmachine3_cmd_payload_cas;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed1 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_t_array_muxed1 <= main_sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			builder_comb_t_array_muxed1 <= main_sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			builder_comb_t_array_muxed1 <= main_sdram_bankmachine2_cmd_payload_ras;
		end
		default: begin
			builder_comb_t_array_muxed1 <= main_sdram_bankmachine3_cmd_payload_ras;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed2 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_comb_t_array_muxed2 <= main_sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			builder_comb_t_array_muxed2 <= main_sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			builder_comb_t_array_muxed2 <= main_sdram_bankmachine2_cmd_payload_we;
		end
		default: begin
			builder_comb_t_array_muxed2 <= main_sdram_bankmachine3_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed6 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed6 <= main_sdram_choose_req_valids[0];
		end
		1'd1: begin
			builder_comb_rhs_array_muxed6 <= main_sdram_choose_req_valids[1];
		end
		2'd2: begin
			builder_comb_rhs_array_muxed6 <= main_sdram_choose_req_valids[2];
		end
		default: begin
			builder_comb_rhs_array_muxed6 <= main_sdram_choose_req_valids[3];
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed7 <= 13'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed7 <= main_sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed7 <= main_sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed7 <= main_sdram_bankmachine2_cmd_payload_a;
		end
		default: begin
			builder_comb_rhs_array_muxed7 <= main_sdram_bankmachine3_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed8 <= 2'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed8 <= main_sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed8 <= main_sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed8 <= main_sdram_bankmachine2_cmd_payload_ba;
		end
		default: begin
			builder_comb_rhs_array_muxed8 <= main_sdram_bankmachine3_cmd_payload_ba;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed9 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed9 <= main_sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed9 <= main_sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed9 <= main_sdram_bankmachine2_cmd_payload_is_read;
		end
		default: begin
			builder_comb_rhs_array_muxed9 <= main_sdram_bankmachine3_cmd_payload_is_read;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed10 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed10 <= main_sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed10 <= main_sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed10 <= main_sdram_bankmachine2_cmd_payload_is_write;
		end
		default: begin
			builder_comb_rhs_array_muxed10 <= main_sdram_bankmachine3_cmd_payload_is_write;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed11 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed11 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed11 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			builder_comb_rhs_array_muxed11 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
		end
		default: begin
			builder_comb_rhs_array_muxed11 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed3 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_t_array_muxed3 <= main_sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			builder_comb_t_array_muxed3 <= main_sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			builder_comb_t_array_muxed3 <= main_sdram_bankmachine2_cmd_payload_cas;
		end
		default: begin
			builder_comb_t_array_muxed3 <= main_sdram_bankmachine3_cmd_payload_cas;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed4 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_t_array_muxed4 <= main_sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			builder_comb_t_array_muxed4 <= main_sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			builder_comb_t_array_muxed4 <= main_sdram_bankmachine2_cmd_payload_ras;
		end
		default: begin
			builder_comb_t_array_muxed4 <= main_sdram_bankmachine3_cmd_payload_ras;
		end
	endcase
end
always @(*) begin
	builder_comb_t_array_muxed5 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_comb_t_array_muxed5 <= main_sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			builder_comb_t_array_muxed5 <= main_sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			builder_comb_t_array_muxed5 <= main_sdram_bankmachine2_cmd_payload_we;
		end
		default: begin
			builder_comb_t_array_muxed5 <= main_sdram_bankmachine3_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed12 <= 22'd0;
	case (builder_roundrobin0_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed12 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
		default: begin
			builder_comb_rhs_array_muxed12 <= {main_litedramcrossbar_cmd_payload_addr[23:11], main_litedramcrossbar_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed13 <= 1'd0;
	case (builder_roundrobin0_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed13 <= main_port_cmd_payload_we;
		end
		default: begin
			builder_comb_rhs_array_muxed13 <= main_litedramcrossbar_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed14 <= 1'd0;
	case (builder_roundrobin0_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed14 <= (((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked0 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
		default: begin
			builder_comb_rhs_array_muxed14 <= (((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_locked1 | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed15 <= 22'd0;
	case (builder_roundrobin1_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed15 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
		default: begin
			builder_comb_rhs_array_muxed15 <= {main_litedramcrossbar_cmd_payload_addr[23:11], main_litedramcrossbar_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed16 <= 1'd0;
	case (builder_roundrobin1_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed16 <= main_port_cmd_payload_we;
		end
		default: begin
			builder_comb_rhs_array_muxed16 <= main_litedramcrossbar_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed17 <= 1'd0;
	case (builder_roundrobin1_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed17 <= (((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked2 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
		default: begin
			builder_comb_rhs_array_muxed17 <= (((main_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_locked3 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed18 <= 22'd0;
	case (builder_roundrobin2_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed18 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
		default: begin
			builder_comb_rhs_array_muxed18 <= {main_litedramcrossbar_cmd_payload_addr[23:11], main_litedramcrossbar_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed19 <= 1'd0;
	case (builder_roundrobin2_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed19 <= main_port_cmd_payload_we;
		end
		default: begin
			builder_comb_rhs_array_muxed19 <= main_litedramcrossbar_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed20 <= 1'd0;
	case (builder_roundrobin2_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed20 <= (((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked4 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
		default: begin
			builder_comb_rhs_array_muxed20 <= (((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_locked5 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed21 <= 22'd0;
	case (builder_roundrobin3_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed21 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
		default: begin
			builder_comb_rhs_array_muxed21 <= {main_litedramcrossbar_cmd_payload_addr[23:11], main_litedramcrossbar_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed22 <= 1'd0;
	case (builder_roundrobin3_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed22 <= main_port_cmd_payload_we;
		end
		default: begin
			builder_comb_rhs_array_muxed22 <= main_litedramcrossbar_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed23 <= 1'd0;
	case (builder_roundrobin3_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed23 <= (((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked6 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid);
		end
		default: begin
			builder_comb_rhs_array_muxed23 <= (((main_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_locked7 | (main_sdram_interface_bank0_lock & (builder_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_roundrobin2_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed24 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed24 <= main_soclinux_pbus_adr;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed24 <= interface0_bus_adr;
		end
		default: begin
			builder_comb_rhs_array_muxed24 <= interface1_bus_adr;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed25 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed25 <= main_soclinux_pbus_dat_w;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed25 <= interface0_bus_dat_w;
		end
		default: begin
			builder_comb_rhs_array_muxed25 <= interface1_bus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed26 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed26 <= main_soclinux_pbus_sel;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed26 <= interface0_bus_sel;
		end
		default: begin
			builder_comb_rhs_array_muxed26 <= interface1_bus_sel;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed27 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed27 <= main_soclinux_pbus_cyc;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed27 <= interface0_bus_cyc;
		end
		default: begin
			builder_comb_rhs_array_muxed27 <= interface1_bus_cyc;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed28 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed28 <= main_soclinux_pbus_stb;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed28 <= interface0_bus_stb;
		end
		default: begin
			builder_comb_rhs_array_muxed28 <= interface1_bus_stb;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed29 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed29 <= main_soclinux_pbus_we;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed29 <= interface0_bus_we;
		end
		default: begin
			builder_comb_rhs_array_muxed29 <= interface1_bus_we;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed30 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed30 <= main_soclinux_pbus_cti;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed30 <= interface0_bus_cti;
		end
		default: begin
			builder_comb_rhs_array_muxed30 <= interface1_bus_cti;
		end
	endcase
end
always @(*) begin
	builder_comb_rhs_array_muxed31 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_rhs_array_muxed31 <= main_soclinux_pbus_bte;
		end
		1'd1: begin
			builder_comb_rhs_array_muxed31 <= interface0_bus_bte;
		end
		default: begin
			builder_comb_rhs_array_muxed31 <= interface1_bus_bte;
		end
	endcase
end
always @(*) begin
	builder_sync_f_array_muxed0 <= 10'd0;
	case (main_tmdsencoder0_new_c2)
		1'd0: begin
			builder_sync_f_array_muxed0 <= 10'd852;
		end
		1'd1: begin
			builder_sync_f_array_muxed0 <= 8'd171;
		end
		2'd2: begin
			builder_sync_f_array_muxed0 <= 9'd340;
		end
		default: begin
			builder_sync_f_array_muxed0 <= 10'd683;
		end
	endcase
end
always @(*) begin
	builder_sync_f_array_muxed1 <= 10'd0;
	case (main_tmdsencoder1_new_c2)
		1'd0: begin
			builder_sync_f_array_muxed1 <= 10'd852;
		end
		1'd1: begin
			builder_sync_f_array_muxed1 <= 8'd171;
		end
		2'd2: begin
			builder_sync_f_array_muxed1 <= 9'd340;
		end
		default: begin
			builder_sync_f_array_muxed1 <= 10'd683;
		end
	endcase
end
always @(*) begin
	builder_sync_f_array_muxed2 <= 10'd0;
	case (main_tmdsencoder2_new_c2)
		1'd0: begin
			builder_sync_f_array_muxed2 <= 10'd852;
		end
		1'd1: begin
			builder_sync_f_array_muxed2 <= 8'd171;
		end
		2'd2: begin
			builder_sync_f_array_muxed2 <= 9'd340;
		end
		default: begin
			builder_sync_f_array_muxed2 <= 10'd683;
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed0 <= 2'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed0 <= main_sdram_nop_ba[1:0];
		end
		1'd1: begin
			builder_sync_rhs_array_muxed0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
		end
		2'd2: begin
			builder_sync_rhs_array_muxed0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
		end
		default: begin
			builder_sync_rhs_array_muxed0 <= main_sdram_cmd_payload_ba[1:0];
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed1 <= 13'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed1 <= main_sdram_nop_a;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed1 <= main_sdram_choose_req_cmd_payload_a;
		end
		2'd2: begin
			builder_sync_rhs_array_muxed1 <= main_sdram_choose_req_cmd_payload_a;
		end
		default: begin
			builder_sync_rhs_array_muxed1 <= main_sdram_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed2 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed2 <= 1'd0;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
		end
		2'd2: begin
			builder_sync_rhs_array_muxed2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
		end
		default: begin
			builder_sync_rhs_array_muxed2 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed3 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed3 <= 1'd0;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
		end
		2'd2: begin
			builder_sync_rhs_array_muxed3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
		end
		default: begin
			builder_sync_rhs_array_muxed3 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed4 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed4 <= 1'd0;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
		end
		2'd2: begin
			builder_sync_rhs_array_muxed4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
		end
		default: begin
			builder_sync_rhs_array_muxed4 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed5 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed5 <= 1'd0;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
		end
		2'd2: begin
			builder_sync_rhs_array_muxed5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
		end
		default: begin
			builder_sync_rhs_array_muxed5 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
		end
	endcase
end
always @(*) begin
	builder_sync_rhs_array_muxed6 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_sync_rhs_array_muxed6 <= 1'd0;
		end
		1'd1: begin
			builder_sync_rhs_array_muxed6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
		end
		2'd2: begin
			builder_sync_rhs_array_muxed6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
		end
		default: begin
			builder_sync_rhs_array_muxed6 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
		end
	endcase
end
assign main_soclinux_rx_rx = builder_multiregimpl0_regs1;
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign sdrio_clk_4 = sys_clk;
assign sdrio_clk_5 = sys_clk;
assign sdrio_clk_6 = sys_clk;
assign sdrio_clk_7 = sys_clk;
assign sdrio_clk_8 = sys_clk;
assign sdrio_clk_9 = sys_clk;
assign sdrio_clk_10 = sys_clk;
assign sdrio_clk_11 = sys_clk;
assign sdrio_clk_12 = sys_clk;
assign sdrio_clk_13 = sys_clk;
assign sdrio_clk_14 = sys_clk;
assign sdrio_clk_15 = sys_clk;
assign main_videohdmi10to1serializer0_cdc_produce_rdomain = builder_multiregimpl1_regs1;
assign main_videohdmi10to1serializer0_cdc_consume_wdomain = builder_multiregimpl2_regs1;
assign main_videohdmi10to1serializer1_cdc_produce_rdomain = builder_multiregimpl3_regs1;
assign main_videohdmi10to1serializer1_cdc_consume_wdomain = builder_multiregimpl4_regs1;
assign main_videohdmi10to1serializer2_cdc_produce_rdomain = builder_multiregimpl5_regs1;
assign main_videohdmi10to1serializer2_cdc_consume_wdomain = builder_multiregimpl6_regs1;
assign main_vtg_enable = builder_multiregimpl7_regs1;
assign main_vtg_hres = builder_multiregimpl8_regs1;
assign main_vtg_hsync_start = builder_multiregimpl9_regs1;
assign main_vtg_hsync_end = builder_multiregimpl10_regs1;
assign main_vtg_hscan = builder_multiregimpl11_regs1;
assign main_vtg_vres = builder_multiregimpl12_regs1;
assign main_vtg_vsync_start = builder_multiregimpl13_regs1;
assign main_vtg_vsync_end = builder_multiregimpl14_regs1;
assign main_vtg_vscan = builder_multiregimpl15_regs1;
assign main_vfb_cdc_cdc_produce_rdomain = builder_multiregimpl16_regs1;
assign main_vfb_cdc_cdc_consume_wdomain = builder_multiregimpl17_regs1;
assign sdrio_clk_16 = sys_clk;
assign sdrio_clk_17 = sys_clk;
assign sdrio_clk_18 = sys_clk;
assign sdrio_clk_19 = sys_clk;
assign sdrio_clk_20 = sys_clk;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge hdmi_clk) begin
	main_tmdsencoder0_n1d <= (((((((main_tmdsencoder0_d0[0] + main_tmdsencoder0_d0[1]) + main_tmdsencoder0_d0[2]) + main_tmdsencoder0_d0[3]) + main_tmdsencoder0_d0[4]) + main_tmdsencoder0_d0[5]) + main_tmdsencoder0_d0[6]) + main_tmdsencoder0_d0[7]);
	main_tmdsencoder0_d1 <= main_tmdsencoder0_d0;
	main_tmdsencoder0_q_m[0] <= main_tmdsencoder0_d1[0];
	main_tmdsencoder0_q_m[1] <= ((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[2] <= ((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[3] <= ((((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[3]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[4] <= ((((((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[3]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[4]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[5] <= ((((((((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[3]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[4]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[5]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[6] <= ((((((((((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[3]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[4]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[5]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[6]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[7] <= ((((((((((((((main_tmdsencoder0_d1[0] ^ main_tmdsencoder0_d1[1]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[2]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[3]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[4]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[5]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[6]) ^ main_tmdsencoder0_q_m8_n) ^ main_tmdsencoder0_d1[7]) ^ main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_q_m[8] <= (~main_tmdsencoder0_q_m8_n);
	main_tmdsencoder0_n0q_m <= ((((((((~main_tmdsencoder0_q_m[0]) + (~main_tmdsencoder0_q_m[1])) + (~main_tmdsencoder0_q_m[2])) + (~main_tmdsencoder0_q_m[3])) + (~main_tmdsencoder0_q_m[4])) + (~main_tmdsencoder0_q_m[5])) + (~main_tmdsencoder0_q_m[6])) + (~main_tmdsencoder0_q_m[7]));
	main_tmdsencoder0_n1q_m <= (((((((main_tmdsencoder0_q_m[0] + main_tmdsencoder0_q_m[1]) + main_tmdsencoder0_q_m[2]) + main_tmdsencoder0_q_m[3]) + main_tmdsencoder0_q_m[4]) + main_tmdsencoder0_q_m[5]) + main_tmdsencoder0_q_m[6]) + main_tmdsencoder0_q_m[7]);
	main_tmdsencoder0_q_m_r <= main_tmdsencoder0_q_m;
	main_tmdsencoder0_new_c0 <= main_tmdsencoder0_c;
	main_tmdsencoder0_new_de0 <= main_tmdsencoder0_de;
	main_tmdsencoder0_new_c1 <= main_tmdsencoder0_new_c0;
	main_tmdsencoder0_new_de1 <= main_tmdsencoder0_new_de0;
	main_tmdsencoder0_new_c2 <= main_tmdsencoder0_new_c1;
	main_tmdsencoder0_new_de2 <= main_tmdsencoder0_new_de1;
	if (main_tmdsencoder0_new_de2) begin
		if (((main_tmdsencoder0_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (main_tmdsencoder0_n1q_m == main_tmdsencoder0_n0q_m)}))) begin
			main_tmdsencoder0_out[9] <= (~main_tmdsencoder0_q_m_r[8]);
			main_tmdsencoder0_out[8] <= main_tmdsencoder0_q_m_r[8];
			if (main_tmdsencoder0_q_m_r[8]) begin
				main_tmdsencoder0_out[7:0] <= main_tmdsencoder0_q_m_r[7:0];
				main_tmdsencoder0_cnt <= ((main_tmdsencoder0_cnt + $signed({1'd0, main_tmdsencoder0_n1q_m})) - $signed({1'd0, main_tmdsencoder0_n0q_m}));
			end else begin
				main_tmdsencoder0_out[7:0] <= (~main_tmdsencoder0_q_m_r[7:0]);
				main_tmdsencoder0_cnt <= ((main_tmdsencoder0_cnt + $signed({1'd0, main_tmdsencoder0_n0q_m})) - $signed({1'd0, main_tmdsencoder0_n1q_m}));
			end
		end else begin
			if ((((~main_tmdsencoder0_cnt[5]) & $signed({1'd0, (main_tmdsencoder0_n1q_m > main_tmdsencoder0_n0q_m)})) | (main_tmdsencoder0_cnt[5] & $signed({1'd0, (main_tmdsencoder0_n0q_m > main_tmdsencoder0_n1q_m)})))) begin
				main_tmdsencoder0_out[9] <= 1'd1;
				main_tmdsencoder0_out[8] <= main_tmdsencoder0_q_m_r[8];
				main_tmdsencoder0_out[7:0] <= (~main_tmdsencoder0_q_m_r[7:0]);
				main_tmdsencoder0_cnt <= (((main_tmdsencoder0_cnt + $signed({1'd0, {main_tmdsencoder0_q_m_r[8], 1'd0}})) + $signed({1'd0, main_tmdsencoder0_n0q_m})) - $signed({1'd0, main_tmdsencoder0_n1q_m}));
			end else begin
				main_tmdsencoder0_out[9] <= 1'd0;
				main_tmdsencoder0_out[8] <= main_tmdsencoder0_q_m_r[8];
				main_tmdsencoder0_out[7:0] <= main_tmdsencoder0_q_m_r[7:0];
				main_tmdsencoder0_cnt <= (((main_tmdsencoder0_cnt - $signed({1'd0, {(~main_tmdsencoder0_q_m_r[8]), 1'd0}})) + $signed({1'd0, main_tmdsencoder0_n1q_m})) - $signed({1'd0, main_tmdsencoder0_n0q_m}));
			end
		end
	end else begin
		main_tmdsencoder0_out <= builder_sync_f_array_muxed0;
		main_tmdsencoder0_cnt <= 1'd0;
	end
	main_videohdmi10to1serializer0_cdc_graycounter0_q_binary <= main_videohdmi10to1serializer0_cdc_graycounter0_q_next_binary;
	main_videohdmi10to1serializer0_cdc_graycounter0_q <= main_videohdmi10to1serializer0_cdc_graycounter0_q_next;
	main_tmdsencoder1_n1d <= (((((((main_tmdsencoder1_d0[0] + main_tmdsencoder1_d0[1]) + main_tmdsencoder1_d0[2]) + main_tmdsencoder1_d0[3]) + main_tmdsencoder1_d0[4]) + main_tmdsencoder1_d0[5]) + main_tmdsencoder1_d0[6]) + main_tmdsencoder1_d0[7]);
	main_tmdsencoder1_d1 <= main_tmdsencoder1_d0;
	main_tmdsencoder1_q_m[0] <= main_tmdsencoder1_d1[0];
	main_tmdsencoder1_q_m[1] <= ((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[2] <= ((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[3] <= ((((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[3]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[4] <= ((((((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[3]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[4]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[5] <= ((((((((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[3]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[4]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[5]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[6] <= ((((((((((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[3]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[4]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[5]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[6]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[7] <= ((((((((((((((main_tmdsencoder1_d1[0] ^ main_tmdsencoder1_d1[1]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[2]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[3]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[4]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[5]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[6]) ^ main_tmdsencoder1_q_m8_n) ^ main_tmdsencoder1_d1[7]) ^ main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_q_m[8] <= (~main_tmdsencoder1_q_m8_n);
	main_tmdsencoder1_n0q_m <= ((((((((~main_tmdsencoder1_q_m[0]) + (~main_tmdsencoder1_q_m[1])) + (~main_tmdsencoder1_q_m[2])) + (~main_tmdsencoder1_q_m[3])) + (~main_tmdsencoder1_q_m[4])) + (~main_tmdsencoder1_q_m[5])) + (~main_tmdsencoder1_q_m[6])) + (~main_tmdsencoder1_q_m[7]));
	main_tmdsencoder1_n1q_m <= (((((((main_tmdsencoder1_q_m[0] + main_tmdsencoder1_q_m[1]) + main_tmdsencoder1_q_m[2]) + main_tmdsencoder1_q_m[3]) + main_tmdsencoder1_q_m[4]) + main_tmdsencoder1_q_m[5]) + main_tmdsencoder1_q_m[6]) + main_tmdsencoder1_q_m[7]);
	main_tmdsencoder1_q_m_r <= main_tmdsencoder1_q_m;
	main_tmdsencoder1_new_c0 <= main_tmdsencoder1_c;
	main_tmdsencoder1_new_de0 <= main_tmdsencoder1_de;
	main_tmdsencoder1_new_c1 <= main_tmdsencoder1_new_c0;
	main_tmdsencoder1_new_de1 <= main_tmdsencoder1_new_de0;
	main_tmdsencoder1_new_c2 <= main_tmdsencoder1_new_c1;
	main_tmdsencoder1_new_de2 <= main_tmdsencoder1_new_de1;
	if (main_tmdsencoder1_new_de2) begin
		if (((main_tmdsencoder1_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (main_tmdsencoder1_n1q_m == main_tmdsencoder1_n0q_m)}))) begin
			main_tmdsencoder1_out[9] <= (~main_tmdsencoder1_q_m_r[8]);
			main_tmdsencoder1_out[8] <= main_tmdsencoder1_q_m_r[8];
			if (main_tmdsencoder1_q_m_r[8]) begin
				main_tmdsencoder1_out[7:0] <= main_tmdsencoder1_q_m_r[7:0];
				main_tmdsencoder1_cnt <= ((main_tmdsencoder1_cnt + $signed({1'd0, main_tmdsencoder1_n1q_m})) - $signed({1'd0, main_tmdsencoder1_n0q_m}));
			end else begin
				main_tmdsencoder1_out[7:0] <= (~main_tmdsencoder1_q_m_r[7:0]);
				main_tmdsencoder1_cnt <= ((main_tmdsencoder1_cnt + $signed({1'd0, main_tmdsencoder1_n0q_m})) - $signed({1'd0, main_tmdsencoder1_n1q_m}));
			end
		end else begin
			if ((((~main_tmdsencoder1_cnt[5]) & $signed({1'd0, (main_tmdsencoder1_n1q_m > main_tmdsencoder1_n0q_m)})) | (main_tmdsencoder1_cnt[5] & $signed({1'd0, (main_tmdsencoder1_n0q_m > main_tmdsencoder1_n1q_m)})))) begin
				main_tmdsencoder1_out[9] <= 1'd1;
				main_tmdsencoder1_out[8] <= main_tmdsencoder1_q_m_r[8];
				main_tmdsencoder1_out[7:0] <= (~main_tmdsencoder1_q_m_r[7:0]);
				main_tmdsencoder1_cnt <= (((main_tmdsencoder1_cnt + $signed({1'd0, {main_tmdsencoder1_q_m_r[8], 1'd0}})) + $signed({1'd0, main_tmdsencoder1_n0q_m})) - $signed({1'd0, main_tmdsencoder1_n1q_m}));
			end else begin
				main_tmdsencoder1_out[9] <= 1'd0;
				main_tmdsencoder1_out[8] <= main_tmdsencoder1_q_m_r[8];
				main_tmdsencoder1_out[7:0] <= main_tmdsencoder1_q_m_r[7:0];
				main_tmdsencoder1_cnt <= (((main_tmdsencoder1_cnt - $signed({1'd0, {(~main_tmdsencoder1_q_m_r[8]), 1'd0}})) + $signed({1'd0, main_tmdsencoder1_n1q_m})) - $signed({1'd0, main_tmdsencoder1_n0q_m}));
			end
		end
	end else begin
		main_tmdsencoder1_out <= builder_sync_f_array_muxed1;
		main_tmdsencoder1_cnt <= 1'd0;
	end
	main_videohdmi10to1serializer1_cdc_graycounter2_q_binary <= main_videohdmi10to1serializer1_cdc_graycounter2_q_next_binary;
	main_videohdmi10to1serializer1_cdc_graycounter2_q <= main_videohdmi10to1serializer1_cdc_graycounter2_q_next;
	main_tmdsencoder2_n1d <= (((((((main_tmdsencoder2_d0[0] + main_tmdsencoder2_d0[1]) + main_tmdsencoder2_d0[2]) + main_tmdsencoder2_d0[3]) + main_tmdsencoder2_d0[4]) + main_tmdsencoder2_d0[5]) + main_tmdsencoder2_d0[6]) + main_tmdsencoder2_d0[7]);
	main_tmdsencoder2_d1 <= main_tmdsencoder2_d0;
	main_tmdsencoder2_q_m[0] <= main_tmdsencoder2_d1[0];
	main_tmdsencoder2_q_m[1] <= ((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[2] <= ((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[3] <= ((((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[3]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[4] <= ((((((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[3]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[4]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[5] <= ((((((((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[3]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[4]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[5]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[6] <= ((((((((((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[3]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[4]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[5]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[6]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[7] <= ((((((((((((((main_tmdsencoder2_d1[0] ^ main_tmdsencoder2_d1[1]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[2]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[3]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[4]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[5]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[6]) ^ main_tmdsencoder2_q_m8_n) ^ main_tmdsencoder2_d1[7]) ^ main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_q_m[8] <= (~main_tmdsencoder2_q_m8_n);
	main_tmdsencoder2_n0q_m <= ((((((((~main_tmdsencoder2_q_m[0]) + (~main_tmdsencoder2_q_m[1])) + (~main_tmdsencoder2_q_m[2])) + (~main_tmdsencoder2_q_m[3])) + (~main_tmdsencoder2_q_m[4])) + (~main_tmdsencoder2_q_m[5])) + (~main_tmdsencoder2_q_m[6])) + (~main_tmdsencoder2_q_m[7]));
	main_tmdsencoder2_n1q_m <= (((((((main_tmdsencoder2_q_m[0] + main_tmdsencoder2_q_m[1]) + main_tmdsencoder2_q_m[2]) + main_tmdsencoder2_q_m[3]) + main_tmdsencoder2_q_m[4]) + main_tmdsencoder2_q_m[5]) + main_tmdsencoder2_q_m[6]) + main_tmdsencoder2_q_m[7]);
	main_tmdsencoder2_q_m_r <= main_tmdsencoder2_q_m;
	main_tmdsencoder2_new_c0 <= main_tmdsencoder2_c;
	main_tmdsencoder2_new_de0 <= main_tmdsencoder2_de;
	main_tmdsencoder2_new_c1 <= main_tmdsencoder2_new_c0;
	main_tmdsencoder2_new_de1 <= main_tmdsencoder2_new_de0;
	main_tmdsencoder2_new_c2 <= main_tmdsencoder2_new_c1;
	main_tmdsencoder2_new_de2 <= main_tmdsencoder2_new_de1;
	if (main_tmdsencoder2_new_de2) begin
		if (((main_tmdsencoder2_cnt == $signed({1'd0, 1'd0})) | $signed({1'd0, (main_tmdsencoder2_n1q_m == main_tmdsencoder2_n0q_m)}))) begin
			main_tmdsencoder2_out[9] <= (~main_tmdsencoder2_q_m_r[8]);
			main_tmdsencoder2_out[8] <= main_tmdsencoder2_q_m_r[8];
			if (main_tmdsencoder2_q_m_r[8]) begin
				main_tmdsencoder2_out[7:0] <= main_tmdsencoder2_q_m_r[7:0];
				main_tmdsencoder2_cnt <= ((main_tmdsencoder2_cnt + $signed({1'd0, main_tmdsencoder2_n1q_m})) - $signed({1'd0, main_tmdsencoder2_n0q_m}));
			end else begin
				main_tmdsencoder2_out[7:0] <= (~main_tmdsencoder2_q_m_r[7:0]);
				main_tmdsencoder2_cnt <= ((main_tmdsencoder2_cnt + $signed({1'd0, main_tmdsencoder2_n0q_m})) - $signed({1'd0, main_tmdsencoder2_n1q_m}));
			end
		end else begin
			if ((((~main_tmdsencoder2_cnt[5]) & $signed({1'd0, (main_tmdsencoder2_n1q_m > main_tmdsencoder2_n0q_m)})) | (main_tmdsencoder2_cnt[5] & $signed({1'd0, (main_tmdsencoder2_n0q_m > main_tmdsencoder2_n1q_m)})))) begin
				main_tmdsencoder2_out[9] <= 1'd1;
				main_tmdsencoder2_out[8] <= main_tmdsencoder2_q_m_r[8];
				main_tmdsencoder2_out[7:0] <= (~main_tmdsencoder2_q_m_r[7:0]);
				main_tmdsencoder2_cnt <= (((main_tmdsencoder2_cnt + $signed({1'd0, {main_tmdsencoder2_q_m_r[8], 1'd0}})) + $signed({1'd0, main_tmdsencoder2_n0q_m})) - $signed({1'd0, main_tmdsencoder2_n1q_m}));
			end else begin
				main_tmdsencoder2_out[9] <= 1'd0;
				main_tmdsencoder2_out[8] <= main_tmdsencoder2_q_m_r[8];
				main_tmdsencoder2_out[7:0] <= main_tmdsencoder2_q_m_r[7:0];
				main_tmdsencoder2_cnt <= (((main_tmdsencoder2_cnt - $signed({1'd0, {(~main_tmdsencoder2_q_m_r[8]), 1'd0}})) + $signed({1'd0, main_tmdsencoder2_n1q_m})) - $signed({1'd0, main_tmdsencoder2_n0q_m}));
			end
		end
	end else begin
		main_tmdsencoder2_out <= builder_sync_f_array_muxed2;
		main_tmdsencoder2_cnt <= 1'd0;
	end
	main_videohdmi10to1serializer2_cdc_graycounter4_q_binary <= main_videohdmi10to1serializer2_cdc_graycounter4_q_next_binary;
	main_videohdmi10to1serializer2_cdc_graycounter4_q <= main_videohdmi10to1serializer2_cdc_graycounter4_q_next;
	main_vtg_source_first <= ((main_vtg_source_payload_hcount == 1'd0) & (main_vtg_source_payload_vcount == 1'd0));
	main_vtg_source_last <= ((main_vtg_source_payload_hcount == main_vtg_hscan) & (main_vtg_source_payload_vcount == main_vtg_vscan));
	builder_clockdomainsrenamer_state <= builder_clockdomainsrenamer_next_state;
	if (main_vtg_hactive_clockdomainsrenamer_next_value_ce0) begin
		main_vtg_hactive <= main_vtg_hactive_clockdomainsrenamer_next_value0;
	end
	if (main_vtg_vactive_clockdomainsrenamer_next_value_ce1) begin
		main_vtg_vactive <= main_vtg_vactive_clockdomainsrenamer_next_value1;
	end
	if (main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2) begin
		main_vtg_source_payload_hres <= main_vtg_source_payload_hres_clockdomainsrenamer_next_value2;
	end
	if (main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3) begin
		main_vtg_source_payload_vres <= main_vtg_source_payload_vres_clockdomainsrenamer_next_value3;
	end
	if (main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4) begin
		main_vtg_source_payload_hcount <= main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4;
	end
	if (main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5) begin
		main_vtg_source_payload_vcount <= main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5;
	end
	if (main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6) begin
		main_vtg_source_payload_hsync <= main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6;
	end
	if (main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7) begin
		main_vtg_source_payload_vsync <= main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7;
	end
	if (main_vtg_reset) begin
		main_vtg_source_payload_hsync <= 1'd0;
		main_vtg_source_payload_vsync <= 1'd0;
		main_vtg_source_payload_hres <= 12'd0;
		main_vtg_source_payload_vres <= 12'd0;
		main_vtg_source_payload_hcount <= 12'd0;
		main_vtg_source_payload_vcount <= 12'd0;
		main_vtg_hactive <= 1'd0;
		main_vtg_vactive <= 1'd0;
		builder_clockdomainsrenamer_state <= 1'd0;
	end
	main_vfb_cdc_cdc_graycounter1_q_binary <= main_vfb_cdc_cdc_graycounter1_q_next_binary;
	main_vfb_cdc_cdc_graycounter1_q <= main_vfb_cdc_cdc_graycounter1_q_next;
	if (hdmi_rst) begin
		main_tmdsencoder0_out <= 10'd0;
		main_tmdsencoder0_d1 <= 8'd0;
		main_tmdsencoder0_n1d <= 4'd0;
		main_tmdsencoder0_q_m <= 9'd0;
		main_tmdsencoder0_q_m_r <= 9'd0;
		main_tmdsencoder0_n0q_m <= 4'd0;
		main_tmdsencoder0_n1q_m <= 4'd0;
		main_tmdsencoder0_cnt <= 6'd0;
		main_tmdsencoder0_new_c0 <= 2'd0;
		main_tmdsencoder0_new_de0 <= 1'd0;
		main_tmdsencoder0_new_c1 <= 2'd0;
		main_tmdsencoder0_new_de1 <= 1'd0;
		main_tmdsencoder0_new_c2 <= 2'd0;
		main_tmdsencoder0_new_de2 <= 1'd0;
		main_videohdmi10to1serializer0_cdc_graycounter0_q <= 3'd0;
		main_videohdmi10to1serializer0_cdc_graycounter0_q_binary <= 3'd0;
		main_tmdsencoder1_out <= 10'd0;
		main_tmdsencoder1_d1 <= 8'd0;
		main_tmdsencoder1_n1d <= 4'd0;
		main_tmdsencoder1_q_m <= 9'd0;
		main_tmdsencoder1_q_m_r <= 9'd0;
		main_tmdsencoder1_n0q_m <= 4'd0;
		main_tmdsencoder1_n1q_m <= 4'd0;
		main_tmdsencoder1_cnt <= 6'd0;
		main_tmdsencoder1_new_c0 <= 2'd0;
		main_tmdsencoder1_new_de0 <= 1'd0;
		main_tmdsencoder1_new_c1 <= 2'd0;
		main_tmdsencoder1_new_de1 <= 1'd0;
		main_tmdsencoder1_new_c2 <= 2'd0;
		main_tmdsencoder1_new_de2 <= 1'd0;
		main_videohdmi10to1serializer1_cdc_graycounter2_q <= 3'd0;
		main_videohdmi10to1serializer1_cdc_graycounter2_q_binary <= 3'd0;
		main_tmdsencoder2_out <= 10'd0;
		main_tmdsencoder2_d1 <= 8'd0;
		main_tmdsencoder2_n1d <= 4'd0;
		main_tmdsencoder2_q_m <= 9'd0;
		main_tmdsencoder2_q_m_r <= 9'd0;
		main_tmdsencoder2_n0q_m <= 4'd0;
		main_tmdsencoder2_n1q_m <= 4'd0;
		main_tmdsencoder2_cnt <= 6'd0;
		main_tmdsencoder2_new_c0 <= 2'd0;
		main_tmdsencoder2_new_de0 <= 1'd0;
		main_tmdsencoder2_new_c1 <= 2'd0;
		main_tmdsencoder2_new_de1 <= 1'd0;
		main_tmdsencoder2_new_c2 <= 2'd0;
		main_tmdsencoder2_new_de2 <= 1'd0;
		main_videohdmi10to1serializer2_cdc_graycounter4_q <= 3'd0;
		main_videohdmi10to1serializer2_cdc_graycounter4_q_binary <= 3'd0;
		main_vtg_source_payload_hsync <= 1'd0;
		main_vtg_source_payload_vsync <= 1'd0;
		main_vtg_source_payload_hres <= 12'd0;
		main_vtg_source_payload_vres <= 12'd0;
		main_vtg_source_payload_hcount <= 12'd0;
		main_vtg_source_payload_vcount <= 12'd0;
		main_vtg_hactive <= 1'd0;
		main_vtg_vactive <= 1'd0;
		main_vfb_cdc_cdc_graycounter1_q <= 3'd0;
		main_vfb_cdc_cdc_graycounter1_q_binary <= 3'd0;
		builder_clockdomainsrenamer_state <= 1'd0;
	end
	builder_multiregimpl2_regs0 <= main_videohdmi10to1serializer0_cdc_graycounter1_q;
	builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
	builder_multiregimpl4_regs0 <= main_videohdmi10to1serializer1_cdc_graycounter3_q;
	builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
	builder_multiregimpl6_regs0 <= main_videohdmi10to1serializer2_cdc_graycounter5_q;
	builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
	builder_multiregimpl7_regs0 <= main_vtg_enable_storage;
	builder_multiregimpl7_regs1 <= builder_multiregimpl7_regs0;
	builder_multiregimpl8_regs0 <= main_vtg_hres_storage;
	builder_multiregimpl8_regs1 <= builder_multiregimpl8_regs0;
	builder_multiregimpl9_regs0 <= main_vtg_hsync_start_storage;
	builder_multiregimpl9_regs1 <= builder_multiregimpl9_regs0;
	builder_multiregimpl10_regs0 <= main_vtg_hsync_end_storage;
	builder_multiregimpl10_regs1 <= builder_multiregimpl10_regs0;
	builder_multiregimpl11_regs0 <= main_vtg_hscan_storage;
	builder_multiregimpl11_regs1 <= builder_multiregimpl11_regs0;
	builder_multiregimpl12_regs0 <= main_vtg_vres_storage;
	builder_multiregimpl12_regs1 <= builder_multiregimpl12_regs0;
	builder_multiregimpl13_regs0 <= main_vtg_vsync_start_storage;
	builder_multiregimpl13_regs1 <= builder_multiregimpl13_regs0;
	builder_multiregimpl14_regs0 <= main_vtg_vsync_end_storage;
	builder_multiregimpl14_regs1 <= builder_multiregimpl14_regs0;
	builder_multiregimpl15_regs0 <= main_vtg_vscan_storage;
	builder_multiregimpl15_regs1 <= builder_multiregimpl15_regs0;
	builder_multiregimpl16_regs0 <= main_vfb_cdc_cdc_graycounter0_q;
	builder_multiregimpl16_regs1 <= builder_multiregimpl16_regs0;
end

always @(posedge hdmi5x_clk) begin
	main_videohdmi10to1serializer0_cdc_graycounter1_q_binary <= main_videohdmi10to1serializer0_cdc_graycounter1_q_next_binary;
	main_videohdmi10to1serializer0_cdc_graycounter1_q <= main_videohdmi10to1serializer0_cdc_graycounter1_q_next;
	if (main_videohdmi10to1serializer0_i_inc) begin
		main_videohdmi10to1serializer0_i_count <= (main_videohdmi10to1serializer0_i_count + 1'd1);
		if ((main_videohdmi10to1serializer0_i_count == 1'd1)) begin
			main_videohdmi10to1serializer0_i_count <= 1'd0;
		end
	end
	if (main_videohdmi10to1serializer0_o_inc) begin
		main_videohdmi10to1serializer0_o_count <= (main_videohdmi10to1serializer0_o_count + 1'd1);
		if ((main_videohdmi10to1serializer0_o_count == 4'd9)) begin
			main_videohdmi10to1serializer0_o_count <= 1'd0;
		end
	end
	if ((main_videohdmi10to1serializer0_i_inc & (~main_videohdmi10to1serializer0_o_inc))) begin
		main_videohdmi10to1serializer0_level <= (main_videohdmi10to1serializer0_level + 4'd10);
	end
	if (((~main_videohdmi10to1serializer0_i_inc) & main_videohdmi10to1serializer0_o_inc)) begin
		main_videohdmi10to1serializer0_level <= (main_videohdmi10to1serializer0_level - 2'd2);
	end
	if ((main_videohdmi10to1serializer0_i_inc & main_videohdmi10to1serializer0_o_inc)) begin
		main_videohdmi10to1serializer0_level <= ((main_videohdmi10to1serializer0_level + 4'd10) - 2'd2);
	end
	if ((main_videohdmi10to1serializer0_sink_valid & main_videohdmi10to1serializer0_sink_ready)) begin
		case (main_videohdmi10to1serializer0_i_count)
			1'd0: begin
				main_videohdmi10to1serializer0_shift_register[19:10] <= main_videohdmi10to1serializer0_i_data;
			end
			1'd1: begin
				main_videohdmi10to1serializer0_shift_register[9:0] <= main_videohdmi10to1serializer0_i_data;
			end
		endcase
	end
	main_videohdmi10to1serializer1_cdc_graycounter3_q_binary <= main_videohdmi10to1serializer1_cdc_graycounter3_q_next_binary;
	main_videohdmi10to1serializer1_cdc_graycounter3_q <= main_videohdmi10to1serializer1_cdc_graycounter3_q_next;
	if (main_videohdmi10to1serializer1_i_inc) begin
		main_videohdmi10to1serializer1_i_count <= (main_videohdmi10to1serializer1_i_count + 1'd1);
		if ((main_videohdmi10to1serializer1_i_count == 1'd1)) begin
			main_videohdmi10to1serializer1_i_count <= 1'd0;
		end
	end
	if (main_videohdmi10to1serializer1_o_inc) begin
		main_videohdmi10to1serializer1_o_count <= (main_videohdmi10to1serializer1_o_count + 1'd1);
		if ((main_videohdmi10to1serializer1_o_count == 4'd9)) begin
			main_videohdmi10to1serializer1_o_count <= 1'd0;
		end
	end
	if ((main_videohdmi10to1serializer1_i_inc & (~main_videohdmi10to1serializer1_o_inc))) begin
		main_videohdmi10to1serializer1_level <= (main_videohdmi10to1serializer1_level + 4'd10);
	end
	if (((~main_videohdmi10to1serializer1_i_inc) & main_videohdmi10to1serializer1_o_inc)) begin
		main_videohdmi10to1serializer1_level <= (main_videohdmi10to1serializer1_level - 2'd2);
	end
	if ((main_videohdmi10to1serializer1_i_inc & main_videohdmi10to1serializer1_o_inc)) begin
		main_videohdmi10to1serializer1_level <= ((main_videohdmi10to1serializer1_level + 4'd10) - 2'd2);
	end
	if ((main_videohdmi10to1serializer1_sink_valid & main_videohdmi10to1serializer1_sink_ready)) begin
		case (main_videohdmi10to1serializer1_i_count)
			1'd0: begin
				main_videohdmi10to1serializer1_shift_register[19:10] <= main_videohdmi10to1serializer1_i_data;
			end
			1'd1: begin
				main_videohdmi10to1serializer1_shift_register[9:0] <= main_videohdmi10to1serializer1_i_data;
			end
		endcase
	end
	main_videohdmi10to1serializer2_cdc_graycounter5_q_binary <= main_videohdmi10to1serializer2_cdc_graycounter5_q_next_binary;
	main_videohdmi10to1serializer2_cdc_graycounter5_q <= main_videohdmi10to1serializer2_cdc_graycounter5_q_next;
	if (main_videohdmi10to1serializer2_i_inc) begin
		main_videohdmi10to1serializer2_i_count <= (main_videohdmi10to1serializer2_i_count + 1'd1);
		if ((main_videohdmi10to1serializer2_i_count == 1'd1)) begin
			main_videohdmi10to1serializer2_i_count <= 1'd0;
		end
	end
	if (main_videohdmi10to1serializer2_o_inc) begin
		main_videohdmi10to1serializer2_o_count <= (main_videohdmi10to1serializer2_o_count + 1'd1);
		if ((main_videohdmi10to1serializer2_o_count == 4'd9)) begin
			main_videohdmi10to1serializer2_o_count <= 1'd0;
		end
	end
	if ((main_videohdmi10to1serializer2_i_inc & (~main_videohdmi10to1serializer2_o_inc))) begin
		main_videohdmi10to1serializer2_level <= (main_videohdmi10to1serializer2_level + 4'd10);
	end
	if (((~main_videohdmi10to1serializer2_i_inc) & main_videohdmi10to1serializer2_o_inc)) begin
		main_videohdmi10to1serializer2_level <= (main_videohdmi10to1serializer2_level - 2'd2);
	end
	if ((main_videohdmi10to1serializer2_i_inc & main_videohdmi10to1serializer2_o_inc)) begin
		main_videohdmi10to1serializer2_level <= ((main_videohdmi10to1serializer2_level + 4'd10) - 2'd2);
	end
	if ((main_videohdmi10to1serializer2_sink_valid & main_videohdmi10to1serializer2_sink_ready)) begin
		case (main_videohdmi10to1serializer2_i_count)
			1'd0: begin
				main_videohdmi10to1serializer2_shift_register[19:10] <= main_videohdmi10to1serializer2_i_data;
			end
			1'd1: begin
				main_videohdmi10to1serializer2_shift_register[9:0] <= main_videohdmi10to1serializer2_i_data;
			end
		endcase
	end
	if (hdmi5x_rst) begin
		main_videohdmi10to1serializer0_cdc_graycounter1_q <= 3'd0;
		main_videohdmi10to1serializer0_cdc_graycounter1_q_binary <= 3'd0;
		main_videohdmi10to1serializer0_level <= 5'd0;
		main_videohdmi10to1serializer0_i_count <= 1'd0;
		main_videohdmi10to1serializer0_o_count <= 4'd0;
		main_videohdmi10to1serializer1_cdc_graycounter3_q <= 3'd0;
		main_videohdmi10to1serializer1_cdc_graycounter3_q_binary <= 3'd0;
		main_videohdmi10to1serializer1_level <= 5'd0;
		main_videohdmi10to1serializer1_i_count <= 1'd0;
		main_videohdmi10to1serializer1_o_count <= 4'd0;
		main_videohdmi10to1serializer2_cdc_graycounter5_q <= 3'd0;
		main_videohdmi10to1serializer2_cdc_graycounter5_q_binary <= 3'd0;
		main_videohdmi10to1serializer2_level <= 5'd0;
		main_videohdmi10to1serializer2_i_count <= 1'd0;
		main_videohdmi10to1serializer2_o_count <= 4'd0;
	end
	builder_multiregimpl1_regs0 <= main_videohdmi10to1serializer0_cdc_graycounter0_q;
	builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
	builder_multiregimpl3_regs0 <= main_videohdmi10to1serializer1_cdc_graycounter2_q;
	builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
	builder_multiregimpl5_regs0 <= main_videohdmi10to1serializer2_cdc_graycounter4_q;
	builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
end

always @(posedge sdrio_clk) begin
	builder_inferedsdrtristate0_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate1_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate2_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate3_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate4_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate5_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate6_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate7_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate8_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate9_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate10_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate11_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate12_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate13_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate14_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate15_oe <= main_dfi_p0_wrdata_en;
	builder_inferedsdrtristate16_oe <= sdpads_cmd_oe;
	builder_inferedsdrtristate17_oe <= sdpads_data_oe;
	builder_inferedsdrtristate18_oe <= sdpads_data_oe;
	builder_inferedsdrtristate19_oe <= sdpads_data_oe;
	builder_inferedsdrtristate20_oe <= sdpads_data_oe;
end

always @(posedge sys_clk) begin
	if ((main_soclinux_bus_errors != 32'd4294967295)) begin
		if (main_soclinux_bus_error) begin
			main_soclinux_bus_errors <= (main_soclinux_bus_errors + 1'd1);
		end
	end
	main_soclinux_soclinux_ram_bus_ack <= 1'd0;
	if (((main_soclinux_soclinux_ram_bus_cyc & main_soclinux_soclinux_ram_bus_stb) & ((~main_soclinux_soclinux_ram_bus_ack) | main_soclinux_soclinux_adr_burst))) begin
		main_soclinux_soclinux_ram_bus_ack <= 1'd1;
	end
	main_soclinux_ram_bus_ram_bus_ack <= 1'd0;
	if (((main_soclinux_ram_bus_ram_bus_cyc & main_soclinux_ram_bus_ram_bus_stb) & ((~main_soclinux_ram_bus_ram_bus_ack) | main_soclinux_ram_adr_burst))) begin
		main_soclinux_ram_bus_ram_bus_ack <= 1'd1;
	end
	{main_soclinux_tx_tick, main_soclinux_tx_phase} <= 24'd9895604;
	if (main_soclinux_tx_enable) begin
		{main_soclinux_tx_tick, main_soclinux_tx_phase} <= (main_soclinux_tx_phase + 24'd9895604);
	end
	builder_rs232phytx_state <= builder_rs232phytx_next_state;
	if (main_soclinux_tx_count_rs232phytx_next_value_ce0) begin
		main_soclinux_tx_count <= main_soclinux_tx_count_rs232phytx_next_value0;
	end
	if (main_soclinux_serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= main_soclinux_serial_tx_rs232phytx_next_value1;
	end
	if (main_soclinux_tx_data_rs232phytx_next_value_ce2) begin
		main_soclinux_tx_data <= main_soclinux_tx_data_rs232phytx_next_value2;
	end
	main_soclinux_rx_rx_d <= main_soclinux_rx_rx;
	{main_soclinux_rx_tick, main_soclinux_rx_phase} <= 32'd2147483648;
	if (main_soclinux_rx_enable) begin
		{main_soclinux_rx_tick, main_soclinux_rx_phase} <= (main_soclinux_rx_phase + 24'd9895604);
	end
	builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
	if (main_soclinux_rx_count_rs232phyrx_next_value_ce0) begin
		main_soclinux_rx_count <= main_soclinux_rx_count_rs232phyrx_next_value0;
	end
	if (main_soclinux_rx_data_rs232phyrx_next_value_ce1) begin
		main_soclinux_rx_data <= main_soclinux_rx_data_rs232phyrx_next_value1;
	end
	if (main_soclinux_uart_tx_clear) begin
		main_soclinux_uart_tx_pending <= 1'd0;
	end
	main_soclinux_uart_tx_trigger_d <= main_soclinux_uart_tx_trigger;
	if ((main_soclinux_uart_tx_trigger & (~main_soclinux_uart_tx_trigger_d))) begin
		main_soclinux_uart_tx_pending <= 1'd1;
	end
	if (main_soclinux_uart_rx_clear) begin
		main_soclinux_uart_rx_pending <= 1'd0;
	end
	main_soclinux_uart_rx_trigger_d <= main_soclinux_uart_rx_trigger;
	if ((main_soclinux_uart_rx_trigger & (~main_soclinux_uart_rx_trigger_d))) begin
		main_soclinux_uart_rx_pending <= 1'd1;
	end
	if (main_soclinux_uart_tx_fifo_syncfifo_re) begin
		main_soclinux_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (main_soclinux_uart_tx_fifo_re) begin
			main_soclinux_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((main_soclinux_uart_tx_fifo_syncfifo_we & main_soclinux_uart_tx_fifo_syncfifo_writable) & (~main_soclinux_uart_tx_fifo_replace))) begin
		main_soclinux_uart_tx_fifo_produce <= (main_soclinux_uart_tx_fifo_produce + 1'd1);
	end
	if (main_soclinux_uart_tx_fifo_do_read) begin
		main_soclinux_uart_tx_fifo_consume <= (main_soclinux_uart_tx_fifo_consume + 1'd1);
	end
	if (((main_soclinux_uart_tx_fifo_syncfifo_we & main_soclinux_uart_tx_fifo_syncfifo_writable) & (~main_soclinux_uart_tx_fifo_replace))) begin
		if ((~main_soclinux_uart_tx_fifo_do_read)) begin
			main_soclinux_uart_tx_fifo_level0 <= (main_soclinux_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_soclinux_uart_tx_fifo_do_read) begin
			main_soclinux_uart_tx_fifo_level0 <= (main_soclinux_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (main_soclinux_uart_rx_fifo_syncfifo_re) begin
		main_soclinux_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (main_soclinux_uart_rx_fifo_re) begin
			main_soclinux_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((main_soclinux_uart_rx_fifo_syncfifo_we & main_soclinux_uart_rx_fifo_syncfifo_writable) & (~main_soclinux_uart_rx_fifo_replace))) begin
		main_soclinux_uart_rx_fifo_produce <= (main_soclinux_uart_rx_fifo_produce + 1'd1);
	end
	if (main_soclinux_uart_rx_fifo_do_read) begin
		main_soclinux_uart_rx_fifo_consume <= (main_soclinux_uart_rx_fifo_consume + 1'd1);
	end
	if (((main_soclinux_uart_rx_fifo_syncfifo_we & main_soclinux_uart_rx_fifo_syncfifo_writable) & (~main_soclinux_uart_rx_fifo_replace))) begin
		if ((~main_soclinux_uart_rx_fifo_do_read)) begin
			main_soclinux_uart_rx_fifo_level0 <= (main_soclinux_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_soclinux_uart_rx_fifo_do_read) begin
			main_soclinux_uart_rx_fifo_level0 <= (main_soclinux_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (main_soclinux_timer_en_storage) begin
		if ((main_soclinux_timer_value == 1'd0)) begin
			main_soclinux_timer_value <= main_soclinux_timer_reload_storage;
		end else begin
			main_soclinux_timer_value <= (main_soclinux_timer_value - 1'd1);
		end
	end else begin
		main_soclinux_timer_value <= main_soclinux_timer_load_storage;
	end
	if (main_soclinux_timer_update_value_re) begin
		main_soclinux_timer_value_status <= main_soclinux_timer_value;
	end
	if (main_soclinux_timer_zero_clear) begin
		main_soclinux_timer_zero_pending <= 1'd0;
	end
	main_soclinux_timer_zero_trigger_d <= main_soclinux_timer_zero_trigger;
	if ((main_soclinux_timer_zero_trigger & (~main_soclinux_timer_zero_trigger_d))) begin
		main_soclinux_timer_zero_pending <= 1'd1;
	end
	main_rddata_en <= {main_rddata_en, main_dfi_p0_rddata_en};
	main_dfi_p0_rddata_valid <= main_rddata_en[2];
	if (main_sdram_csr_dfi_p0_rddata_valid) begin
		main_sdram_rddata_status <= main_sdram_csr_dfi_p0_rddata;
	end
	if ((main_sdram_timer_wait & (~main_sdram_timer_done0))) begin
		main_sdram_timer_count1 <= (main_sdram_timer_count1 - 1'd1);
	end else begin
		main_sdram_timer_count1 <= 9'd390;
	end
	main_sdram_postponer_req_o <= 1'd0;
	if (main_sdram_postponer_req_i) begin
		main_sdram_postponer_count <= (main_sdram_postponer_count - 1'd1);
		if ((main_sdram_postponer_count == 1'd0)) begin
			main_sdram_postponer_count <= 1'd0;
			main_sdram_postponer_req_o <= 1'd1;
		end
	end
	if (main_sdram_sequencer_start0) begin
		main_sdram_sequencer_count <= 1'd0;
	end else begin
		if (main_sdram_sequencer_done1) begin
			if ((main_sdram_sequencer_count != 1'd0)) begin
				main_sdram_sequencer_count <= (main_sdram_sequencer_count - 1'd1);
			end
		end
	end
	main_sdram_cmd_payload_a <= 1'd0;
	main_sdram_cmd_payload_ba <= 1'd0;
	main_sdram_cmd_payload_cas <= 1'd0;
	main_sdram_cmd_payload_ras <= 1'd0;
	main_sdram_cmd_payload_we <= 1'd0;
	main_sdram_sequencer_done1 <= 1'd0;
	if ((main_sdram_sequencer_start1 & (main_sdram_sequencer_counter == 1'd0))) begin
		main_sdram_cmd_payload_a <= 11'd1024;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd1;
		main_sdram_cmd_payload_we <= 1'd1;
	end
	if ((main_sdram_sequencer_counter == 1'd1)) begin
		main_sdram_cmd_payload_a <= 11'd1024;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd1;
		main_sdram_cmd_payload_ras <= 1'd1;
		main_sdram_cmd_payload_we <= 1'd0;
	end
	if ((main_sdram_sequencer_counter == 3'd5)) begin
		main_sdram_cmd_payload_a <= 1'd0;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd0;
		main_sdram_cmd_payload_we <= 1'd0;
		main_sdram_sequencer_done1 <= 1'd1;
	end
	if ((main_sdram_sequencer_counter == 3'd5)) begin
		main_sdram_sequencer_counter <= 1'd0;
	end else begin
		if ((main_sdram_sequencer_counter != 1'd0)) begin
			main_sdram_sequencer_counter <= (main_sdram_sequencer_counter + 1'd1);
		end else begin
			if (main_sdram_sequencer_start1) begin
				main_sdram_sequencer_counter <= 1'd1;
			end
		end
	end
	builder_refresher_state <= builder_refresher_next_state;
	if (main_sdram_bankmachine0_row_close) begin
		main_sdram_bankmachine0_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine0_row_open) begin
			main_sdram_bankmachine0_row_opened <= 1'd1;
			main_sdram_bankmachine0_row <= main_sdram_bankmachine0_cmd_buffer_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable) & (~main_sdram_bankmachine0_cmd_buffer_lookahead_replace))) begin
		main_sdram_bankmachine0_cmd_buffer_lookahead_produce <= (main_sdram_bankmachine0_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (main_sdram_bankmachine0_cmd_buffer_lookahead_do_read) begin
		main_sdram_bankmachine0_cmd_buffer_lookahead_consume <= (main_sdram_bankmachine0_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & main_sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable) & (~main_sdram_bankmachine0_cmd_buffer_lookahead_replace))) begin
		if ((~main_sdram_bankmachine0_cmd_buffer_lookahead_do_read)) begin
			main_sdram_bankmachine0_cmd_buffer_lookahead_level <= (main_sdram_bankmachine0_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine0_cmd_buffer_lookahead_do_read) begin
			main_sdram_bankmachine0_cmd_buffer_lookahead_level <= (main_sdram_bankmachine0_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine0_cmd_buffer_source_valid) | main_sdram_bankmachine0_cmd_buffer_source_ready)) begin
		main_sdram_bankmachine0_cmd_buffer_source_valid <= main_sdram_bankmachine0_cmd_buffer_sink_valid;
		main_sdram_bankmachine0_cmd_buffer_source_first <= main_sdram_bankmachine0_cmd_buffer_sink_first;
		main_sdram_bankmachine0_cmd_buffer_source_last <= main_sdram_bankmachine0_cmd_buffer_sink_last;
		main_sdram_bankmachine0_cmd_buffer_source_payload_we <= main_sdram_bankmachine0_cmd_buffer_sink_payload_we;
		main_sdram_bankmachine0_cmd_buffer_source_payload_addr <= main_sdram_bankmachine0_cmd_buffer_sink_payload_addr;
	end
	if (main_sdram_bankmachine0_twtpcon_valid) begin
		main_sdram_bankmachine0_twtpcon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_twtpcon_ready)) begin
			main_sdram_bankmachine0_twtpcon_count <= (main_sdram_bankmachine0_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine0_trccon_valid) begin
		main_sdram_bankmachine0_trccon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine0_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_trccon_ready)) begin
			main_sdram_bankmachine0_trccon_count <= (main_sdram_bankmachine0_trccon_count - 1'd1);
			if ((main_sdram_bankmachine0_trccon_count == 1'd1)) begin
				main_sdram_bankmachine0_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine0_trascon_valid) begin
		main_sdram_bankmachine0_trascon_count <= 2'd2;
		if (1'd0) begin
			main_sdram_bankmachine0_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_trascon_ready)) begin
			main_sdram_bankmachine0_trascon_count <= (main_sdram_bankmachine0_trascon_count - 1'd1);
			if ((main_sdram_bankmachine0_trascon_count == 1'd1)) begin
				main_sdram_bankmachine0_trascon_ready <= 1'd1;
			end
		end
	end
	builder_bankmachine0_state <= builder_bankmachine0_next_state;
	if (main_sdram_bankmachine1_row_close) begin
		main_sdram_bankmachine1_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine1_row_open) begin
			main_sdram_bankmachine1_row_opened <= 1'd1;
			main_sdram_bankmachine1_row <= main_sdram_bankmachine1_cmd_buffer_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable) & (~main_sdram_bankmachine1_cmd_buffer_lookahead_replace))) begin
		main_sdram_bankmachine1_cmd_buffer_lookahead_produce <= (main_sdram_bankmachine1_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (main_sdram_bankmachine1_cmd_buffer_lookahead_do_read) begin
		main_sdram_bankmachine1_cmd_buffer_lookahead_consume <= (main_sdram_bankmachine1_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & main_sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable) & (~main_sdram_bankmachine1_cmd_buffer_lookahead_replace))) begin
		if ((~main_sdram_bankmachine1_cmd_buffer_lookahead_do_read)) begin
			main_sdram_bankmachine1_cmd_buffer_lookahead_level <= (main_sdram_bankmachine1_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine1_cmd_buffer_lookahead_do_read) begin
			main_sdram_bankmachine1_cmd_buffer_lookahead_level <= (main_sdram_bankmachine1_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine1_cmd_buffer_source_valid) | main_sdram_bankmachine1_cmd_buffer_source_ready)) begin
		main_sdram_bankmachine1_cmd_buffer_source_valid <= main_sdram_bankmachine1_cmd_buffer_sink_valid;
		main_sdram_bankmachine1_cmd_buffer_source_first <= main_sdram_bankmachine1_cmd_buffer_sink_first;
		main_sdram_bankmachine1_cmd_buffer_source_last <= main_sdram_bankmachine1_cmd_buffer_sink_last;
		main_sdram_bankmachine1_cmd_buffer_source_payload_we <= main_sdram_bankmachine1_cmd_buffer_sink_payload_we;
		main_sdram_bankmachine1_cmd_buffer_source_payload_addr <= main_sdram_bankmachine1_cmd_buffer_sink_payload_addr;
	end
	if (main_sdram_bankmachine1_twtpcon_valid) begin
		main_sdram_bankmachine1_twtpcon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_twtpcon_ready)) begin
			main_sdram_bankmachine1_twtpcon_count <= (main_sdram_bankmachine1_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine1_trccon_valid) begin
		main_sdram_bankmachine1_trccon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine1_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_trccon_ready)) begin
			main_sdram_bankmachine1_trccon_count <= (main_sdram_bankmachine1_trccon_count - 1'd1);
			if ((main_sdram_bankmachine1_trccon_count == 1'd1)) begin
				main_sdram_bankmachine1_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine1_trascon_valid) begin
		main_sdram_bankmachine1_trascon_count <= 2'd2;
		if (1'd0) begin
			main_sdram_bankmachine1_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_trascon_ready)) begin
			main_sdram_bankmachine1_trascon_count <= (main_sdram_bankmachine1_trascon_count - 1'd1);
			if ((main_sdram_bankmachine1_trascon_count == 1'd1)) begin
				main_sdram_bankmachine1_trascon_ready <= 1'd1;
			end
		end
	end
	builder_bankmachine1_state <= builder_bankmachine1_next_state;
	if (main_sdram_bankmachine2_row_close) begin
		main_sdram_bankmachine2_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine2_row_open) begin
			main_sdram_bankmachine2_row_opened <= 1'd1;
			main_sdram_bankmachine2_row <= main_sdram_bankmachine2_cmd_buffer_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable) & (~main_sdram_bankmachine2_cmd_buffer_lookahead_replace))) begin
		main_sdram_bankmachine2_cmd_buffer_lookahead_produce <= (main_sdram_bankmachine2_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (main_sdram_bankmachine2_cmd_buffer_lookahead_do_read) begin
		main_sdram_bankmachine2_cmd_buffer_lookahead_consume <= (main_sdram_bankmachine2_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & main_sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable) & (~main_sdram_bankmachine2_cmd_buffer_lookahead_replace))) begin
		if ((~main_sdram_bankmachine2_cmd_buffer_lookahead_do_read)) begin
			main_sdram_bankmachine2_cmd_buffer_lookahead_level <= (main_sdram_bankmachine2_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine2_cmd_buffer_lookahead_do_read) begin
			main_sdram_bankmachine2_cmd_buffer_lookahead_level <= (main_sdram_bankmachine2_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine2_cmd_buffer_source_valid) | main_sdram_bankmachine2_cmd_buffer_source_ready)) begin
		main_sdram_bankmachine2_cmd_buffer_source_valid <= main_sdram_bankmachine2_cmd_buffer_sink_valid;
		main_sdram_bankmachine2_cmd_buffer_source_first <= main_sdram_bankmachine2_cmd_buffer_sink_first;
		main_sdram_bankmachine2_cmd_buffer_source_last <= main_sdram_bankmachine2_cmd_buffer_sink_last;
		main_sdram_bankmachine2_cmd_buffer_source_payload_we <= main_sdram_bankmachine2_cmd_buffer_sink_payload_we;
		main_sdram_bankmachine2_cmd_buffer_source_payload_addr <= main_sdram_bankmachine2_cmd_buffer_sink_payload_addr;
	end
	if (main_sdram_bankmachine2_twtpcon_valid) begin
		main_sdram_bankmachine2_twtpcon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_twtpcon_ready)) begin
			main_sdram_bankmachine2_twtpcon_count <= (main_sdram_bankmachine2_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine2_trccon_valid) begin
		main_sdram_bankmachine2_trccon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine2_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_trccon_ready)) begin
			main_sdram_bankmachine2_trccon_count <= (main_sdram_bankmachine2_trccon_count - 1'd1);
			if ((main_sdram_bankmachine2_trccon_count == 1'd1)) begin
				main_sdram_bankmachine2_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine2_trascon_valid) begin
		main_sdram_bankmachine2_trascon_count <= 2'd2;
		if (1'd0) begin
			main_sdram_bankmachine2_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_trascon_ready)) begin
			main_sdram_bankmachine2_trascon_count <= (main_sdram_bankmachine2_trascon_count - 1'd1);
			if ((main_sdram_bankmachine2_trascon_count == 1'd1)) begin
				main_sdram_bankmachine2_trascon_ready <= 1'd1;
			end
		end
	end
	builder_bankmachine2_state <= builder_bankmachine2_next_state;
	if (main_sdram_bankmachine3_row_close) begin
		main_sdram_bankmachine3_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine3_row_open) begin
			main_sdram_bankmachine3_row_opened <= 1'd1;
			main_sdram_bankmachine3_row <= main_sdram_bankmachine3_cmd_buffer_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable) & (~main_sdram_bankmachine3_cmd_buffer_lookahead_replace))) begin
		main_sdram_bankmachine3_cmd_buffer_lookahead_produce <= (main_sdram_bankmachine3_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (main_sdram_bankmachine3_cmd_buffer_lookahead_do_read) begin
		main_sdram_bankmachine3_cmd_buffer_lookahead_consume <= (main_sdram_bankmachine3_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & main_sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable) & (~main_sdram_bankmachine3_cmd_buffer_lookahead_replace))) begin
		if ((~main_sdram_bankmachine3_cmd_buffer_lookahead_do_read)) begin
			main_sdram_bankmachine3_cmd_buffer_lookahead_level <= (main_sdram_bankmachine3_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine3_cmd_buffer_lookahead_do_read) begin
			main_sdram_bankmachine3_cmd_buffer_lookahead_level <= (main_sdram_bankmachine3_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine3_cmd_buffer_source_valid) | main_sdram_bankmachine3_cmd_buffer_source_ready)) begin
		main_sdram_bankmachine3_cmd_buffer_source_valid <= main_sdram_bankmachine3_cmd_buffer_sink_valid;
		main_sdram_bankmachine3_cmd_buffer_source_first <= main_sdram_bankmachine3_cmd_buffer_sink_first;
		main_sdram_bankmachine3_cmd_buffer_source_last <= main_sdram_bankmachine3_cmd_buffer_sink_last;
		main_sdram_bankmachine3_cmd_buffer_source_payload_we <= main_sdram_bankmachine3_cmd_buffer_sink_payload_we;
		main_sdram_bankmachine3_cmd_buffer_source_payload_addr <= main_sdram_bankmachine3_cmd_buffer_sink_payload_addr;
	end
	if (main_sdram_bankmachine3_twtpcon_valid) begin
		main_sdram_bankmachine3_twtpcon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_twtpcon_ready)) begin
			main_sdram_bankmachine3_twtpcon_count <= (main_sdram_bankmachine3_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine3_trccon_valid) begin
		main_sdram_bankmachine3_trccon_count <= 2'd3;
		if (1'd0) begin
			main_sdram_bankmachine3_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_trccon_ready)) begin
			main_sdram_bankmachine3_trccon_count <= (main_sdram_bankmachine3_trccon_count - 1'd1);
			if ((main_sdram_bankmachine3_trccon_count == 1'd1)) begin
				main_sdram_bankmachine3_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine3_trascon_valid) begin
		main_sdram_bankmachine3_trascon_count <= 2'd2;
		if (1'd0) begin
			main_sdram_bankmachine3_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_trascon_ready)) begin
			main_sdram_bankmachine3_trascon_count <= (main_sdram_bankmachine3_trascon_count - 1'd1);
			if ((main_sdram_bankmachine3_trascon_count == 1'd1)) begin
				main_sdram_bankmachine3_trascon_ready <= 1'd1;
			end
		end
	end
	builder_bankmachine3_state <= builder_bankmachine3_next_state;
	if ((~main_sdram_en0)) begin
		main_sdram_time0 <= 5'd31;
	end else begin
		if ((~main_sdram_max_time0)) begin
			main_sdram_time0 <= (main_sdram_time0 - 1'd1);
		end
	end
	if ((~main_sdram_en1)) begin
		main_sdram_time1 <= 4'd15;
	end else begin
		if ((~main_sdram_max_time1)) begin
			main_sdram_time1 <= (main_sdram_time1 - 1'd1);
		end
	end
	if (main_sdram_choose_cmd_ce) begin
		case (main_sdram_choose_cmd_grant)
			1'd0: begin
				if (main_sdram_choose_cmd_request[1]) begin
					main_sdram_choose_cmd_grant <= 1'd1;
				end else begin
					if (main_sdram_choose_cmd_request[2]) begin
						main_sdram_choose_cmd_grant <= 2'd2;
					end else begin
						if (main_sdram_choose_cmd_request[3]) begin
							main_sdram_choose_cmd_grant <= 2'd3;
						end
					end
				end
			end
			1'd1: begin
				if (main_sdram_choose_cmd_request[2]) begin
					main_sdram_choose_cmd_grant <= 2'd2;
				end else begin
					if (main_sdram_choose_cmd_request[3]) begin
						main_sdram_choose_cmd_grant <= 2'd3;
					end else begin
						if (main_sdram_choose_cmd_request[0]) begin
							main_sdram_choose_cmd_grant <= 1'd0;
						end
					end
				end
			end
			2'd2: begin
				if (main_sdram_choose_cmd_request[3]) begin
					main_sdram_choose_cmd_grant <= 2'd3;
				end else begin
					if (main_sdram_choose_cmd_request[0]) begin
						main_sdram_choose_cmd_grant <= 1'd0;
					end else begin
						if (main_sdram_choose_cmd_request[1]) begin
							main_sdram_choose_cmd_grant <= 1'd1;
						end
					end
				end
			end
			2'd3: begin
				if (main_sdram_choose_cmd_request[0]) begin
					main_sdram_choose_cmd_grant <= 1'd0;
				end else begin
					if (main_sdram_choose_cmd_request[1]) begin
						main_sdram_choose_cmd_grant <= 1'd1;
					end else begin
						if (main_sdram_choose_cmd_request[2]) begin
							main_sdram_choose_cmd_grant <= 2'd2;
						end
					end
				end
			end
		endcase
	end
	if (main_sdram_choose_req_ce) begin
		case (main_sdram_choose_req_grant)
			1'd0: begin
				if (main_sdram_choose_req_request[1]) begin
					main_sdram_choose_req_grant <= 1'd1;
				end else begin
					if (main_sdram_choose_req_request[2]) begin
						main_sdram_choose_req_grant <= 2'd2;
					end else begin
						if (main_sdram_choose_req_request[3]) begin
							main_sdram_choose_req_grant <= 2'd3;
						end
					end
				end
			end
			1'd1: begin
				if (main_sdram_choose_req_request[2]) begin
					main_sdram_choose_req_grant <= 2'd2;
				end else begin
					if (main_sdram_choose_req_request[3]) begin
						main_sdram_choose_req_grant <= 2'd3;
					end else begin
						if (main_sdram_choose_req_request[0]) begin
							main_sdram_choose_req_grant <= 1'd0;
						end
					end
				end
			end
			2'd2: begin
				if (main_sdram_choose_req_request[3]) begin
					main_sdram_choose_req_grant <= 2'd3;
				end else begin
					if (main_sdram_choose_req_request[0]) begin
						main_sdram_choose_req_grant <= 1'd0;
					end else begin
						if (main_sdram_choose_req_request[1]) begin
							main_sdram_choose_req_grant <= 1'd1;
						end
					end
				end
			end
			2'd3: begin
				if (main_sdram_choose_req_request[0]) begin
					main_sdram_choose_req_grant <= 1'd0;
				end else begin
					if (main_sdram_choose_req_request[1]) begin
						main_sdram_choose_req_grant <= 1'd1;
					end else begin
						if (main_sdram_choose_req_request[2]) begin
							main_sdram_choose_req_grant <= 2'd2;
						end
					end
				end
			end
		endcase
	end
	main_sdram_dfi_p0_cs_n <= 1'd0;
	main_sdram_dfi_p0_bank <= builder_sync_rhs_array_muxed0;
	main_sdram_dfi_p0_address <= builder_sync_rhs_array_muxed1;
	main_sdram_dfi_p0_cas_n <= (~builder_sync_rhs_array_muxed2);
	main_sdram_dfi_p0_ras_n <= (~builder_sync_rhs_array_muxed3);
	main_sdram_dfi_p0_we_n <= (~builder_sync_rhs_array_muxed4);
	main_sdram_dfi_p0_rddata_en <= builder_sync_rhs_array_muxed5;
	main_sdram_dfi_p0_wrdata_en <= builder_sync_rhs_array_muxed6;
	if (main_sdram_trrdcon_valid) begin
		main_sdram_trrdcon_count <= 1'd0;
		if (1'd1) begin
			main_sdram_trrdcon_ready <= 1'd1;
		end else begin
			main_sdram_trrdcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_trrdcon_ready)) begin
			main_sdram_trrdcon_count <= (main_sdram_trrdcon_count - 1'd1);
			if ((main_sdram_trrdcon_count == 1'd1)) begin
				main_sdram_trrdcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_tccdcon_valid) begin
		main_sdram_tccdcon_count <= 1'd0;
		if (1'd1) begin
			main_sdram_tccdcon_ready <= 1'd1;
		end else begin
			main_sdram_tccdcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_tccdcon_ready)) begin
			main_sdram_tccdcon_count <= (main_sdram_tccdcon_count - 1'd1);
			if ((main_sdram_tccdcon_count == 1'd1)) begin
				main_sdram_tccdcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_twtrcon_valid) begin
		main_sdram_twtrcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_twtrcon_ready <= 1'd1;
		end else begin
			main_sdram_twtrcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_twtrcon_ready)) begin
			main_sdram_twtrcon_count <= (main_sdram_twtrcon_count - 1'd1);
			if ((main_sdram_twtrcon_count == 1'd1)) begin
				main_sdram_twtrcon_ready <= 1'd1;
			end
		end
	end
	builder_multiplexer_state <= builder_multiplexer_next_state;
	builder_new_master_wdata_ready0 <= ((((1'd0 | ((builder_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_wdata_ready)) | ((builder_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_wdata_ready)) | ((builder_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_wdata_ready)) | ((builder_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_wdata_ready));
	builder_new_master_wdata_ready1 <= ((((1'd0 | ((builder_roundrobin0_grant == 1'd1) & main_sdram_interface_bank0_wdata_ready)) | ((builder_roundrobin1_grant == 1'd1) & main_sdram_interface_bank1_wdata_ready)) | ((builder_roundrobin2_grant == 1'd1) & main_sdram_interface_bank2_wdata_ready)) | ((builder_roundrobin3_grant == 1'd1) & main_sdram_interface_bank3_wdata_ready));
	builder_new_master_rdata_valid0 <= ((((1'd0 | ((builder_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_rdata_valid)) | ((builder_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_rdata_valid)) | ((builder_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_rdata_valid)) | ((builder_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_rdata_valid));
	builder_new_master_rdata_valid1 <= builder_new_master_rdata_valid0;
	builder_new_master_rdata_valid2 <= builder_new_master_rdata_valid1;
	builder_new_master_rdata_valid3 <= builder_new_master_rdata_valid2;
	builder_new_master_rdata_valid4 <= ((((1'd0 | ((builder_roundrobin0_grant == 1'd1) & main_sdram_interface_bank0_rdata_valid)) | ((builder_roundrobin1_grant == 1'd1) & main_sdram_interface_bank1_rdata_valid)) | ((builder_roundrobin2_grant == 1'd1) & main_sdram_interface_bank2_rdata_valid)) | ((builder_roundrobin3_grant == 1'd1) & main_sdram_interface_bank3_rdata_valid));
	builder_new_master_rdata_valid5 <= builder_new_master_rdata_valid4;
	builder_new_master_rdata_valid6 <= builder_new_master_rdata_valid5;
	builder_new_master_rdata_valid7 <= builder_new_master_rdata_valid6;
	if (builder_roundrobin0_ce) begin
		case (builder_roundrobin0_grant)
			1'd0: begin
				if (builder_roundrobin0_request[1]) begin
					builder_roundrobin0_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (builder_roundrobin0_request[0]) begin
					builder_roundrobin0_grant <= 1'd0;
				end
			end
		endcase
	end
	if (builder_roundrobin1_ce) begin
		case (builder_roundrobin1_grant)
			1'd0: begin
				if (builder_roundrobin1_request[1]) begin
					builder_roundrobin1_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (builder_roundrobin1_request[0]) begin
					builder_roundrobin1_grant <= 1'd0;
				end
			end
		endcase
	end
	if (builder_roundrobin2_ce) begin
		case (builder_roundrobin2_grant)
			1'd0: begin
				if (builder_roundrobin2_request[1]) begin
					builder_roundrobin2_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (builder_roundrobin2_request[0]) begin
					builder_roundrobin2_grant <= 1'd0;
				end
			end
		endcase
	end
	if (builder_roundrobin3_ce) begin
		case (builder_roundrobin3_grant)
			1'd0: begin
				if (builder_roundrobin3_request[1]) begin
					builder_roundrobin3_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (builder_roundrobin3_request[0]) begin
					builder_roundrobin3_grant <= 1'd0;
				end
			end
		endcase
	end
	main_adr_offset_r <= main_wb_sdram_adr[1:0];
	builder_fullmemorywe_state <= builder_fullmemorywe_next_state;
	builder_litedramwishbone2native_litedramnativeportconverter_state <= builder_litedramwishbone2native_litedramnativeportconverter_next_state;
	if (main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value_ce) begin
		main_wishbone_bridge_count <= main_wishbone_bridge_count_litedramwishbone2native_litedramnativeportconverter_next_value;
	end
	if ((main_wishbone_bridge_wdata_converter_converter_source_valid & main_wishbone_bridge_wdata_converter_converter_source_ready)) begin
		if (main_wishbone_bridge_wdata_converter_converter_last) begin
			main_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
		end else begin
			main_wishbone_bridge_wdata_converter_converter_mux <= (main_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
		end
	end
	if (main_wishbone_bridge_rdata_converter_converter_source_ready) begin
		main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		if (((main_wishbone_bridge_rdata_converter_converter_demux == 3'd7) | main_wishbone_bridge_rdata_converter_converter_sink_last)) begin
			main_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
			main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
		end else begin
			main_wishbone_bridge_rdata_converter_converter_demux <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
		end
	end
	if ((main_wishbone_bridge_rdata_converter_converter_source_valid & main_wishbone_bridge_rdata_converter_converter_source_ready)) begin
		if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= main_wishbone_bridge_rdata_converter_converter_sink_first;
			main_wishbone_bridge_rdata_converter_converter_source_last <= main_wishbone_bridge_rdata_converter_converter_sink_last;
		end else begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
			main_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
		end
	end else begin
		if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= (main_wishbone_bridge_rdata_converter_converter_sink_first | main_wishbone_bridge_rdata_converter_converter_source_first);
			main_wishbone_bridge_rdata_converter_converter_source_last <= (main_wishbone_bridge_rdata_converter_converter_sink_last | main_wishbone_bridge_rdata_converter_converter_source_last);
		end
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		case (main_wishbone_bridge_rdata_converter_converter_demux)
			1'd0: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[15:0] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			1'd1: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[31:16] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			2'd2: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[47:32] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			2'd3: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[63:48] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			3'd4: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[79:64] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			3'd5: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[95:80] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			3'd6: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[111:96] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			3'd7: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[127:112] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
		endcase
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
	end
	builder_litedramwishbone2native_fsm_state <= builder_litedramwishbone2native_fsm_next_state;
	if (main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value_ce) begin
		main_wishbone_bridge_aborted <= main_wishbone_bridge_aborted_litedramwishbone2native_fsm_next_value;
	end
	if (main_vfb_dma_request_issued) begin
		if ((~main_vfb_dma_data_dequeued)) begin
			main_vfb_dma_rsv_level <= (main_vfb_dma_rsv_level + 1'd1);
		end
	end else begin
		if (main_vfb_dma_data_dequeued) begin
			main_vfb_dma_rsv_level <= (main_vfb_dma_rsv_level - 1'd1);
		end
	end
	if (main_vfb_dma_fifo_syncfifo_re) begin
		main_vfb_dma_fifo_readable <= 1'd1;
	end else begin
		if (main_vfb_dma_fifo_re) begin
			main_vfb_dma_fifo_readable <= 1'd0;
		end
	end
	if (((main_vfb_dma_fifo_syncfifo_we & main_vfb_dma_fifo_syncfifo_writable) & (~main_vfb_dma_fifo_replace))) begin
		main_vfb_dma_fifo_produce <= (main_vfb_dma_fifo_produce + 1'd1);
	end
	if (main_vfb_dma_fifo_do_read) begin
		main_vfb_dma_fifo_consume <= (main_vfb_dma_fifo_consume + 1'd1);
	end
	if (((main_vfb_dma_fifo_syncfifo_we & main_vfb_dma_fifo_syncfifo_writable) & (~main_vfb_dma_fifo_replace))) begin
		if ((~main_vfb_dma_fifo_do_read)) begin
			main_vfb_dma_fifo_level0 <= (main_vfb_dma_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_vfb_dma_fifo_do_read) begin
			main_vfb_dma_fifo_level0 <= (main_vfb_dma_fifo_level0 - 1'd1);
		end
	end
	builder_videoframebuffer_state <= builder_videoframebuffer_next_state;
	if (main_vfb_offset_videoframebuffer_next_value_ce) begin
		main_vfb_offset <= main_vfb_offset_videoframebuffer_next_value;
	end
	if (main_vfb_reset) begin
		main_vfb_offset <= 24'd0;
		builder_videoframebuffer_state <= 2'd0;
	end
	if (main_vfb_conv_converter_source_ready) begin
		main_vfb_conv_converter_strobe_all <= 1'd0;
	end
	if (main_vfb_conv_converter_load_part) begin
		if (((main_vfb_conv_converter_demux == 1'd1) | main_vfb_conv_converter_sink_last)) begin
			main_vfb_conv_converter_demux <= 1'd0;
			main_vfb_conv_converter_strobe_all <= 1'd1;
		end else begin
			main_vfb_conv_converter_demux <= (main_vfb_conv_converter_demux + 1'd1);
		end
	end
	if ((main_vfb_conv_converter_source_valid & main_vfb_conv_converter_source_ready)) begin
		if ((main_vfb_conv_converter_sink_valid & main_vfb_conv_converter_sink_ready)) begin
			main_vfb_conv_converter_source_first <= main_vfb_conv_converter_sink_first;
			main_vfb_conv_converter_source_last <= main_vfb_conv_converter_sink_last;
		end else begin
			main_vfb_conv_converter_source_first <= 1'd0;
			main_vfb_conv_converter_source_last <= 1'd0;
		end
	end else begin
		if ((main_vfb_conv_converter_sink_valid & main_vfb_conv_converter_sink_ready)) begin
			main_vfb_conv_converter_source_first <= (main_vfb_conv_converter_sink_first | main_vfb_conv_converter_source_first);
			main_vfb_conv_converter_source_last <= (main_vfb_conv_converter_sink_last | main_vfb_conv_converter_source_last);
		end
	end
	if (main_vfb_conv_converter_load_part) begin
		case (main_vfb_conv_converter_demux)
			1'd0: begin
				main_vfb_conv_converter_source_payload_data[15:0] <= main_vfb_conv_converter_sink_payload_data;
			end
			1'd1: begin
				main_vfb_conv_converter_source_payload_data[31:16] <= main_vfb_conv_converter_sink_payload_data;
			end
		endcase
	end
	if (main_vfb_conv_converter_load_part) begin
		main_vfb_conv_converter_source_payload_valid_token_count <= (main_vfb_conv_converter_demux + 1'd1);
	end
	main_vfb_cdc_cdc_graycounter0_q_binary <= main_vfb_cdc_cdc_graycounter0_q_next_binary;
	main_vfb_cdc_cdc_graycounter0_q <= main_vfb_cdc_cdc_graycounter0_q_next;
	if (main_done) begin
		main_chaser <= {main_chaser, (~main_chaser[7])};
	end
	if (main_re) begin
		main_mode <= 1'd1;
	end
	if (main_wait) begin
		if ((~main_done)) begin
			main_count <= (main_count - 1'd1);
		end
	end else begin
		main_count <= 22'd3125000;
	end
	card_detect_d <= card_detect_status0;
	card_detect_irq <= (card_detect_status0 ^ card_detect_d);
	if ((~clocker_stop)) begin
		clocker_clks <= (clocker_clks + 1'd1);
	end
	clocker_clk_d <= clocker_clk1;
	if (clocker_clk_d) begin
		clocker_ce_delayed <= clocker_clk_en;
	end
	builder_sdphyinit_state <= builder_sdphyinit_next_state;
	if (init_count_sdphyinit_next_value_ce) begin
		init_count <= init_count_sdphyinit_next_value;
	end
	builder_sdphycmdw_state <= builder_sdphycmdw_next_state;
	if (cmdw_count_sdphycmdw_next_value_ce) begin
		cmdw_count <= cmdw_count_sdphycmdw_next_value;
	end
	if (cmdr_cmdr_pads_in_valid) begin
		cmdr_cmdr_run <= (cmdr_cmdr_start | cmdr_cmdr_run);
	end
	if (cmdr_cmdr_converter_source_ready) begin
		cmdr_cmdr_converter_strobe_all <= 1'd0;
	end
	if (cmdr_cmdr_converter_load_part) begin
		if (((cmdr_cmdr_converter_demux == 3'd7) | cmdr_cmdr_converter_sink_last)) begin
			cmdr_cmdr_converter_demux <= 1'd0;
			cmdr_cmdr_converter_strobe_all <= 1'd1;
		end else begin
			cmdr_cmdr_converter_demux <= (cmdr_cmdr_converter_demux + 1'd1);
		end
	end
	if ((cmdr_cmdr_converter_source_valid & cmdr_cmdr_converter_source_ready)) begin
		if ((cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready)) begin
			cmdr_cmdr_converter_source_first <= cmdr_cmdr_converter_sink_first;
			cmdr_cmdr_converter_source_last <= cmdr_cmdr_converter_sink_last;
		end else begin
			cmdr_cmdr_converter_source_first <= 1'd0;
			cmdr_cmdr_converter_source_last <= 1'd0;
		end
	end else begin
		if ((cmdr_cmdr_converter_sink_valid & cmdr_cmdr_converter_sink_ready)) begin
			cmdr_cmdr_converter_source_first <= (cmdr_cmdr_converter_sink_first | cmdr_cmdr_converter_source_first);
			cmdr_cmdr_converter_source_last <= (cmdr_cmdr_converter_sink_last | cmdr_cmdr_converter_source_last);
		end
	end
	if (cmdr_cmdr_converter_load_part) begin
		case (cmdr_cmdr_converter_demux)
			1'd0: begin
				cmdr_cmdr_converter_source_payload_data[7] <= cmdr_cmdr_converter_sink_payload_data;
			end
			1'd1: begin
				cmdr_cmdr_converter_source_payload_data[6] <= cmdr_cmdr_converter_sink_payload_data;
			end
			2'd2: begin
				cmdr_cmdr_converter_source_payload_data[5] <= cmdr_cmdr_converter_sink_payload_data;
			end
			2'd3: begin
				cmdr_cmdr_converter_source_payload_data[4] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd4: begin
				cmdr_cmdr_converter_source_payload_data[3] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd5: begin
				cmdr_cmdr_converter_source_payload_data[2] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd6: begin
				cmdr_cmdr_converter_source_payload_data[1] <= cmdr_cmdr_converter_sink_payload_data;
			end
			3'd7: begin
				cmdr_cmdr_converter_source_payload_data[0] <= cmdr_cmdr_converter_sink_payload_data;
			end
		endcase
	end
	if (cmdr_cmdr_converter_load_part) begin
		cmdr_cmdr_converter_source_payload_valid_token_count <= (cmdr_cmdr_converter_demux + 1'd1);
	end
	if (((~cmdr_cmdr_buf_source_valid) | cmdr_cmdr_buf_source_ready)) begin
		cmdr_cmdr_buf_source_valid <= cmdr_cmdr_buf_sink_valid;
		cmdr_cmdr_buf_source_first <= cmdr_cmdr_buf_sink_first;
		cmdr_cmdr_buf_source_last <= cmdr_cmdr_buf_sink_last;
		cmdr_cmdr_buf_source_payload_data <= cmdr_cmdr_buf_sink_payload_data;
	end
	if (cmdr_cmdr_reset) begin
		cmdr_cmdr_run <= 1'd0;
		cmdr_cmdr_converter_source_payload_data <= 8'd0;
		cmdr_cmdr_converter_source_payload_valid_token_count <= 4'd0;
		cmdr_cmdr_converter_demux <= 3'd0;
		cmdr_cmdr_converter_strobe_all <= 1'd0;
		cmdr_cmdr_buf_source_valid <= 1'd0;
		cmdr_cmdr_buf_source_payload_data <= 8'd0;
	end
	builder_sdphycmdr_state <= builder_sdphycmdr_next_state;
	if (cmdr_timeout_sdphycmdr_next_value_ce0) begin
		cmdr_timeout <= cmdr_timeout_sdphycmdr_next_value0;
	end
	if (cmdr_count_sdphycmdr_next_value_ce1) begin
		cmdr_count <= cmdr_count_sdphycmdr_next_value1;
	end
	if (cmdr_busy_sdphycmdr_next_value_ce2) begin
		cmdr_busy <= cmdr_busy_sdphycmdr_next_value2;
	end
	if (cmdr_cmdr_reset_sdphycmdr_next_value_ce3) begin
		cmdr_cmdr_reset <= cmdr_cmdr_reset_sdphycmdr_next_value3;
	end
	if (dataw_crc_pads_in_valid) begin
		dataw_crc_run <= (dataw_crc_start | dataw_crc_run);
	end
	if (dataw_crc_converter_source_ready) begin
		dataw_crc_converter_strobe_all <= 1'd0;
	end
	if (dataw_crc_converter_load_part) begin
		if (((dataw_crc_converter_demux == 3'd7) | dataw_crc_converter_sink_last)) begin
			dataw_crc_converter_demux <= 1'd0;
			dataw_crc_converter_strobe_all <= 1'd1;
		end else begin
			dataw_crc_converter_demux <= (dataw_crc_converter_demux + 1'd1);
		end
	end
	if ((dataw_crc_converter_source_valid & dataw_crc_converter_source_ready)) begin
		if ((dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready)) begin
			dataw_crc_converter_source_first <= dataw_crc_converter_sink_first;
			dataw_crc_converter_source_last <= dataw_crc_converter_sink_last;
		end else begin
			dataw_crc_converter_source_first <= 1'd0;
			dataw_crc_converter_source_last <= 1'd0;
		end
	end else begin
		if ((dataw_crc_converter_sink_valid & dataw_crc_converter_sink_ready)) begin
			dataw_crc_converter_source_first <= (dataw_crc_converter_sink_first | dataw_crc_converter_source_first);
			dataw_crc_converter_source_last <= (dataw_crc_converter_sink_last | dataw_crc_converter_source_last);
		end
	end
	if (dataw_crc_converter_load_part) begin
		case (dataw_crc_converter_demux)
			1'd0: begin
				dataw_crc_converter_source_payload_data[7] <= dataw_crc_converter_sink_payload_data;
			end
			1'd1: begin
				dataw_crc_converter_source_payload_data[6] <= dataw_crc_converter_sink_payload_data;
			end
			2'd2: begin
				dataw_crc_converter_source_payload_data[5] <= dataw_crc_converter_sink_payload_data;
			end
			2'd3: begin
				dataw_crc_converter_source_payload_data[4] <= dataw_crc_converter_sink_payload_data;
			end
			3'd4: begin
				dataw_crc_converter_source_payload_data[3] <= dataw_crc_converter_sink_payload_data;
			end
			3'd5: begin
				dataw_crc_converter_source_payload_data[2] <= dataw_crc_converter_sink_payload_data;
			end
			3'd6: begin
				dataw_crc_converter_source_payload_data[1] <= dataw_crc_converter_sink_payload_data;
			end
			3'd7: begin
				dataw_crc_converter_source_payload_data[0] <= dataw_crc_converter_sink_payload_data;
			end
		endcase
	end
	if (dataw_crc_converter_load_part) begin
		dataw_crc_converter_source_payload_valid_token_count <= (dataw_crc_converter_demux + 1'd1);
	end
	if (((~dataw_crc_buf_source_valid) | dataw_crc_buf_source_ready)) begin
		dataw_crc_buf_source_valid <= dataw_crc_buf_sink_valid;
		dataw_crc_buf_source_first <= dataw_crc_buf_sink_first;
		dataw_crc_buf_source_last <= dataw_crc_buf_sink_last;
		dataw_crc_buf_source_payload_data <= dataw_crc_buf_sink_payload_data;
	end
	if (dataw_crc_reset) begin
		dataw_crc_run <= 1'd0;
		dataw_crc_converter_source_payload_data <= 8'd0;
		dataw_crc_converter_source_payload_valid_token_count <= 4'd0;
		dataw_crc_converter_demux <= 3'd0;
		dataw_crc_converter_strobe_all <= 1'd0;
		dataw_crc_buf_source_valid <= 1'd0;
		dataw_crc_buf_source_payload_data <= 8'd0;
	end
	builder_sdphydataw_state <= builder_sdphydataw_next_state;
	if (dataw_accepted1_sdphydataw_next_value_ce0) begin
		dataw_accepted1 <= dataw_accepted1_sdphydataw_next_value0;
	end
	if (dataw_crc_error1_sdphydataw_next_value_ce1) begin
		dataw_crc_error1 <= dataw_crc_error1_sdphydataw_next_value1;
	end
	if (dataw_write_error1_sdphydataw_next_value_ce2) begin
		dataw_write_error1 <= dataw_write_error1_sdphydataw_next_value2;
	end
	if (dataw_count_sdphydataw_next_value_ce3) begin
		dataw_count <= dataw_count_sdphydataw_next_value3;
	end
	if (datar_datar_pads_in_valid) begin
		datar_datar_run <= (datar_datar_start | datar_datar_run);
	end
	if (datar_datar_converter_source_ready) begin
		datar_datar_converter_strobe_all <= 1'd0;
	end
	if (datar_datar_converter_load_part) begin
		if (((datar_datar_converter_demux == 1'd1) | datar_datar_converter_sink_last)) begin
			datar_datar_converter_demux <= 1'd0;
			datar_datar_converter_strobe_all <= 1'd1;
		end else begin
			datar_datar_converter_demux <= (datar_datar_converter_demux + 1'd1);
		end
	end
	if ((datar_datar_converter_source_valid & datar_datar_converter_source_ready)) begin
		if ((datar_datar_converter_sink_valid & datar_datar_converter_sink_ready)) begin
			datar_datar_converter_source_first <= datar_datar_converter_sink_first;
			datar_datar_converter_source_last <= datar_datar_converter_sink_last;
		end else begin
			datar_datar_converter_source_first <= 1'd0;
			datar_datar_converter_source_last <= 1'd0;
		end
	end else begin
		if ((datar_datar_converter_sink_valid & datar_datar_converter_sink_ready)) begin
			datar_datar_converter_source_first <= (datar_datar_converter_sink_first | datar_datar_converter_source_first);
			datar_datar_converter_source_last <= (datar_datar_converter_sink_last | datar_datar_converter_source_last);
		end
	end
	if (datar_datar_converter_load_part) begin
		case (datar_datar_converter_demux)
			1'd0: begin
				datar_datar_converter_source_payload_data[7:4] <= datar_datar_converter_sink_payload_data;
			end
			1'd1: begin
				datar_datar_converter_source_payload_data[3:0] <= datar_datar_converter_sink_payload_data;
			end
		endcase
	end
	if (datar_datar_converter_load_part) begin
		datar_datar_converter_source_payload_valid_token_count <= (datar_datar_converter_demux + 1'd1);
	end
	if (((~datar_datar_buf_source_valid) | datar_datar_buf_source_ready)) begin
		datar_datar_buf_source_valid <= datar_datar_buf_sink_valid;
		datar_datar_buf_source_first <= datar_datar_buf_sink_first;
		datar_datar_buf_source_last <= datar_datar_buf_sink_last;
		datar_datar_buf_source_payload_data <= datar_datar_buf_sink_payload_data;
	end
	if (datar_datar_reset) begin
		datar_datar_run <= 1'd0;
		datar_datar_converter_source_payload_data <= 8'd0;
		datar_datar_converter_source_payload_valid_token_count <= 2'd0;
		datar_datar_converter_demux <= 1'd0;
		datar_datar_converter_strobe_all <= 1'd0;
		datar_datar_buf_source_valid <= 1'd0;
		datar_datar_buf_source_payload_data <= 8'd0;
	end
	builder_sdphydatar_state <= builder_sdphydatar_next_state;
	if (datar_count_sdphydatar_next_value_ce0) begin
		datar_count <= datar_count_sdphydatar_next_value0;
	end
	if (datar_timeout_sdphydatar_next_value_ce1) begin
		datar_timeout <= datar_timeout_sdphydatar_next_value1;
	end
	if (datar_datar_reset_sdphydatar_next_value_ce2) begin
		datar_datar_reset <= datar_datar_reset_sdphydatar_next_value2;
	end
	clocker_clk_delay <= {clocker_clk_delay, clocker_clk0};
	sdpads_data_i_ce <= (clocker_clk_delay[1] & (~clocker_clk_delay[0]));
	if (sdcore_crc7_inserter_reset) begin
		sdcore_crc7_inserter_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc7_inserter_enable) begin
			sdcore_crc7_inserter_reg0 <= sdcore_crc7_inserter_reg40;
		end
	end
	if (sdcore_crc16_inserter_crc0_reset) begin
		sdcore_crc16_inserter_crc0_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc0_enable) begin
			sdcore_crc16_inserter_crc0_reg0 <= sdcore_crc16_inserter_crc0_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc1_reset) begin
		sdcore_crc16_inserter_crc1_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc1_enable) begin
			sdcore_crc16_inserter_crc1_reg0 <= sdcore_crc16_inserter_crc1_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc2_reset) begin
		sdcore_crc16_inserter_crc2_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc2_enable) begin
			sdcore_crc16_inserter_crc2_reg0 <= sdcore_crc16_inserter_crc2_reg2;
		end
	end
	if (sdcore_crc16_inserter_crc3_reset) begin
		sdcore_crc16_inserter_crc3_reg0 <= 1'd0;
	end else begin
		if (sdcore_crc16_inserter_crc3_enable) begin
			sdcore_crc16_inserter_crc3_reg0 <= sdcore_crc16_inserter_crc3_reg2;
		end
	end
	builder_sdcore_crc16inserter_state <= builder_sdcore_crc16inserter_next_state;
	if (sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value_ce) begin
		sdcore_crc16_inserter_count <= sdcore_crc16_inserter_count_sdcore_crc16inserter_next_value;
	end
	if (((sdcore_fifo_syncfifo_we & sdcore_fifo_syncfifo_writable) & (~sdcore_fifo_replace))) begin
		sdcore_fifo_produce <= (sdcore_fifo_produce + 1'd1);
	end
	if (sdcore_fifo_do_read) begin
		sdcore_fifo_consume <= (sdcore_fifo_consume + 1'd1);
	end
	if (((sdcore_fifo_syncfifo_we & sdcore_fifo_syncfifo_writable) & (~sdcore_fifo_replace))) begin
		if ((~sdcore_fifo_do_read)) begin
			sdcore_fifo_level <= (sdcore_fifo_level + 1'd1);
		end
	end else begin
		if (sdcore_fifo_do_read) begin
			sdcore_fifo_level <= (sdcore_fifo_level - 1'd1);
		end
	end
	if (sdcore_fifo_reset) begin
		sdcore_fifo_level <= 4'd0;
		sdcore_fifo_produce <= 3'd0;
		sdcore_fifo_consume <= 3'd0;
	end
	builder_sdcore_fsm_state <= builder_sdcore_fsm_next_state;
	if (sdcore_cmd_done_sdcore_fsm_next_value_ce0) begin
		sdcore_cmd_done <= sdcore_cmd_done_sdcore_fsm_next_value0;
	end
	if (sdcore_data_done_sdcore_fsm_next_value_ce1) begin
		sdcore_data_done <= sdcore_data_done_sdcore_fsm_next_value1;
	end
	if (sdcore_cmd_count_sdcore_fsm_next_value_ce2) begin
		sdcore_cmd_count <= sdcore_cmd_count_sdcore_fsm_next_value2;
	end
	if (sdcore_data_count_sdcore_fsm_next_value_ce3) begin
		sdcore_data_count <= sdcore_data_count_sdcore_fsm_next_value3;
	end
	if (sdcore_cmd_error_sdcore_fsm_next_value_ce4) begin
		sdcore_cmd_error <= sdcore_cmd_error_sdcore_fsm_next_value4;
	end
	if (sdcore_cmd_timeout_sdcore_fsm_next_value_ce5) begin
		sdcore_cmd_timeout <= sdcore_cmd_timeout_sdcore_fsm_next_value5;
	end
	if (sdcore_data_error_sdcore_fsm_next_value_ce6) begin
		sdcore_data_error <= sdcore_data_error_sdcore_fsm_next_value6;
	end
	if (sdcore_data_timeout_sdcore_fsm_next_value_ce7) begin
		sdcore_data_timeout <= sdcore_data_timeout_sdcore_fsm_next_value7;
	end
	if (sdcore_cmd_response_status_sdcore_fsm_next_value_ce8) begin
		sdcore_cmd_response_status <= sdcore_cmd_response_status_sdcore_fsm_next_value8;
	end
	if ((~sdblock2mem_wishbonedmawriter_enable_storage)) begin
		sdblock2mem_connect <= 1'd0;
	end else begin
		if (sdblock2mem_start) begin
			sdblock2mem_connect <= 1'd1;
		end
	end
	sdblock2mem_done_d <= sdblock2mem_wishbonedmawriter_done_status;
	sdblock2mem_irq <= (sdblock2mem_wishbonedmawriter_done_status & (~sdblock2mem_done_d));
	if (sdblock2mem_fifo_syncfifo_re) begin
		sdblock2mem_fifo_readable <= 1'd1;
	end else begin
		if (sdblock2mem_fifo_re) begin
			sdblock2mem_fifo_readable <= 1'd0;
		end
	end
	if (((sdblock2mem_fifo_syncfifo_we & sdblock2mem_fifo_syncfifo_writable) & (~sdblock2mem_fifo_replace))) begin
		sdblock2mem_fifo_produce <= (sdblock2mem_fifo_produce + 1'd1);
	end
	if (sdblock2mem_fifo_do_read) begin
		sdblock2mem_fifo_consume <= (sdblock2mem_fifo_consume + 1'd1);
	end
	if (((sdblock2mem_fifo_syncfifo_we & sdblock2mem_fifo_syncfifo_writable) & (~sdblock2mem_fifo_replace))) begin
		if ((~sdblock2mem_fifo_do_read)) begin
			sdblock2mem_fifo_level0 <= (sdblock2mem_fifo_level0 + 1'd1);
		end
	end else begin
		if (sdblock2mem_fifo_do_read) begin
			sdblock2mem_fifo_level0 <= (sdblock2mem_fifo_level0 - 1'd1);
		end
	end
	if (sdblock2mem_converter_source_ready) begin
		sdblock2mem_converter_strobe_all <= 1'd0;
	end
	if (sdblock2mem_converter_load_part) begin
		if (((sdblock2mem_converter_demux == 2'd3) | sdblock2mem_converter_sink_last)) begin
			sdblock2mem_converter_demux <= 1'd0;
			sdblock2mem_converter_strobe_all <= 1'd1;
		end else begin
			sdblock2mem_converter_demux <= (sdblock2mem_converter_demux + 1'd1);
		end
	end
	if ((sdblock2mem_converter_source_valid & sdblock2mem_converter_source_ready)) begin
		if ((sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready)) begin
			sdblock2mem_converter_source_first <= sdblock2mem_converter_sink_first;
			sdblock2mem_converter_source_last <= sdblock2mem_converter_sink_last;
		end else begin
			sdblock2mem_converter_source_first <= 1'd0;
			sdblock2mem_converter_source_last <= 1'd0;
		end
	end else begin
		if ((sdblock2mem_converter_sink_valid & sdblock2mem_converter_sink_ready)) begin
			sdblock2mem_converter_source_first <= (sdblock2mem_converter_sink_first | sdblock2mem_converter_source_first);
			sdblock2mem_converter_source_last <= (sdblock2mem_converter_sink_last | sdblock2mem_converter_source_last);
		end
	end
	if (sdblock2mem_converter_load_part) begin
		case (sdblock2mem_converter_demux)
			1'd0: begin
				sdblock2mem_converter_source_payload_data[31:24] <= sdblock2mem_converter_sink_payload_data;
			end
			1'd1: begin
				sdblock2mem_converter_source_payload_data[23:16] <= sdblock2mem_converter_sink_payload_data;
			end
			2'd2: begin
				sdblock2mem_converter_source_payload_data[15:8] <= sdblock2mem_converter_sink_payload_data;
			end
			2'd3: begin
				sdblock2mem_converter_source_payload_data[7:0] <= sdblock2mem_converter_sink_payload_data;
			end
		endcase
	end
	if (sdblock2mem_converter_load_part) begin
		sdblock2mem_converter_source_payload_valid_token_count <= (sdblock2mem_converter_demux + 1'd1);
	end
	builder_sdblock2memdma_state <= builder_sdblock2memdma_next_state;
	if (sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value_ce) begin
		sdblock2mem_wishbonedmawriter_offset <= sdblock2mem_wishbonedmawriter_offset_sdblock2memdma_next_value;
	end
	if (sdblock2mem_wishbonedmawriter_reset) begin
		sdblock2mem_wishbonedmawriter_offset <= 32'd0;
		builder_sdblock2memdma_state <= 2'd0;
	end
	if ((sdmem2block_source_source_valid0 & sdmem2block_source_source_ready0)) begin
		sdmem2block_count <= (sdmem2block_count + 1'd1);
		if (sdmem2block_source_source_last0) begin
			sdmem2block_count <= 1'd0;
		end
	end
	sdmem2block_done_d <= sdmem2block_dma_done_status;
	sdmem2block_irq <= (sdmem2block_dma_done_status & (~sdmem2block_done_d));
	builder_sdmem2blockdma_fsm_state <= builder_sdmem2blockdma_fsm_next_state;
	if (sdmem2block_dma_data_sdmem2blockdma_fsm_next_value_ce) begin
		sdmem2block_dma_data <= sdmem2block_dma_data_sdmem2blockdma_fsm_next_value;
	end
	builder_sdmem2blockdma_resetinserter_state <= builder_sdmem2blockdma_resetinserter_next_state;
	if (sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value_ce) begin
		sdmem2block_dma_offset <= sdmem2block_dma_offset_sdmem2blockdma_resetinserter_next_value;
	end
	if (sdmem2block_dma_reset) begin
		sdmem2block_dma_offset <= 32'd0;
		builder_sdmem2blockdma_resetinserter_state <= 2'd0;
	end
	if ((sdmem2block_converter_source_valid & sdmem2block_converter_source_ready)) begin
		if (sdmem2block_converter_last) begin
			sdmem2block_converter_mux <= 1'd0;
		end else begin
			sdmem2block_converter_mux <= (sdmem2block_converter_mux + 1'd1);
		end
	end
	if (sdmem2block_fifo_syncfifo_re) begin
		sdmem2block_fifo_readable <= 1'd1;
	end else begin
		if (sdmem2block_fifo_re) begin
			sdmem2block_fifo_readable <= 1'd0;
		end
	end
	if (((sdmem2block_fifo_syncfifo_we & sdmem2block_fifo_syncfifo_writable) & (~sdmem2block_fifo_replace))) begin
		sdmem2block_fifo_produce <= (sdmem2block_fifo_produce + 1'd1);
	end
	if (sdmem2block_fifo_do_read) begin
		sdmem2block_fifo_consume <= (sdmem2block_fifo_consume + 1'd1);
	end
	if (((sdmem2block_fifo_syncfifo_we & sdmem2block_fifo_syncfifo_writable) & (~sdmem2block_fifo_replace))) begin
		if ((~sdmem2block_fifo_do_read)) begin
			sdmem2block_fifo_level0 <= (sdmem2block_fifo_level0 + 1'd1);
		end
	end else begin
		if (sdmem2block_fifo_do_read) begin
			sdmem2block_fifo_level0 <= (sdmem2block_fifo_level0 - 1'd1);
		end
	end
	if (card_detect_clear) begin
		card_detect_pending <= 1'd0;
	end
	if (card_detect_trigger) begin
		card_detect_pending <= 1'd1;
	end
	if (block2mem_dma_clear) begin
		block2mem_dma_pending <= 1'd0;
	end
	if (block2mem_dma_trigger) begin
		block2mem_dma_pending <= 1'd1;
	end
	if (mem2block_dma_clear) begin
		mem2block_dma_pending <= 1'd0;
	end
	if (mem2block_dma_trigger) begin
		mem2block_dma_pending <= 1'd1;
	end
	builder_state <= builder_next_state;
	if (builder_soclinux_dat_w_next_value_ce0) begin
		builder_soclinux_dat_w <= builder_soclinux_dat_w_next_value0;
	end
	if (builder_soclinux_adr_next_value_ce1) begin
		builder_soclinux_adr <= builder_soclinux_adr_next_value1;
	end
	if (builder_soclinux_we_next_value_ce2) begin
		builder_soclinux_we <= builder_soclinux_we_next_value2;
	end
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end else begin
					if (builder_request[2]) begin
						builder_grant <= 2'd2;
					end
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[2]) begin
					builder_grant <= 2'd2;
				end else begin
					if (builder_request[0]) begin
						builder_grant <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			if ((~builder_request[2])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end else begin
					if (builder_request[1]) begin
						builder_grant <= 1'd1;
					end
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_reset0_re) begin
		main_soclinux_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
	end
	main_soclinux_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
	if (builder_csr_bankarray_csrbank0_scratch0_re) begin
		main_soclinux_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
	end
	main_soclinux_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
	main_soclinux_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_out0_re) begin
		main_storage[7:0] <= builder_csr_bankarray_csrbank1_out0_r;
	end
	main_re <= builder_csr_bankarray_csrbank1_out0_re;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_base1_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_base0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_length0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_enable0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_done_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_loop0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_dma_offset_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank2_dma_base1_re) begin
		sdblock2mem_wishbonedmawriter_base_storage[63:32] <= builder_csr_bankarray_csrbank2_dma_base1_r;
	end
	if (builder_csr_bankarray_csrbank2_dma_base0_re) begin
		sdblock2mem_wishbonedmawriter_base_storage[31:0] <= builder_csr_bankarray_csrbank2_dma_base0_r;
	end
	sdblock2mem_wishbonedmawriter_base_re <= builder_csr_bankarray_csrbank2_dma_base0_re;
	if (builder_csr_bankarray_csrbank2_dma_length0_re) begin
		sdblock2mem_wishbonedmawriter_length_storage[31:0] <= builder_csr_bankarray_csrbank2_dma_length0_r;
	end
	sdblock2mem_wishbonedmawriter_length_re <= builder_csr_bankarray_csrbank2_dma_length0_re;
	if (builder_csr_bankarray_csrbank2_dma_enable0_re) begin
		sdblock2mem_wishbonedmawriter_enable_storage <= builder_csr_bankarray_csrbank2_dma_enable0_r;
	end
	sdblock2mem_wishbonedmawriter_enable_re <= builder_csr_bankarray_csrbank2_dma_enable0_re;
	sdblock2mem_wishbonedmawriter_done_re <= builder_csr_bankarray_csrbank2_dma_done_re;
	if (builder_csr_bankarray_csrbank2_dma_loop0_re) begin
		sdblock2mem_wishbonedmawriter_loop_storage <= builder_csr_bankarray_csrbank2_dma_loop0_r;
	end
	sdblock2mem_wishbonedmawriter_loop_re <= builder_csr_bankarray_csrbank2_dma_loop0_re;
	sdblock2mem_wishbonedmawriter_offset_re <= builder_csr_bankarray_csrbank2_dma_offset_re;
	builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank3_sel) begin
		case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_argument0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_command0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_send0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_response3_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_response2_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_response1_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_response0_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_cmd_event_w;
			end
			4'd8: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_data_event_w;
			end
			4'd9: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_block_length0_w;
			end
			4'd10: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_block_count0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank3_cmd_argument0_re) begin
		sdcore_cmd_argument_storage[31:0] <= builder_csr_bankarray_csrbank3_cmd_argument0_r;
	end
	sdcore_cmd_argument_re <= builder_csr_bankarray_csrbank3_cmd_argument0_re;
	if (builder_csr_bankarray_csrbank3_cmd_command0_re) begin
		sdcore_cmd_command_storage[13:0] <= builder_csr_bankarray_csrbank3_cmd_command0_r;
	end
	sdcore_cmd_command_re <= builder_csr_bankarray_csrbank3_cmd_command0_re;
	if (builder_csr_bankarray_csrbank3_cmd_send0_re) begin
		sdcore_cmd_send_storage <= builder_csr_bankarray_csrbank3_cmd_send0_r;
	end
	sdcore_cmd_send_re <= builder_csr_bankarray_csrbank3_cmd_send0_re;
	sdcore_cmd_response_re <= builder_csr_bankarray_csrbank3_cmd_response0_re;
	sdcore_cmd_event_re <= builder_csr_bankarray_csrbank3_cmd_event_re;
	sdcore_data_event_re <= builder_csr_bankarray_csrbank3_data_event_re;
	if (builder_csr_bankarray_csrbank3_block_length0_re) begin
		sdcore_block_length_storage[9:0] <= builder_csr_bankarray_csrbank3_block_length0_r;
	end
	sdcore_block_length_re <= builder_csr_bankarray_csrbank3_block_length0_re;
	if (builder_csr_bankarray_csrbank3_block_count0_re) begin
		sdcore_block_count_storage[31:0] <= builder_csr_bankarray_csrbank3_block_count0_r;
	end
	sdcore_block_count_re <= builder_csr_bankarray_csrbank3_block_count0_re;
	builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank4_sel) begin
		case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_status_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_pending_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_enable0_w;
			end
		endcase
	end
	eventmanager_status_re <= builder_csr_bankarray_csrbank4_status_re;
	if (builder_csr_bankarray_csrbank4_pending_re) begin
		eventmanager_pending_r[3:0] <= builder_csr_bankarray_csrbank4_pending_r;
	end
	eventmanager_pending_re <= builder_csr_bankarray_csrbank4_pending_re;
	if (builder_csr_bankarray_csrbank4_enable0_re) begin
		eventmanager_enable_storage[3:0] <= builder_csr_bankarray_csrbank4_enable0_r;
	end
	eventmanager_enable_re <= builder_csr_bankarray_csrbank4_enable0_re;
	builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank5_sel) begin
		case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_base1_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_base0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_length0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_enable0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_done_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_loop0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_dma_offset_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank5_dma_base1_re) begin
		sdmem2block_dma_base_storage[63:32] <= builder_csr_bankarray_csrbank5_dma_base1_r;
	end
	if (builder_csr_bankarray_csrbank5_dma_base0_re) begin
		sdmem2block_dma_base_storage[31:0] <= builder_csr_bankarray_csrbank5_dma_base0_r;
	end
	sdmem2block_dma_base_re <= builder_csr_bankarray_csrbank5_dma_base0_re;
	if (builder_csr_bankarray_csrbank5_dma_length0_re) begin
		sdmem2block_dma_length_storage[31:0] <= builder_csr_bankarray_csrbank5_dma_length0_r;
	end
	sdmem2block_dma_length_re <= builder_csr_bankarray_csrbank5_dma_length0_re;
	if (builder_csr_bankarray_csrbank5_dma_enable0_re) begin
		sdmem2block_dma_enable_storage <= builder_csr_bankarray_csrbank5_dma_enable0_r;
	end
	sdmem2block_dma_enable_re <= builder_csr_bankarray_csrbank5_dma_enable0_re;
	sdmem2block_dma_done_re <= builder_csr_bankarray_csrbank5_dma_done_re;
	if (builder_csr_bankarray_csrbank5_dma_loop0_re) begin
		sdmem2block_dma_loop_storage <= builder_csr_bankarray_csrbank5_dma_loop0_r;
	end
	sdmem2block_dma_loop_re <= builder_csr_bankarray_csrbank5_dma_loop0_re;
	sdmem2block_dma_offset_re <= builder_csr_bankarray_csrbank5_dma_offset_re;
	builder_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank6_sel) begin
		case (builder_csr_bankarray_interface6_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_card_detect_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_clocker_divider0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface6_bank_bus_dat_r <= init_initialize_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dataw_status_w;
			end
		endcase
	end
	card_detect_re <= builder_csr_bankarray_csrbank6_card_detect_re;
	if (builder_csr_bankarray_csrbank6_clocker_divider0_re) begin
		clocker_storage[8:0] <= builder_csr_bankarray_csrbank6_clocker_divider0_r;
	end
	clocker_re <= builder_csr_bankarray_csrbank6_clocker_divider0_re;
	dataw_re <= builder_csr_bankarray_csrbank6_dataw_status_re;
	builder_csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank7_sel) begin
		case (builder_csr_bankarray_interface7_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_control0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_pi0_command0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= main_sdram_command_issue_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_pi0_address0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_dfii_pi0_rddata_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank7_dfii_control0_re) begin
		main_sdram_storage[3:0] <= builder_csr_bankarray_csrbank7_dfii_control0_r;
	end
	main_sdram_re <= builder_csr_bankarray_csrbank7_dfii_control0_re;
	if (builder_csr_bankarray_csrbank7_dfii_pi0_command0_re) begin
		main_sdram_command_storage[5:0] <= builder_csr_bankarray_csrbank7_dfii_pi0_command0_r;
	end
	main_sdram_command_re <= builder_csr_bankarray_csrbank7_dfii_pi0_command0_re;
	if (builder_csr_bankarray_csrbank7_dfii_pi0_address0_re) begin
		main_sdram_address_storage[12:0] <= builder_csr_bankarray_csrbank7_dfii_pi0_address0_r;
	end
	main_sdram_address_re <= builder_csr_bankarray_csrbank7_dfii_pi0_address0_re;
	if (builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_re) begin
		main_sdram_baddress_storage[1:0] <= builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_r;
	end
	main_sdram_baddress_re <= builder_csr_bankarray_csrbank7_dfii_pi0_baddress0_re;
	if (builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_re) begin
		main_sdram_wrdata_storage[15:0] <= builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_r;
	end
	main_sdram_wrdata_re <= builder_csr_bankarray_csrbank7_dfii_pi0_wrdata0_re;
	main_sdram_rddata_re <= builder_csr_bankarray_csrbank7_dfii_pi0_rddata_re;
	builder_csr_bankarray_interface8_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank8_sel) begin
		case (builder_csr_bankarray_interface8_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank8_load0_re) begin
		main_soclinux_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank8_load0_r;
	end
	main_soclinux_timer_load_re <= builder_csr_bankarray_csrbank8_load0_re;
	if (builder_csr_bankarray_csrbank8_reload0_re) begin
		main_soclinux_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank8_reload0_r;
	end
	main_soclinux_timer_reload_re <= builder_csr_bankarray_csrbank8_reload0_re;
	if (builder_csr_bankarray_csrbank8_en0_re) begin
		main_soclinux_timer_en_storage <= builder_csr_bankarray_csrbank8_en0_r;
	end
	main_soclinux_timer_en_re <= builder_csr_bankarray_csrbank8_en0_re;
	if (builder_csr_bankarray_csrbank8_update_value0_re) begin
		main_soclinux_timer_update_value_storage <= builder_csr_bankarray_csrbank8_update_value0_r;
	end
	main_soclinux_timer_update_value_re <= builder_csr_bankarray_csrbank8_update_value0_re;
	main_soclinux_timer_value_re <= builder_csr_bankarray_csrbank8_value_re;
	main_soclinux_timer_status_re <= builder_csr_bankarray_csrbank8_ev_status_re;
	if (builder_csr_bankarray_csrbank8_ev_pending_re) begin
		main_soclinux_timer_pending_r <= builder_csr_bankarray_csrbank8_ev_pending_r;
	end
	main_soclinux_timer_pending_re <= builder_csr_bankarray_csrbank8_ev_pending_re;
	if (builder_csr_bankarray_csrbank8_ev_enable0_re) begin
		main_soclinux_timer_enable_storage <= builder_csr_bankarray_csrbank8_ev_enable0_r;
	end
	main_soclinux_timer_enable_re <= builder_csr_bankarray_csrbank8_ev_enable0_re;
	builder_csr_bankarray_interface9_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank9_sel) begin
		case (builder_csr_bankarray_interface9_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= main_soclinux_uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_rxfull_w;
			end
		endcase
	end
	main_soclinux_uart_txfull_re <= builder_csr_bankarray_csrbank9_txfull_re;
	main_soclinux_uart_rxempty_re <= builder_csr_bankarray_csrbank9_rxempty_re;
	main_soclinux_uart_status_re <= builder_csr_bankarray_csrbank9_ev_status_re;
	if (builder_csr_bankarray_csrbank9_ev_pending_re) begin
		main_soclinux_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank9_ev_pending_r;
	end
	main_soclinux_uart_pending_re <= builder_csr_bankarray_csrbank9_ev_pending_re;
	if (builder_csr_bankarray_csrbank9_ev_enable0_re) begin
		main_soclinux_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank9_ev_enable0_r;
	end
	main_soclinux_uart_enable_re <= builder_csr_bankarray_csrbank9_ev_enable0_re;
	main_soclinux_uart_txempty_re <= builder_csr_bankarray_csrbank9_txempty_re;
	main_soclinux_uart_rxfull_re <= builder_csr_bankarray_csrbank9_rxfull_re;
	builder_csr_bankarray_interface10_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank10_sel) begin
		case (builder_csr_bankarray_interface10_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_base0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_length0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_enable0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_done_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_loop0_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_offset_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank10_dma_base0_re) begin
		main_vfb_base_storage[31:0] <= builder_csr_bankarray_csrbank10_dma_base0_r;
	end
	main_vfb_base_re <= builder_csr_bankarray_csrbank10_dma_base0_re;
	if (builder_csr_bankarray_csrbank10_dma_length0_re) begin
		main_vfb_length_storage[31:0] <= builder_csr_bankarray_csrbank10_dma_length0_r;
	end
	main_vfb_length_re <= builder_csr_bankarray_csrbank10_dma_length0_re;
	if (builder_csr_bankarray_csrbank10_dma_enable0_re) begin
		main_vfb_enable_storage <= builder_csr_bankarray_csrbank10_dma_enable0_r;
	end
	main_vfb_enable_re <= builder_csr_bankarray_csrbank10_dma_enable0_re;
	main_vfb_done_re <= builder_csr_bankarray_csrbank10_dma_done_re;
	if (builder_csr_bankarray_csrbank10_dma_loop0_re) begin
		main_vfb_loop_storage <= builder_csr_bankarray_csrbank10_dma_loop0_r;
	end
	main_vfb_loop_re <= builder_csr_bankarray_csrbank10_dma_loop0_re;
	main_vfb_offset_re <= builder_csr_bankarray_csrbank10_dma_offset_re;
	builder_csr_bankarray_interface11_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank11_sel) begin
		case (builder_csr_bankarray_interface11_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_enable0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hres0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hsync_start0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hsync_end0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hscan0_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vres0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vsync_start0_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vsync_end0_w;
			end
			4'd8: begin
				builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vscan0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank11_enable0_re) begin
		main_vtg_enable_storage <= builder_csr_bankarray_csrbank11_enable0_r;
	end
	main_vtg_enable_re <= builder_csr_bankarray_csrbank11_enable0_re;
	if (builder_csr_bankarray_csrbank11_hres0_re) begin
		main_vtg_hres_storage[11:0] <= builder_csr_bankarray_csrbank11_hres0_r;
	end
	main_vtg_hres_re <= builder_csr_bankarray_csrbank11_hres0_re;
	if (builder_csr_bankarray_csrbank11_hsync_start0_re) begin
		main_vtg_hsync_start_storage[11:0] <= builder_csr_bankarray_csrbank11_hsync_start0_r;
	end
	main_vtg_hsync_start_re <= builder_csr_bankarray_csrbank11_hsync_start0_re;
	if (builder_csr_bankarray_csrbank11_hsync_end0_re) begin
		main_vtg_hsync_end_storage[11:0] <= builder_csr_bankarray_csrbank11_hsync_end0_r;
	end
	main_vtg_hsync_end_re <= builder_csr_bankarray_csrbank11_hsync_end0_re;
	if (builder_csr_bankarray_csrbank11_hscan0_re) begin
		main_vtg_hscan_storage[11:0] <= builder_csr_bankarray_csrbank11_hscan0_r;
	end
	main_vtg_hscan_re <= builder_csr_bankarray_csrbank11_hscan0_re;
	if (builder_csr_bankarray_csrbank11_vres0_re) begin
		main_vtg_vres_storage[11:0] <= builder_csr_bankarray_csrbank11_vres0_r;
	end
	main_vtg_vres_re <= builder_csr_bankarray_csrbank11_vres0_re;
	if (builder_csr_bankarray_csrbank11_vsync_start0_re) begin
		main_vtg_vsync_start_storage[11:0] <= builder_csr_bankarray_csrbank11_vsync_start0_r;
	end
	main_vtg_vsync_start_re <= builder_csr_bankarray_csrbank11_vsync_start0_re;
	if (builder_csr_bankarray_csrbank11_vsync_end0_re) begin
		main_vtg_vsync_end_storage[11:0] <= builder_csr_bankarray_csrbank11_vsync_end0_r;
	end
	main_vtg_vsync_end_re <= builder_csr_bankarray_csrbank11_vsync_end0_re;
	if (builder_csr_bankarray_csrbank11_vscan0_re) begin
		main_vtg_vscan_storage[11:0] <= builder_csr_bankarray_csrbank11_vscan0_r;
	end
	main_vtg_vscan_re <= builder_csr_bankarray_csrbank11_vscan0_re;
	if (sys_rst) begin
		main_soclinux_reset_storage <= 2'd0;
		main_soclinux_reset_re <= 1'd0;
		main_soclinux_scratch_storage <= 32'd305419896;
		main_soclinux_scratch_re <= 1'd0;
		main_soclinux_bus_errors_re <= 1'd0;
		main_soclinux_bus_errors <= 32'd0;
		main_soclinux_soclinux_ram_bus_ack <= 1'd0;
		main_soclinux_ram_bus_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		main_soclinux_tx_tick <= 1'd0;
		main_soclinux_rx_tick <= 1'd0;
		main_soclinux_rx_rx_d <= 1'd0;
		main_soclinux_uart_txfull_re <= 1'd0;
		main_soclinux_uart_rxempty_re <= 1'd0;
		main_soclinux_uart_tx_pending <= 1'd0;
		main_soclinux_uart_tx_trigger_d <= 1'd0;
		main_soclinux_uart_rx_pending <= 1'd0;
		main_soclinux_uart_rx_trigger_d <= 1'd0;
		main_soclinux_uart_status_re <= 1'd0;
		main_soclinux_uart_pending_re <= 1'd0;
		main_soclinux_uart_pending_r <= 2'd0;
		main_soclinux_uart_enable_storage <= 2'd0;
		main_soclinux_uart_enable_re <= 1'd0;
		main_soclinux_uart_txempty_re <= 1'd0;
		main_soclinux_uart_rxfull_re <= 1'd0;
		main_soclinux_uart_tx_fifo_readable <= 1'd0;
		main_soclinux_uart_tx_fifo_level0 <= 5'd0;
		main_soclinux_uart_tx_fifo_produce <= 4'd0;
		main_soclinux_uart_tx_fifo_consume <= 4'd0;
		main_soclinux_uart_rx_fifo_readable <= 1'd0;
		main_soclinux_uart_rx_fifo_level0 <= 5'd0;
		main_soclinux_uart_rx_fifo_produce <= 4'd0;
		main_soclinux_uart_rx_fifo_consume <= 4'd0;
		main_soclinux_timer_load_storage <= 32'd0;
		main_soclinux_timer_load_re <= 1'd0;
		main_soclinux_timer_reload_storage <= 32'd0;
		main_soclinux_timer_reload_re <= 1'd0;
		main_soclinux_timer_en_storage <= 1'd0;
		main_soclinux_timer_en_re <= 1'd0;
		main_soclinux_timer_update_value_storage <= 1'd0;
		main_soclinux_timer_update_value_re <= 1'd0;
		main_soclinux_timer_value_status <= 32'd0;
		main_soclinux_timer_value_re <= 1'd0;
		main_soclinux_timer_zero_pending <= 1'd0;
		main_soclinux_timer_zero_trigger_d <= 1'd0;
		main_soclinux_timer_status_re <= 1'd0;
		main_soclinux_timer_pending_re <= 1'd0;
		main_soclinux_timer_pending_r <= 1'd0;
		main_soclinux_timer_enable_storage <= 1'd0;
		main_soclinux_timer_enable_re <= 1'd0;
		main_soclinux_timer_value <= 32'd0;
		main_dfi_p0_rddata_valid <= 1'd0;
		main_rddata_en <= 3'd0;
		main_sdram_storage <= 4'd1;
		main_sdram_re <= 1'd0;
		main_sdram_command_storage <= 6'd0;
		main_sdram_command_re <= 1'd0;
		main_sdram_address_re <= 1'd0;
		main_sdram_baddress_re <= 1'd0;
		main_sdram_wrdata_re <= 1'd0;
		main_sdram_rddata_status <= 16'd0;
		main_sdram_rddata_re <= 1'd0;
		main_sdram_dfi_p0_address <= 13'd0;
		main_sdram_dfi_p0_bank <= 2'd0;
		main_sdram_dfi_p0_cas_n <= 1'd1;
		main_sdram_dfi_p0_cs_n <= 1'd1;
		main_sdram_dfi_p0_ras_n <= 1'd1;
		main_sdram_dfi_p0_we_n <= 1'd1;
		main_sdram_dfi_p0_wrdata_en <= 1'd0;
		main_sdram_dfi_p0_rddata_en <= 1'd0;
		main_sdram_cmd_payload_a <= 13'd0;
		main_sdram_cmd_payload_ba <= 2'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd0;
		main_sdram_cmd_payload_we <= 1'd0;
		main_sdram_timer_count1 <= 9'd390;
		main_sdram_postponer_req_o <= 1'd0;
		main_sdram_postponer_count <= 1'd0;
		main_sdram_sequencer_done1 <= 1'd0;
		main_sdram_sequencer_counter <= 3'd0;
		main_sdram_sequencer_count <= 1'd0;
		main_sdram_bankmachine0_cmd_buffer_lookahead_level <= 4'd0;
		main_sdram_bankmachine0_cmd_buffer_lookahead_produce <= 3'd0;
		main_sdram_bankmachine0_cmd_buffer_lookahead_consume <= 3'd0;
		main_sdram_bankmachine0_cmd_buffer_source_valid <= 1'd0;
		main_sdram_bankmachine0_cmd_buffer_source_payload_we <= 1'd0;
		main_sdram_bankmachine0_cmd_buffer_source_payload_addr <= 22'd0;
		main_sdram_bankmachine0_row <= 13'd0;
		main_sdram_bankmachine0_row_opened <= 1'd0;
		main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine0_twtpcon_count <= 2'd0;
		main_sdram_bankmachine0_trccon_ready <= 1'd0;
		main_sdram_bankmachine0_trccon_count <= 2'd0;
		main_sdram_bankmachine0_trascon_ready <= 1'd0;
		main_sdram_bankmachine0_trascon_count <= 2'd0;
		main_sdram_bankmachine1_cmd_buffer_lookahead_level <= 4'd0;
		main_sdram_bankmachine1_cmd_buffer_lookahead_produce <= 3'd0;
		main_sdram_bankmachine1_cmd_buffer_lookahead_consume <= 3'd0;
		main_sdram_bankmachine1_cmd_buffer_source_valid <= 1'd0;
		main_sdram_bankmachine1_cmd_buffer_source_payload_we <= 1'd0;
		main_sdram_bankmachine1_cmd_buffer_source_payload_addr <= 22'd0;
		main_sdram_bankmachine1_row <= 13'd0;
		main_sdram_bankmachine1_row_opened <= 1'd0;
		main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine1_twtpcon_count <= 2'd0;
		main_sdram_bankmachine1_trccon_ready <= 1'd0;
		main_sdram_bankmachine1_trccon_count <= 2'd0;
		main_sdram_bankmachine1_trascon_ready <= 1'd0;
		main_sdram_bankmachine1_trascon_count <= 2'd0;
		main_sdram_bankmachine2_cmd_buffer_lookahead_level <= 4'd0;
		main_sdram_bankmachine2_cmd_buffer_lookahead_produce <= 3'd0;
		main_sdram_bankmachine2_cmd_buffer_lookahead_consume <= 3'd0;
		main_sdram_bankmachine2_cmd_buffer_source_valid <= 1'd0;
		main_sdram_bankmachine2_cmd_buffer_source_payload_we <= 1'd0;
		main_sdram_bankmachine2_cmd_buffer_source_payload_addr <= 22'd0;
		main_sdram_bankmachine2_row <= 13'd0;
		main_sdram_bankmachine2_row_opened <= 1'd0;
		main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine2_twtpcon_count <= 2'd0;
		main_sdram_bankmachine2_trccon_ready <= 1'd0;
		main_sdram_bankmachine2_trccon_count <= 2'd0;
		main_sdram_bankmachine2_trascon_ready <= 1'd0;
		main_sdram_bankmachine2_trascon_count <= 2'd0;
		main_sdram_bankmachine3_cmd_buffer_lookahead_level <= 4'd0;
		main_sdram_bankmachine3_cmd_buffer_lookahead_produce <= 3'd0;
		main_sdram_bankmachine3_cmd_buffer_lookahead_consume <= 3'd0;
		main_sdram_bankmachine3_cmd_buffer_source_valid <= 1'd0;
		main_sdram_bankmachine3_cmd_buffer_source_payload_we <= 1'd0;
		main_sdram_bankmachine3_cmd_buffer_source_payload_addr <= 22'd0;
		main_sdram_bankmachine3_row <= 13'd0;
		main_sdram_bankmachine3_row_opened <= 1'd0;
		main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine3_twtpcon_count <= 2'd0;
		main_sdram_bankmachine3_trccon_ready <= 1'd0;
		main_sdram_bankmachine3_trccon_count <= 2'd0;
		main_sdram_bankmachine3_trascon_ready <= 1'd0;
		main_sdram_bankmachine3_trascon_count <= 2'd0;
		main_sdram_choose_cmd_grant <= 2'd0;
		main_sdram_choose_req_grant <= 2'd0;
		main_sdram_trrdcon_ready <= 1'd0;
		main_sdram_trrdcon_count <= 1'd0;
		main_sdram_tccdcon_ready <= 1'd0;
		main_sdram_tccdcon_count <= 1'd0;
		main_sdram_twtrcon_ready <= 1'd0;
		main_sdram_twtrcon_count <= 3'd0;
		main_sdram_time0 <= 5'd0;
		main_sdram_time1 <= 4'd0;
		main_wishbone_bridge_count <= 3'd0;
		main_wishbone_bridge_wdata_converter_converter_mux <= 3'd0;
		main_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
		main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 4'd0;
		main_wishbone_bridge_rdata_converter_converter_demux <= 3'd0;
		main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
		main_wishbone_bridge_aborted <= 1'd0;
		main_vtg_enable_storage <= 1'd1;
		main_vtg_enable_re <= 1'd0;
		main_vtg_hres_storage <= 12'd640;
		main_vtg_hres_re <= 1'd0;
		main_vtg_hsync_start_storage <= 12'd656;
		main_vtg_hsync_start_re <= 1'd0;
		main_vtg_hsync_end_storage <= 12'd720;
		main_vtg_hsync_end_re <= 1'd0;
		main_vtg_hscan_storage <= 12'd839;
		main_vtg_hscan_re <= 1'd0;
		main_vtg_vres_storage <= 12'd480;
		main_vtg_vres_re <= 1'd0;
		main_vtg_vsync_start_storage <= 12'd481;
		main_vtg_vsync_start_re <= 1'd0;
		main_vtg_vsync_end_storage <= 12'd484;
		main_vtg_vsync_end_re <= 1'd0;
		main_vtg_vscan_storage <= 12'd499;
		main_vtg_vscan_re <= 1'd0;
		main_vfb_dma_rsv_level <= 16'd0;
		main_vfb_dma_fifo_readable <= 1'd0;
		main_vfb_dma_fifo_level0 <= 16'd0;
		main_vfb_dma_fifo_produce <= 15'd0;
		main_vfb_dma_fifo_consume <= 15'd0;
		main_vfb_base_storage <= 32'd1086324736;
		main_vfb_base_re <= 1'd0;
		main_vfb_length_storage <= 32'd1228800;
		main_vfb_length_re <= 1'd0;
		main_vfb_enable_storage <= 1'd0;
		main_vfb_enable_re <= 1'd0;
		main_vfb_done_re <= 1'd0;
		main_vfb_loop_storage <= 1'd1;
		main_vfb_loop_re <= 1'd0;
		main_vfb_offset_re <= 1'd0;
		main_vfb_offset <= 24'd0;
		main_vfb_conv_converter_source_payload_data <= 32'd0;
		main_vfb_conv_converter_source_payload_valid_token_count <= 2'd0;
		main_vfb_conv_converter_demux <= 1'd0;
		main_vfb_conv_converter_strobe_all <= 1'd0;
		main_vfb_cdc_cdc_graycounter0_q <= 3'd0;
		main_vfb_cdc_cdc_graycounter0_q_binary <= 3'd0;
		main_storage <= 8'd0;
		main_re <= 1'd0;
		main_chaser <= 8'd0;
		main_mode <= 1'd0;
		main_count <= 22'd3125000;
		card_detect_re <= 1'd0;
		clocker_storage <= 9'd256;
		clocker_re <= 1'd0;
		clocker_clks <= 9'd0;
		clocker_clk_d <= 1'd0;
		clocker_ce_delayed <= 1'd0;
		init_count <= 8'd0;
		cmdw_count <= 8'd0;
		cmdr_timeout <= 32'd50000000;
		cmdr_count <= 8'd0;
		cmdr_busy <= 1'd0;
		cmdr_cmdr_run <= 1'd0;
		cmdr_cmdr_converter_source_payload_data <= 8'd0;
		cmdr_cmdr_converter_source_payload_valid_token_count <= 4'd0;
		cmdr_cmdr_converter_demux <= 3'd0;
		cmdr_cmdr_converter_strobe_all <= 1'd0;
		cmdr_cmdr_buf_source_valid <= 1'd0;
		cmdr_cmdr_buf_source_payload_data <= 8'd0;
		cmdr_cmdr_reset <= 1'd0;
		dataw_re <= 1'd0;
		dataw_count <= 8'd0;
		dataw_accepted1 <= 1'd0;
		dataw_crc_error1 <= 1'd0;
		dataw_write_error1 <= 1'd0;
		dataw_crc_run <= 1'd0;
		dataw_crc_converter_source_payload_data <= 8'd0;
		dataw_crc_converter_source_payload_valid_token_count <= 4'd0;
		dataw_crc_converter_demux <= 3'd0;
		dataw_crc_converter_strobe_all <= 1'd0;
		dataw_crc_buf_source_valid <= 1'd0;
		dataw_crc_buf_source_payload_data <= 8'd0;
		datar_timeout <= 32'd50000000;
		datar_count <= 10'd0;
		datar_datar_run <= 1'd0;
		datar_datar_converter_source_payload_data <= 8'd0;
		datar_datar_converter_source_payload_valid_token_count <= 2'd0;
		datar_datar_converter_demux <= 1'd0;
		datar_datar_converter_strobe_all <= 1'd0;
		datar_datar_buf_source_valid <= 1'd0;
		datar_datar_buf_source_payload_data <= 8'd0;
		datar_datar_reset <= 1'd0;
		sdpads_data_i_ce <= 1'd0;
		clocker_clk_delay <= 2'd0;
		card_detect_irq <= 1'd0;
		card_detect_d <= 1'd0;
		sdcore_cmd_argument_storage <= 32'd0;
		sdcore_cmd_argument_re <= 1'd0;
		sdcore_cmd_command_storage <= 14'd0;
		sdcore_cmd_command_re <= 1'd0;
		sdcore_cmd_send_storage <= 1'd0;
		sdcore_cmd_send_re <= 1'd0;
		sdcore_cmd_response_status <= 128'd0;
		sdcore_cmd_response_re <= 1'd0;
		sdcore_cmd_event_re <= 1'd0;
		sdcore_data_event_re <= 1'd0;
		sdcore_block_length_storage <= 10'd0;
		sdcore_block_length_re <= 1'd0;
		sdcore_block_count_storage <= 32'd0;
		sdcore_block_count_re <= 1'd0;
		sdcore_crc7_inserter_reg0 <= 7'd0;
		sdcore_crc16_inserter_count <= 3'd0;
		sdcore_crc16_inserter_crc0_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc1_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc2_reg0 <= 16'd0;
		sdcore_crc16_inserter_crc3_reg0 <= 16'd0;
		sdcore_fifo_level <= 4'd0;
		sdcore_fifo_produce <= 3'd0;
		sdcore_fifo_consume <= 3'd0;
		sdcore_cmd_count <= 3'd0;
		sdcore_cmd_done <= 1'd0;
		sdcore_cmd_error <= 1'd0;
		sdcore_cmd_timeout <= 1'd0;
		sdcore_data_count <= 32'd0;
		sdcore_data_done <= 1'd0;
		sdcore_data_error <= 1'd0;
		sdcore_data_timeout <= 1'd0;
		sdblock2mem_irq <= 1'd0;
		sdblock2mem_fifo_readable <= 1'd0;
		sdblock2mem_fifo_level0 <= 10'd0;
		sdblock2mem_fifo_produce <= 9'd0;
		sdblock2mem_fifo_consume <= 9'd0;
		sdblock2mem_converter_source_payload_data <= 32'd0;
		sdblock2mem_converter_source_payload_valid_token_count <= 3'd0;
		sdblock2mem_converter_demux <= 2'd0;
		sdblock2mem_converter_strobe_all <= 1'd0;
		sdblock2mem_wishbonedmawriter_base_storage <= 64'd0;
		sdblock2mem_wishbonedmawriter_base_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_length_storage <= 32'd0;
		sdblock2mem_wishbonedmawriter_length_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_enable_storage <= 1'd0;
		sdblock2mem_wishbonedmawriter_enable_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_done_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_loop_storage <= 1'd0;
		sdblock2mem_wishbonedmawriter_loop_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_offset_re <= 1'd0;
		sdblock2mem_wishbonedmawriter_offset <= 32'd0;
		sdblock2mem_connect <= 1'd0;
		sdblock2mem_done_d <= 1'd0;
		sdmem2block_irq <= 1'd0;
		sdmem2block_dma_data <= 32'd0;
		sdmem2block_dma_base_storage <= 64'd0;
		sdmem2block_dma_base_re <= 1'd0;
		sdmem2block_dma_length_storage <= 32'd0;
		sdmem2block_dma_length_re <= 1'd0;
		sdmem2block_dma_enable_storage <= 1'd0;
		sdmem2block_dma_enable_re <= 1'd0;
		sdmem2block_dma_done_re <= 1'd0;
		sdmem2block_dma_loop_storage <= 1'd0;
		sdmem2block_dma_loop_re <= 1'd0;
		sdmem2block_dma_offset_re <= 1'd0;
		sdmem2block_dma_offset <= 32'd0;
		sdmem2block_converter_mux <= 2'd0;
		sdmem2block_fifo_readable <= 1'd0;
		sdmem2block_fifo_level0 <= 10'd0;
		sdmem2block_fifo_produce <= 9'd0;
		sdmem2block_fifo_consume <= 9'd0;
		sdmem2block_count <= 9'd0;
		sdmem2block_done_d <= 1'd0;
		card_detect_pending <= 1'd0;
		block2mem_dma_pending <= 1'd0;
		mem2block_dma_pending <= 1'd0;
		eventmanager_status_re <= 1'd0;
		eventmanager_pending_re <= 1'd0;
		eventmanager_pending_r <= 4'd0;
		eventmanager_enable_storage <= 4'd0;
		eventmanager_enable_re <= 1'd0;
		builder_rs232phytx_state <= 1'd0;
		builder_rs232phyrx_state <= 1'd0;
		builder_refresher_state <= 2'd0;
		builder_bankmachine0_state <= 3'd0;
		builder_bankmachine1_state <= 3'd0;
		builder_bankmachine2_state <= 3'd0;
		builder_bankmachine3_state <= 3'd0;
		builder_multiplexer_state <= 3'd0;
		builder_roundrobin0_grant <= 1'd0;
		builder_roundrobin1_grant <= 1'd0;
		builder_roundrobin2_grant <= 1'd0;
		builder_roundrobin3_grant <= 1'd0;
		builder_new_master_wdata_ready0 <= 1'd0;
		builder_new_master_wdata_ready1 <= 1'd0;
		builder_new_master_rdata_valid0 <= 1'd0;
		builder_new_master_rdata_valid1 <= 1'd0;
		builder_new_master_rdata_valid2 <= 1'd0;
		builder_new_master_rdata_valid3 <= 1'd0;
		builder_new_master_rdata_valid4 <= 1'd0;
		builder_new_master_rdata_valid5 <= 1'd0;
		builder_new_master_rdata_valid6 <= 1'd0;
		builder_new_master_rdata_valid7 <= 1'd0;
		builder_fullmemorywe_state <= 2'd0;
		builder_litedramwishbone2native_litedramnativeportconverter_state <= 1'd0;
		builder_litedramwishbone2native_fsm_state <= 2'd0;
		builder_videoframebuffer_state <= 2'd0;
		builder_sdphyinit_state <= 1'd0;
		builder_sdphycmdw_state <= 2'd0;
		builder_sdphycmdr_state <= 3'd0;
		builder_sdphydataw_state <= 3'd0;
		builder_sdphydatar_state <= 3'd0;
		builder_sdcore_crc16inserter_state <= 1'd0;
		builder_sdcore_fsm_state <= 3'd0;
		builder_sdblock2memdma_state <= 2'd0;
		builder_sdmem2blockdma_fsm_state <= 1'd0;
		builder_sdmem2blockdma_resetinserter_state <= 2'd0;
		builder_soclinux_we <= 1'd0;
		builder_grant <= 2'd0;
		builder_slave_sel_r <= 6'd0;
		builder_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_state <= 2'd0;
	end
	builder_multiregimpl0_regs0 <= serial_rx;
	builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
	builder_multiregimpl17_regs0 <= main_vfb_cdc_cdc_graycounter1_q;
	builder_multiregimpl17_regs1 <= builder_multiregimpl17_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 7875-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:7874];
initial begin
	$readmemh("ulx3s_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_soclinux_soclinux_adr];
end
assign main_soclinux_soclinux_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 1536-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:1535];
initial begin
	$readmemh("ulx3s_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_soclinux_ram_we[0])
		sram[main_soclinux_ram_adr][7:0] <= main_soclinux_ram_dat_w[7:0];
	if (main_soclinux_ram_we[1])
		sram[main_soclinux_ram_adr][15:8] <= main_soclinux_ram_dat_w[15:8];
	if (main_soclinux_ram_we[2])
		sram[main_soclinux_ram_adr][23:16] <= main_soclinux_ram_dat_w[23:16];
	if (main_soclinux_ram_we[3])
		sram[main_soclinux_ram_adr][31:24] <= main_soclinux_ram_dat_w[31:24];
	sram_adr0 <= main_soclinux_ram_adr;
end
assign main_soclinux_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 19-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:18];
initial begin
	$readmemh("ulx3s_mem.init", mem);
end
reg [4:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_soclinux_uart_tx_fifo_wrport_we)
		storage[main_soclinux_uart_tx_fifo_wrport_adr] <= main_soclinux_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_soclinux_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_soclinux_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_soclinux_uart_tx_fifo_rdport_adr];
end
assign main_soclinux_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_soclinux_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_soclinux_uart_rx_fifo_wrport_we)
		storage_1[main_soclinux_uart_rx_fifo_wrport_adr] <= main_soclinux_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_soclinux_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_soclinux_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_soclinux_uart_rx_fifo_rdport_adr];
end
assign main_soclinux_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_soclinux_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:7];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_we)
		storage_2[main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr] <= main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_r = storage_2_dat0;
assign main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r = storage_2[main_sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:7];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_we)
		storage_3[main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr] <= main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_r = storage_3_dat0;
assign main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r = storage_3[main_sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:7];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_we)
		storage_4[main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr] <= main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_r = storage_4_dat0;
assign main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r = storage_4[main_sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:7];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_we)
		storage_5[main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr] <= main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_r = storage_5_dat0;
assign main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r = storage_5[main_sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 128-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 26 
reg [25:0] tag_mem[0:127];
reg [6:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (main_tag_port_we)
		tag_mem[main_tag_port_adr] <= main_tag_port_dat_w;
	tag_mem_adr0 <= main_tag_port_adr;
end
assign main_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_6: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_6[0:3];
reg [11:0] storage_6_dat0;
reg [11:0] storage_6_dat1;
always @(posedge hdmi_clk) begin
	if (main_videohdmi10to1serializer0_cdc_wrport_we)
		storage_6[main_videohdmi10to1serializer0_cdc_wrport_adr] <= main_videohdmi10to1serializer0_cdc_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_videohdmi10to1serializer0_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_6_dat1 <= storage_6[main_videohdmi10to1serializer0_cdc_rdport_adr];
end
assign main_videohdmi10to1serializer0_cdc_wrport_dat_r = storage_6_dat0;
assign main_videohdmi10to1serializer0_cdc_rdport_dat_r = storage_6_dat1;


//------------------------------------------------------------------------------
// Memory storage_7: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_7[0:3];
reg [11:0] storage_7_dat0;
reg [11:0] storage_7_dat1;
always @(posedge hdmi_clk) begin
	if (main_videohdmi10to1serializer1_cdc_wrport_we)
		storage_7[main_videohdmi10to1serializer1_cdc_wrport_adr] <= main_videohdmi10to1serializer1_cdc_wrport_dat_w;
	storage_7_dat0 <= storage_7[main_videohdmi10to1serializer1_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_7_dat1 <= storage_7[main_videohdmi10to1serializer1_cdc_rdport_adr];
end
assign main_videohdmi10to1serializer1_cdc_wrport_dat_r = storage_7_dat0;
assign main_videohdmi10to1serializer1_cdc_rdport_dat_r = storage_7_dat1;


//------------------------------------------------------------------------------
// Memory storage_8: 4-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 12 
// Port 1 | Read: Sync  | Write: ---- | 
reg [11:0] storage_8[0:3];
reg [11:0] storage_8_dat0;
reg [11:0] storage_8_dat1;
always @(posedge hdmi_clk) begin
	if (main_videohdmi10to1serializer2_cdc_wrport_we)
		storage_8[main_videohdmi10to1serializer2_cdc_wrport_adr] <= main_videohdmi10to1serializer2_cdc_wrport_dat_w;
	storage_8_dat0 <= storage_8[main_videohdmi10to1serializer2_cdc_wrport_adr];
end
always @(posedge hdmi5x_clk) begin
	storage_8_dat1 <= storage_8[main_videohdmi10to1serializer2_cdc_rdport_adr];
end
assign main_videohdmi10to1serializer2_cdc_wrport_dat_r = storage_8_dat0;
assign main_videohdmi10to1serializer2_cdc_rdport_dat_r = storage_8_dat1;


//------------------------------------------------------------------------------
// Memory storage_9: 32768-words x 18-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 18 
// Port 1 | Read: Sync  | Write: ---- | 
reg [17:0] storage_9[0:32767];
reg [17:0] storage_9_dat0;
reg [17:0] storage_9_dat1;
always @(posedge sys_clk) begin
	if (main_vfb_dma_fifo_wrport_we)
		storage_9[main_vfb_dma_fifo_wrport_adr] <= main_vfb_dma_fifo_wrport_dat_w;
	storage_9_dat0 <= storage_9[main_vfb_dma_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_vfb_dma_fifo_rdport_re)
		storage_9_dat1 <= storage_9[main_vfb_dma_fifo_rdport_adr];
end
assign main_vfb_dma_fifo_wrport_dat_r = storage_9_dat0;
assign main_vfb_dma_fifo_rdport_dat_r = storage_9_dat1;


//------------------------------------------------------------------------------
// Memory storage_10: 4-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage_10[0:3];
reg [33:0] storage_10_dat0;
reg [33:0] storage_10_dat1;
always @(posedge sys_clk) begin
	if (main_vfb_cdc_cdc_wrport_we)
		storage_10[main_vfb_cdc_cdc_wrport_adr] <= main_vfb_cdc_cdc_wrport_dat_w;
	storage_10_dat0 <= storage_10[main_vfb_cdc_cdc_wrport_adr];
end
always @(posedge hdmi_clk) begin
	storage_10_dat1 <= storage_10[main_vfb_cdc_cdc_rdport_adr];
end
assign main_vfb_cdc_cdc_wrport_dat_r = storage_10_dat0;
assign main_vfb_cdc_cdc_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Memory storage_11: 8-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_11[0:7];
reg [9:0] storage_11_dat0;
always @(posedge sys_clk) begin
	if (sdcore_fifo_wrport_we)
		storage_11[sdcore_fifo_wrport_adr] <= sdcore_fifo_wrport_dat_w;
	storage_11_dat0 <= storage_11[sdcore_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign sdcore_fifo_wrport_dat_r = storage_11_dat0;
assign sdcore_fifo_rdport_dat_r = storage_11[sdcore_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_12: 512-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_12[0:511];
reg [9:0] storage_12_dat0;
reg [9:0] storage_12_dat1;
always @(posedge sys_clk) begin
	if (sdblock2mem_fifo_wrport_we)
		storage_12[sdblock2mem_fifo_wrport_adr] <= sdblock2mem_fifo_wrport_dat_w;
	storage_12_dat0 <= storage_12[sdblock2mem_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (sdblock2mem_fifo_rdport_re)
		storage_12_dat1 <= storage_12[sdblock2mem_fifo_rdport_adr];
end
assign sdblock2mem_fifo_wrport_dat_r = storage_12_dat0;
assign sdblock2mem_fifo_rdport_dat_r = storage_12_dat1;


//------------------------------------------------------------------------------
// Memory storage_13: 512-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_13[0:511];
reg [9:0] storage_13_dat0;
reg [9:0] storage_13_dat1;
always @(posedge sys_clk) begin
	if (sdmem2block_fifo_wrport_we)
		storage_13[sdmem2block_fifo_wrport_adr] <= sdmem2block_fifo_wrport_dat_w;
	storage_13_dat0 <= storage_13[sdmem2block_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (sdmem2block_fifo_rdport_re)
		storage_13_dat1 <= storage_13[sdmem2block_fifo_rdport_adr];
end
assign sdmem2block_fifo_wrport_dat_r = storage_13_dat0;
assign sdmem2block_fifo_rdport_dat_r = storage_13_dat1;


(* FREQUENCY_PIN_CLKI = "25.0", FREQUENCY_PIN_CLKOP = "50.0", FREQUENCY_PIN_CLKOS = "50.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *) EHXPLLL #(
	.CLKFB_DIV(5'd16),
	.CLKI_DIV(1'd1),
	.CLKOP_CPHASE(3'd7),
	.CLKOP_DIV(4'd8),
	.CLKOP_ENABLE("ENABLED"),
	.CLKOP_FPHASE(1'd0),
	.CLKOS2_CPHASE(1'd0),
	.CLKOS2_DIV(1'd1),
	.CLKOS2_ENABLE("ENABLED"),
	.CLKOS2_FPHASE(1'd0),
	.CLKOS_CPHASE(4'd9),
	.CLKOS_DIV(4'd8),
	.CLKOS_ENABLE("ENABLED"),
	.CLKOS_FPHASE(1'd0),
	.FEEDBK_PATH("INT_OS2")
) EHXPLLL (
	.CLKI(main_ecp5pll0_clkin),
	.RST(main_pll_reset),
	.STDBY(main_pll_stdby),
	.CLKOP(main_ecp5pll0_clkout0),
	.CLKOS(main_ecp5pll0_clkout1),
	.CLKOS2(builder_ecp5pll0_ecp5pll),
	.LOCK(builder_ecp5pll0_locked)
);

(* FREQUENCY_PIN_CLKI = "25.0", FREQUENCY_PIN_CLKOP = "25.0", FREQUENCY_PIN_CLKOS = "125.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *) EHXPLLL #(
	.CLKFB_DIV(5'd20),
	.CLKI_DIV(1'd1),
	.CLKOP_CPHASE(5'd19),
	.CLKOP_DIV(5'd20),
	.CLKOP_ENABLE("ENABLED"),
	.CLKOP_FPHASE(1'd0),
	.CLKOS2_CPHASE(1'd0),
	.CLKOS2_DIV(1'd1),
	.CLKOS2_ENABLE("ENABLED"),
	.CLKOS2_FPHASE(1'd0),
	.CLKOS_CPHASE(2'd3),
	.CLKOS_DIV(3'd4),
	.CLKOS_ENABLE("ENABLED"),
	.CLKOS_FPHASE(1'd0),
	.FEEDBK_PATH("INT_OS2")
) EHXPLLL_1 (
	.CLKI(main_ecp5pll1_clkin),
	.RST(main_video_pll_reset),
	.STDBY(main_video_pll_stdby),
	.CLKOP(main_ecp5pll1_clkout0),
	.CLKOS(main_ecp5pll1_clkout1),
	.CLKOS2(builder_ecp5pll1_ecp5pll),
	.LOCK(builder_ecp5pll1_locked)
);

VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm VexRiscvLitexSmpCluster_Cc1_Iw32Is4096Iy1_Dw32Ds4096Dy1_ITs4DTs4_Ood_Wm(
	.clintWishbone_ADR(main_soclinux_clintbus_adr),
	.clintWishbone_CYC(main_soclinux_clintbus_cyc),
	.clintWishbone_DAT_MOSI(main_soclinux_clintbus_dat_w),
	.clintWishbone_STB(main_soclinux_clintbus_stb),
	.clintWishbone_WE(main_soclinux_clintbus_we),
	.debugCd_external_clk(sys_clk),
	.debugCd_external_reset((sys_rst | main_soclinux_reset)),
	.debugPort_capture(main_soclinux_jtag_capture),
	.debugPort_enable(main_soclinux_jtag_enable),
	.debugPort_reset(main_soclinux_jtag_reset),
	.debugPort_shift(main_soclinux_jtag_shift),
	.debugPort_tdi(main_soclinux_jtag_tdi),
	.debugPort_update(main_soclinux_jtag_update),
	.interrupts(main_soclinux_interrupt),
	.jtag_clk(main_soclinux_jtag_clk),
	.peripheral_ACK(main_soclinux_pbus_ack),
	.peripheral_DAT_MISO(main_soclinux_pbus_dat_r),
	.peripheral_ERR(main_soclinux_pbus_err),
	.plicWishbone_ADR(main_soclinux_plicbus_adr),
	.plicWishbone_CYC(main_soclinux_plicbus_cyc),
	.plicWishbone_DAT_MOSI(main_soclinux_plicbus_dat_w),
	.plicWishbone_STB(main_soclinux_plicbus_stb),
	.plicWishbone_WE(main_soclinux_plicbus_we),
	.clintWishbone_ACK(main_soclinux_clintbus_ack),
	.clintWishbone_DAT_MISO(main_soclinux_clintbus_dat_r),
	.debugPort_tdo(main_soclinux_jtag_tdo),
	.peripheral_ADR(main_soclinux_pbus_adr),
	.peripheral_BTE(main_soclinux_pbus_bte),
	.peripheral_CTI(main_soclinux_pbus_cti),
	.peripheral_CYC(main_soclinux_pbus_cyc),
	.peripheral_DAT_MOSI(main_soclinux_pbus_dat_w),
	.peripheral_SEL(main_soclinux_pbus_sel),
	.peripheral_STB(main_soclinux_pbus_stb),
	.peripheral_WE(main_soclinux_pbus_we),
	.plicWishbone_ACK(main_soclinux_plicbus_ack),
	.plicWishbone_DAT_MISO(main_soclinux_plicbus_dat_r)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:127];
reg [6:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[0])
		data_mem_grain0[main_data_port_adr] <= main_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:127];
reg [6:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[1])
		data_mem_grain1[main_data_port_adr] <= main_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:127];
reg [6:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[2])
		data_mem_grain2[main_data_port_adr] <= main_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:127];
reg [6:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[3])
		data_mem_grain3[main_data_port_adr] <= main_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:127];
reg [6:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[4])
		data_mem_grain4[main_data_port_adr] <= main_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:127];
reg [6:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[5])
		data_mem_grain5[main_data_port_adr] <= main_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:127];
reg [6:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[6])
		data_mem_grain6[main_data_port_adr] <= main_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:127];
reg [6:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[7])
		data_mem_grain7[main_data_port_adr] <= main_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:127];
reg [6:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[8])
		data_mem_grain8[main_data_port_adr] <= main_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:127];
reg [6:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[9])
		data_mem_grain9[main_data_port_adr] <= main_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:127];
reg [6:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[10])
		data_mem_grain10[main_data_port_adr] <= main_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:127];
reg [6:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[11])
		data_mem_grain11[main_data_port_adr] <= main_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:127];
reg [6:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[12])
		data_mem_grain12[main_data_port_adr] <= main_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:127];
reg [6:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[13])
		data_mem_grain13[main_data_port_adr] <= main_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:127];
reg [6:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[14])
		data_mem_grain14[main_data_port_adr] <= main_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 128-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:127];
reg [6:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[15])
		data_mem_grain15[main_data_port_adr] <= main_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


FD1S3BX FD1S3BX(
	.CK(sys_clk),
	.D(1'd0),
	.PD((~main_pll_locked)),
	.Q(builder_rst10)
);

FD1S3BX FD1S3BX_1(
	.CK(sys_clk),
	.D(builder_rst10),
	.PD((~main_pll_locked)),
	.Q(sys_rst)
);

FD1S3BX FD1S3BX_2(
	.CK(sys_ps_clk),
	.D(1'd0),
	.PD((~main_pll_locked)),
	.Q(builder_rst11)
);

FD1S3BX FD1S3BX_3(
	.CK(sys_ps_clk),
	.D(builder_rst11),
	.PD((~main_pll_locked)),
	.Q(sys_ps_rst)
);

FD1S3BX FD1S3BX_4(
	.CK(hdmi_clk),
	.D(1'd0),
	.PD((~main_video_pll_locked)),
	.Q(builder_rst12)
);

FD1S3BX FD1S3BX_5(
	.CK(hdmi_clk),
	.D(builder_rst12),
	.PD((~main_video_pll_locked)),
	.Q(hdmi_rst)
);

FD1S3BX FD1S3BX_6(
	.CK(hdmi5x_clk),
	.D(1'd0),
	.PD((~main_video_pll_locked)),
	.Q(builder_rst13)
);

FD1S3BX FD1S3BX_7(
	.CK(hdmi5x_clk),
	.D(builder_rst13),
	.PD((~main_video_pll_locked)),
	.Q(hdmi5x_rst)
);

ODDRX1F ODDRX1F(
	.D0(1'd1),
	.D1(1'd0),
	.SCLK(sys_ps_clk),
	.Q(sdram_clock)
);

OFS1P3BX OFS1P3BX(
	.D(main_dfi_p0_cs_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cs_n)
);

OFS1P3BX OFS1P3BX_1(
	.D(main_dfi_p0_address[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[0])
);

OFS1P3BX OFS1P3BX_2(
	.D(main_dfi_p0_address[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[1])
);

OFS1P3BX OFS1P3BX_3(
	.D(main_dfi_p0_address[2]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[2])
);

OFS1P3BX OFS1P3BX_4(
	.D(main_dfi_p0_address[3]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[3])
);

OFS1P3BX OFS1P3BX_5(
	.D(main_dfi_p0_address[4]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[4])
);

OFS1P3BX OFS1P3BX_6(
	.D(main_dfi_p0_address[5]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[5])
);

OFS1P3BX OFS1P3BX_7(
	.D(main_dfi_p0_address[6]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[6])
);

OFS1P3BX OFS1P3BX_8(
	.D(main_dfi_p0_address[7]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[7])
);

OFS1P3BX OFS1P3BX_9(
	.D(main_dfi_p0_address[8]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[8])
);

OFS1P3BX OFS1P3BX_10(
	.D(main_dfi_p0_address[9]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[9])
);

OFS1P3BX OFS1P3BX_11(
	.D(main_dfi_p0_address[10]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[10])
);

OFS1P3BX OFS1P3BX_12(
	.D(main_dfi_p0_address[11]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[11])
);

OFS1P3BX OFS1P3BX_13(
	.D(main_dfi_p0_address[12]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_a[12])
);

OFS1P3BX OFS1P3BX_14(
	.D(main_dfi_p0_bank[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ba[0])
);

OFS1P3BX OFS1P3BX_15(
	.D(main_dfi_p0_bank[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ba[1])
);

OFS1P3BX OFS1P3BX_16(
	.D(main_dfi_p0_ras_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_ras_n)
);

OFS1P3BX OFS1P3BX_17(
	.D(main_dfi_p0_cas_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cas_n)
);

OFS1P3BX OFS1P3BX_18(
	.D(main_dfi_p0_we_n),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_we_n)
);

OFS1P3BX OFS1P3BX_19(
	.D(main_dfi_p0_cke),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_cke)
);

OFS1P3BX OFS1P3BX_20(
	.D((main_dfi_p0_wrdata_en & main_dfi_p0_wrdata_mask[0])),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_dm[0])
);

OFS1P3BX OFS1P3BX_21(
	.D((main_dfi_p0_wrdata_en & main_dfi_p0_wrdata_mask[1])),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdram_dm[1])
);

ODDRX1F ODDRX1F_1(
	.D0(1'd1),
	.D1(1'd0),
	.SCLK(hdmi_clk),
	.Q(gpdi_clk_p)
);

ODDRX1F ODDRX1F_2(
	.D0(main_videohdmi10to1serializer0_source_payload_data[0]),
	.D1(main_videohdmi10to1serializer0_source_payload_data[1]),
	.SCLK(hdmi5x_clk),
	.Q(gpdi_data0_p)
);

ODDRX1F ODDRX1F_3(
	.D0(main_videohdmi10to1serializer1_source_payload_data[0]),
	.D1(main_videohdmi10to1serializer1_source_payload_data[1]),
	.SCLK(hdmi5x_clk),
	.Q(gpdi_data1_p)
);

ODDRX1F ODDRX1F_4(
	.D0(main_videohdmi10to1serializer2_source_payload_data[0]),
	.D1(main_videohdmi10to1serializer2_source_payload_data[1]),
	.SCLK(hdmi5x_clk),
	.Q(gpdi_data2_p)
);

OFS1P3BX OFS1P3BX_22(
	.D((~clocker_clk0)),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdcard_clk)
);

OFS1P3BX OFS1P3BX_23(
	.D(main_dfi_p0_wrdata[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate0__o)
);

IFS1P3BX IFS1P3BX(
	.D(builder_inferedsdrtristate0__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[0])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO (
	.B(sdram_dq[0]),
	.I(builder_inferedsdrtristate0__o),
	.T((~builder_inferedsdrtristate0_oe)),
	.O(builder_inferedsdrtristate0__i)
);

OFS1P3BX OFS1P3BX_24(
	.D(main_dfi_p0_wrdata[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate1__o)
);

IFS1P3BX IFS1P3BX_1(
	.D(builder_inferedsdrtristate1__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[1])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_1 (
	.B(sdram_dq[1]),
	.I(builder_inferedsdrtristate1__o),
	.T((~builder_inferedsdrtristate1_oe)),
	.O(builder_inferedsdrtristate1__i)
);

OFS1P3BX OFS1P3BX_25(
	.D(main_dfi_p0_wrdata[2]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate2__o)
);

IFS1P3BX IFS1P3BX_2(
	.D(builder_inferedsdrtristate2__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[2])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_2 (
	.B(sdram_dq[2]),
	.I(builder_inferedsdrtristate2__o),
	.T((~builder_inferedsdrtristate2_oe)),
	.O(builder_inferedsdrtristate2__i)
);

OFS1P3BX OFS1P3BX_26(
	.D(main_dfi_p0_wrdata[3]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate3__o)
);

IFS1P3BX IFS1P3BX_3(
	.D(builder_inferedsdrtristate3__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[3])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_3 (
	.B(sdram_dq[3]),
	.I(builder_inferedsdrtristate3__o),
	.T((~builder_inferedsdrtristate3_oe)),
	.O(builder_inferedsdrtristate3__i)
);

OFS1P3BX OFS1P3BX_27(
	.D(main_dfi_p0_wrdata[4]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate4__o)
);

IFS1P3BX IFS1P3BX_4(
	.D(builder_inferedsdrtristate4__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[4])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_4 (
	.B(sdram_dq[4]),
	.I(builder_inferedsdrtristate4__o),
	.T((~builder_inferedsdrtristate4_oe)),
	.O(builder_inferedsdrtristate4__i)
);

OFS1P3BX OFS1P3BX_28(
	.D(main_dfi_p0_wrdata[5]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate5__o)
);

IFS1P3BX IFS1P3BX_5(
	.D(builder_inferedsdrtristate5__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[5])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_5 (
	.B(sdram_dq[5]),
	.I(builder_inferedsdrtristate5__o),
	.T((~builder_inferedsdrtristate5_oe)),
	.O(builder_inferedsdrtristate5__i)
);

OFS1P3BX OFS1P3BX_29(
	.D(main_dfi_p0_wrdata[6]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate6__o)
);

IFS1P3BX IFS1P3BX_6(
	.D(builder_inferedsdrtristate6__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[6])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_6 (
	.B(sdram_dq[6]),
	.I(builder_inferedsdrtristate6__o),
	.T((~builder_inferedsdrtristate6_oe)),
	.O(builder_inferedsdrtristate6__i)
);

OFS1P3BX OFS1P3BX_30(
	.D(main_dfi_p0_wrdata[7]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate7__o)
);

IFS1P3BX IFS1P3BX_7(
	.D(builder_inferedsdrtristate7__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[7])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_7 (
	.B(sdram_dq[7]),
	.I(builder_inferedsdrtristate7__o),
	.T((~builder_inferedsdrtristate7_oe)),
	.O(builder_inferedsdrtristate7__i)
);

OFS1P3BX OFS1P3BX_31(
	.D(main_dfi_p0_wrdata[8]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate8__o)
);

IFS1P3BX IFS1P3BX_8(
	.D(builder_inferedsdrtristate8__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[8])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_8 (
	.B(sdram_dq[8]),
	.I(builder_inferedsdrtristate8__o),
	.T((~builder_inferedsdrtristate8_oe)),
	.O(builder_inferedsdrtristate8__i)
);

OFS1P3BX OFS1P3BX_32(
	.D(main_dfi_p0_wrdata[9]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate9__o)
);

IFS1P3BX IFS1P3BX_9(
	.D(builder_inferedsdrtristate9__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[9])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_9 (
	.B(sdram_dq[9]),
	.I(builder_inferedsdrtristate9__o),
	.T((~builder_inferedsdrtristate9_oe)),
	.O(builder_inferedsdrtristate9__i)
);

OFS1P3BX OFS1P3BX_33(
	.D(main_dfi_p0_wrdata[10]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate10__o)
);

IFS1P3BX IFS1P3BX_10(
	.D(builder_inferedsdrtristate10__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[10])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_10 (
	.B(sdram_dq[10]),
	.I(builder_inferedsdrtristate10__o),
	.T((~builder_inferedsdrtristate10_oe)),
	.O(builder_inferedsdrtristate10__i)
);

OFS1P3BX OFS1P3BX_34(
	.D(main_dfi_p0_wrdata[11]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate11__o)
);

IFS1P3BX IFS1P3BX_11(
	.D(builder_inferedsdrtristate11__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[11])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_11 (
	.B(sdram_dq[11]),
	.I(builder_inferedsdrtristate11__o),
	.T((~builder_inferedsdrtristate11_oe)),
	.O(builder_inferedsdrtristate11__i)
);

OFS1P3BX OFS1P3BX_35(
	.D(main_dfi_p0_wrdata[12]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate12__o)
);

IFS1P3BX IFS1P3BX_12(
	.D(builder_inferedsdrtristate12__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[12])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_12 (
	.B(sdram_dq[12]),
	.I(builder_inferedsdrtristate12__o),
	.T((~builder_inferedsdrtristate12_oe)),
	.O(builder_inferedsdrtristate12__i)
);

OFS1P3BX OFS1P3BX_36(
	.D(main_dfi_p0_wrdata[13]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate13__o)
);

IFS1P3BX IFS1P3BX_13(
	.D(builder_inferedsdrtristate13__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[13])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_13 (
	.B(sdram_dq[13]),
	.I(builder_inferedsdrtristate13__o),
	.T((~builder_inferedsdrtristate13_oe)),
	.O(builder_inferedsdrtristate13__i)
);

OFS1P3BX OFS1P3BX_37(
	.D(main_dfi_p0_wrdata[14]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate14__o)
);

IFS1P3BX IFS1P3BX_14(
	.D(builder_inferedsdrtristate14__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[14])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_14 (
	.B(sdram_dq[14]),
	.I(builder_inferedsdrtristate14__o),
	.T((~builder_inferedsdrtristate14_oe)),
	.O(builder_inferedsdrtristate14__i)
);

OFS1P3BX OFS1P3BX_38(
	.D(main_dfi_p0_wrdata[15]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate15__o)
);

IFS1P3BX IFS1P3BX_15(
	.D(builder_inferedsdrtristate15__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(main_dfi_p0_rddata[15])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_15 (
	.B(sdram_dq[15]),
	.I(builder_inferedsdrtristate15__o),
	.T((~builder_inferedsdrtristate15_oe)),
	.O(builder_inferedsdrtristate15__i)
);

OFS1P3BX OFS1P3BX_39(
	.D(sdpads_cmd_o),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate16__o)
);

IFS1P3BX IFS1P3BX_16(
	.D(builder_inferedsdrtristate16__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdpads_cmd_i)
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_16 (
	.B(sdcard_cmd),
	.I(builder_inferedsdrtristate16__o),
	.T((~builder_inferedsdrtristate16_oe)),
	.O(builder_inferedsdrtristate16__i)
);

OFS1P3BX OFS1P3BX_40(
	.D(sdpads_data_o[0]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate17__o)
);

IFS1P3BX IFS1P3BX_17(
	.D(builder_inferedsdrtristate17__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdpads_data_i[0])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_17 (
	.B(sdcard_data[0]),
	.I(builder_inferedsdrtristate17__o),
	.T((~builder_inferedsdrtristate17_oe)),
	.O(builder_inferedsdrtristate17__i)
);

OFS1P3BX OFS1P3BX_41(
	.D(sdpads_data_o[1]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate18__o)
);

IFS1P3BX IFS1P3BX_18(
	.D(builder_inferedsdrtristate18__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdpads_data_i[1])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_18 (
	.B(sdcard_data[1]),
	.I(builder_inferedsdrtristate18__o),
	.T((~builder_inferedsdrtristate18_oe)),
	.O(builder_inferedsdrtristate18__i)
);

OFS1P3BX OFS1P3BX_42(
	.D(sdpads_data_o[2]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate19__o)
);

IFS1P3BX IFS1P3BX_19(
	.D(builder_inferedsdrtristate19__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdpads_data_i[2])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_19 (
	.B(sdcard_data[2]),
	.I(builder_inferedsdrtristate19__o),
	.T((~builder_inferedsdrtristate19_oe)),
	.O(builder_inferedsdrtristate19__i)
);

OFS1P3BX OFS1P3BX_43(
	.D(sdpads_data_o[3]),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(builder_inferedsdrtristate20__o)
);

IFS1P3BX IFS1P3BX_20(
	.D(builder_inferedsdrtristate20__i),
	.PD(1'd0),
	.SCLK(sys_clk),
	.SP(1'd1),
	.Q(sdpads_data_i[3])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO_20 (
	.B(sdcard_data[3]),
	.I(builder_inferedsdrtristate20__o),
	.T((~builder_inferedsdrtristate20_oe)),
	.O(builder_inferedsdrtristate20__i)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-19 09:17:58.
//------------------------------------------------------------------------------
